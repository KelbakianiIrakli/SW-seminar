

/**
* Create light dialog with title and message
*
* @param context
* @param title
* @param message
* @return alert dialog
*/
public static LightDialog create(Context context, String title, int message) {
}


/**
* Set positive button
*
* @param text
* @param listener
* @return this dialog
*/
public LightDialog setPositiveButton(int text, OnClickListener listener) {


/**
* Set positive button
*
* @param text
* @param listener
* @return this dialog
*/
public LightDialog setNegativeButton(int text, OnClickListener listener) {


/**
* Programming languages
*/
public enum Language {


/**
* URL utilities
*/
public abstract class UrlUtils {


/**
* Command class to stash changes in the working directory and index in a
* commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/
public class StashCreateCommand extends GitCommand<RevCommit> {


/**
* Unit tests of {@link StashCreateCommand}
*/
public class StashCreateCommandTest extends RepositoryTestCase {


/**
* Loader that support throwing an exception when loading in the background
*
* @param <D>
*/
public abstract class ThrowableLoader<D> extends AsyncLoader<D> {

/**
* Create loader for context and seeded with initial data
*
* @param context
* @param data
*/
public ThrowableLoader(Context context, D data) {

/**
* @return exception
*/
public Exception getException() {

/**
* Clear the stored exception and return it
*
* @return exception
*/
public Exception clearException() {

/**
* Load data
*
* @return data
* @throws Exception
*/
public abstract D loadData() throws Exception;

/**
* Utility adapter that supports adding headers and footers
*
* @param <E>
*/
public class HeaderFooterListAdapter<E extends BaseAdapter> extends

/**
* Create header footer adapter
*
* @param view
* @param adapter
*/
public HeaderFooterListAdapter(ListView view, E adapter) {

/**
* Add non-selectable header view with no data
*
* @see #addHeader(View, Object, boolean)
* @param view
* @return this adapter
*/
public HeaderFooterListAdapter<E> addHeader(View view) {

/**
* Add header
*
* @param view
* @param data
* @param isSelectable
* @return this adapter
*/
public HeaderFooterListAdapter<E> addHeader(View view, Object data,

/**
* Add non-selectable footer view with no data
*
* @see #addFooter(View, Object, boolean)
* @param view
* @return this adapter
*/
public HeaderFooterListAdapter<E> addFooter(View view) {

/**
* Add footer
*
* @param view
* @param data
* @param isSelectable
* @return this adapter
*/
public HeaderFooterListAdapter<E> addFooter(View view, Object data,

/**
* Remove all headers
*
* @return true if headers were removed, false otherwise
*/
public boolean clearHeaders() {

/**
* Remove all footers
*
* @return true if headers were removed, false otherwise
*/
public boolean clearFooters() {

/**
* Base fragment for displaying a list of items that loads with a progress bar
* visible
*
* @param <E>
*/
public abstract class ItemListFragment<E> extends RoboSherlockFragment

/**
* @param args
*            bundle passed to the loader by the LoaderManager
* @return true if the bundle indicates a requested forced refresh of the
*         items
*/
protected static boolean isForceRefresh(Bundle args) {

/**
* List items provided to {@link #onLoadFinished(Loader, List)}
*/
protected List<E> items = Collections.emptyList();

/**
* List view
*/
protected ListView listView;

/**
* Empty view
*/
protected TextView emptyView;

/**
* Progress bar
*/
protected ProgressBar progressBar;

/**
* Is the list currently shown?
*/
protected boolean listShown;

/**
* Detach from list view.
*/
@Override

/**
* Configure list after view has been created
*
* @param activity
* @param listView
*/
protected void configureList(Activity activity, ListView listView) {

/**
* Force a refresh of the items displayed ignoring any cached items
*/
protected void forceRefresh() {

/**
* Refresh the fragment's list
*/
public void refresh() {

/**
* Get error message to display for exception
*
* @param exception
* @return string resource id
*/
protected abstract int getErrorMessage(Exception exception);

/**
* Create adapter to display items
*
* @return adapter
*/
protected HeaderFooterListAdapter<SingleTypeAdapter<E>> createAdapter() {

/**
* Create adapter to display items
*
* @param items
* @return adapter
*/
protected abstract SingleTypeAdapter<E> createAdapter(final List<E> items);

/**
* Set the list to be shown
*/
protected void showList() {public void onLoaderReset(Loader<List<E>> loader) {
// Intentionally left blank
}

/**
* Show exception in a Toast
*
* @param message
*/
protected void showError(final int message) {

/**
* Get exception from loader if it provides one by being a
* {@link ThrowableLoader}
*
* @param loader
* @return exception or null if none provided
*/
protected Exception getException(final Loader<List<E>> loader) {

/**
* Refresh the list with the progress bar showing
*/
protected void refreshWithProgress() {

/**
* Get {@link ListView}
*
* @return listView
*/
public ListView getListView() {

/**
* Get list adapter
*
* @return list adapter
*/
@SuppressWarnings("unchecked")

/**
* Set list adapter to use on list view
*
* @param adapter
* @return this fragment
*/
protected ItemListFragment<E> setListAdapter(final ListAdapter adapter) {

/**
* Set list shown or progress bar show
*
* @param shown
* @return this fragment
*/
public ItemListFragment<E> setListShown(final boolean shown) {

/**
* Set list shown or progress bar show
*
* @param shown
* @param animate
* @return this fragment
*/
public ItemListFragment<E> setListShown(final boolean shown,if (shown)
// List has already been shown so hide/show the empty view with
// no fade effect
if (items.isEmpty())

/**
* Set empty text on list fragment
*
* @param message
* @return this fragment
*/
protected ItemListFragment<E> setEmptyText(final String message) {

/**
* Set empty text on list fragment
*
* @param resId
* @return this fragment
*/
protected ItemListFragment<E> setEmptyText(final int resId) {

/**
* Callback when a list view item is clicked
*
* @param l
* @param v
* @param position
* @param id
*/
public void onListItemClick(ListView l, View v, int position, long id) {

/**
* Is this fragment still part of an activity and usable from the UI-thread?
*
* @return true if usable on the UI-thread, false otherwise
*/
protected boolean isUsable() {
// On ICS this equivalent to SYSTEM_UI_FLAG_LOW_PROFILE - the
// dimmed-menu-buttons mode
124c132,133

/**
* Unit tests of {@link CreateBranchPage}
*/
public class CreateBranchPageTest {

/**
* Unit tests of {@link CommitCommand}
*/
public class CommitCommandTest extends RepositoryTestCase {

/**
* Checkout commit handler
*/
public class CheckoutHandler extends CommitCommandHandler {

/**
* Utilities for displaying toast notifications
*/
public class ToastUtils {

/**
* Show the given message in a {@link Toast}
* <p>
* This method may be called from any thread
*
* @param activity
* @param message
*/
public static void show(Activity activity, final String message) {

/**
* Show the message with the given resource id in a {@link Toast}
* <p>
* This method may be called from any thread
*
* @param activity
* @param resId
*/
public static void show(final Activity activity, final int resId) {

/**
* Show {@link Toast} for exception
* <p>
* This given default message will be used if an message can not be derived from the given {@link Exception}
* <p>
* This method may be called from any thread
*
* @param activity
* @param e
* @param defaultMessage
*/
public static void show(final Activity activity, final Exception e, final int defaultMessage) {

/**
* Helper to show {@link Toast} notifications
*/
public class Toaster {

/**
* Command class to list the stashed commits in a repository.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/
public class StashListCommand extends GitCommand<Collection<RevCommit>> {

/**
* Unit tests of {@link StashListCommand}
*/
public class StashListCommandTest extends RepositoryTestCase {

/**
* Editor page class to display commit notes.
*/
public class NotesEditorPage extends FormPage {

/**
* Repository commit note class.
*/
public class RepositoryCommitNote extends PlatformObject implements

/**
* Note details page that display the text content of a note in a
* {@link StyledText} widget.
*/
public class NoteDetailsPage implements IDetailsPage, IDetailsPageProvider {

/**
* Notes master details block class.
*/
public class NotesBlock extends MasterDetailsBlock {

/**
* Key model class.
*/
public class Key {

/**
*
*/
public class EntityDeleteMethod extends HttpEntityEnclosingRequestBase {encoded = HtmlUtils.encode(html, loading);
// Use default encoding if no img tags
if (html.indexOf("<img") == -1) {

/**
* Add issue filter from store
* <p>
* This method may perform file I/O and should never be called on the UI-thread
*
* @param filter
*/
public void removeIssueFilter(IssueFilter filter) {

/**
* Remove issue filter from store
*
* @param filter
* @param requestFuture
*/
public void removeIssueFilter(final IssueFilter filter, final RequestFuture<IssueFilter> requestFuture) {

/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param bundle
*/
public static void show(final DialogFragmentActivity activity, final int requestCode, final String title,

/**
* Unit tests of {@link PullRequestReviewCommentPayload}
*/
public class PullRequestReviewCommentPayloadTest {

/**
* Payload for an event with type {@link Event#TYPE_PULL_REQUEST_REVIEW_COMMENT}
*/
public class PullRequestReviewCommentPayload extends EventPayload implements

/**
* Icons for the Mylyn GitHub connector.
* 
* @author Kevin Sawicki (kevin@github.com)
*/
public class UIIcons {

/**
* View to display an Air Traffic map
*/
27a35,95

/**
* Unscaled width of map image used
*/
private static final double MAP_WIDTH = 960.0;

/**
* Unscaled height of map image used
*/
private static final double MAP_HEIGHT = 596.0;

/**
* Divisor used to compute the scaling value
* <p>
* Constant taken from gaug.es site
*/
private static final double SCALE_DIVISOR = 720.0;

/**
* Multiplier used to compute the scaling value
* <p>
* Constant taken from gaug.es site
*/
private static final double SCALE_MULTIPLIER = 0.169;

/**
* Relative width used for x/y correction and scale value
*/
private static final double RELATIVE_WIDTH = MAP_WIDTH / SCALE_DIVISOR;

/**
* Scale value used based on map image dimensions
*/
private static final double SCALE = RELATIVE_WIDTH * SCALE_MULTIPLIER;

/**
* Correction value used to adjust scaled y position
*/
private static final double Y_CORRECTOR = 65 * RELATIVE_WIDTH;

/**
* Correction value used to adjust scaled x position
*/
private static final double X_CORRECTOR = RELATIVE_WIDTH;

/**
* Constant taken from gaug.es site
*/
private static final double PIXELS_PER_LONGITUDE_DEGREE = 16.0 / 360.0;

/**
* Constant taken from gaug.es site
*/
private static final double NEGATIVE_PIXELS_PER_LONGITUDE_RADIAN = -(16.0 / (2.0 * PI));

/**
* Constant taken from gaug.es site
*/
private static final double BITMAP_ORIGIN = 16.0 / 2.0;

/**
* Used to track elapsed time for animations and fps
*/
private long startTime;

/**
* Used to track frames per second
*/
private int frames = 0;

/**
* Frames per second
*/
private float fps = 0; // frames per second
// Load all the pin images
pins[0] = BitmapFactory.decodeResource(resources, drawable.pin0);
// Load all the ring images
rings[0] = BitmapFactory.decodeResource(resources, drawable.ring0);90a216,220

/**
* Set the list of {@link Gauge} items to display
*
* @param gauges
*/
94a225,234
// Find the color index for the given site id
Integer colorIndex = gaugeColors.get(hit.siteId);
// Determine the x and y positions to draw the hit at.
// This code was taken from the gaug.es site
double globalX = (BITMAP_ORIGIN + hit.lon * PIXELS_PER_LONGITUDE_DEGREE) * 256.0;
// Take absolute positions on actual map and scale to actual screen size since map image may have been scaled
x *= xMapScale;
// Draw rings if the hit just occurred
if (now - hit.time < 250) {148a321,323

/**
* Pause the animated view
*/
155c330,332

/**
* Resume the animated view
*/
164c34111a12,14

/**
* Callback that delivers pushed air traffic events to a {@link Queue}
*/
12a16,1814a21,25

/**
* Create callback that pushes hits to given {@link Queue}
*
* @param hits
*/
21d312a3,6

/**
* Class to model a hit of traffic to a specific site
*/
public class Hit {

/**
* Create a hit for the given site
*
* @param siteId
* @param lon
* @param lat
* @param time
*/
public Hit(final String siteId, final float lon, final float lat, final long time) {

/**
* Gist file class.
*/
public class GistFile {

/**
* GitHub gist class.
*/
public class Gist {

/**
* Unit tests of {@link StashCreateCommand}
*/
public class StashDropCommandTest extends RepositoryTestCase {

/**
* Command class to delete a stashed commit reference
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/
public class StashDropCommand extends GitCommand<ObjectId> {

/**
* Utility for writing reflog entries
*/
public class ReflogWriter {

/**
* Issue summary task editor part modeled after {@link TaskEditorSummaryPart}
* but displaying reporter and assignee avatar images.
*/
public class IssueSummaryPart extends AbstractTaskEditorPart {

/**
* Utilities for dealing with paths when looking for commits
*/
public abstract class PathFilterUtils {

/**
* Command class to stash changes in the working directory and index in a
* commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/
public class StashCreateCommand extends GitCommand<RevCommit> {

/**
* Unit tests of {@link StashCreateCommand}
*/
public class StashCreateCommandTest extends RepositoryTestCase {

/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/
public class PathCheckoutCommandTest extends RepositoryTestCase {

/**
* Replace with reference action
*/
public class ReplaceWithRefAction extends RepositoryAction {

/**
* Replace with HEAD revision action
*/
public class ReplaceWithHeadAction extends RepositoryAction {

/**
* Replace with ref action handler
*/
public class ReplaceWithRefActionHandler extends DiscardChangesActionHandler {

/**
* Replace with HEAD revision action handler
*/
public class ReplaceWithHeadActionHandler extends DiscardChangesActionHandler {

/**
* Replace with commit action handler
*/
public class ReplaceWithCommitActionHandler extends DiscardChangesActionHandler {

/**
* Replace with Commit action
*/
public class ReplaceWithCommitAction extends RepositoryAction {org = organization;
// Only hard refresh if view already created and org is changing
if (getView() != null && previousOrgId != org.getId())

/**
* Callback interface when the selected organization changes
*/
public interface OrganizationSelectionListener {

/**
* Organization selection changed
*
* @param organization
*/
void onOrganizationSelected(User organization);

/**
* Interface to register and unregister a {@link OrganizationSelectionListener}
*/
public interface OrganizationSelectionProvider {

/**
* Add selection listener
*
* @param listener
* @return the currently selected organization
*/
User addListener(OrganizationSelectionListener listener);

/**
* Remove selection listener
*
* @param listener
* @return this selection provider
*/
OrganizationSelectionProvider removeListener(OrganizationSelectionListener listener);org = organization;
// Only hard refresh if view already created and org is changing
if (getView() != null && previousOrgId != org.getId())

/**
* Repository deploy key model class.
*/
public class DeployKey {

/**
* Service for interacting with a repository's deploy keys
* 
* @see <a href="http://developer.github.com/v3/repos/keys">GitHub Deploy Key
*      API documentation</a>
*/
public class DeployKeyService extends GitHubService {

/**
* Unit tests of {@link DeployKeyService}
*/
public class DeployKeyTest extends LiveTest {8a9,11

/**
* Utilities for displaying toast notifications
*/
21a25,2644a45,49

/**
* Create new module with bings
*
* @return module
*/
58a6483a95,99

/**
* Enter scope with account
*
* @param account
*/
89a106,108

/**
* Exit scope
*/


/**
* Pager over events
*/
public abstract class EventPager extends ResourcePager<Event> {

/**
* Show more events while retaining the current {@link EventPager} state
*/
private void showMore() {

/**
* Source viewer to display one or more file differences using standard editor
* colors and fonts preferences.
*/
public class DiffViewer extends SourceViewer {

/**
* Messages class
*/
public class Messages {

/**
* 
* Time ago class that converts long millisecond and {@link Date} objects to
* time ago/from now {@link String} objects.
* 
* This class uses the messages from {@link Messages} by default but those can
* be changed after creation through one of the setter methods for a specified
* time string.
*/
public class TimeAgo {

/**
* 
* Unit tests of {@link TimeAgo}
*/
public class TimeAgoTest extends TestCase {

/**
* Dialog to display when a revert failures
*/
public class RevertFailureDialog extends MessageDialog {

/**
* Operation to add a submodule to a repository
*/
public class SubmoduleAddOperation implements IEGitOperation {

/**
* Operation that updates a repository's submodules
*/
public class SubmoduleUpdateOperation implements IEGitOperation {

/**
* Operation that syncs a repository's submodule configurations
*/
public class SubmoduleSyncOperation implements IEGitOperation {

/**
* Wizard to configure a new submodule
*/
public class AddSubmoduleWizard extends Wizard {

/**
* Wizard page to configure the path of a submodule
*/
public class SubmodulePathWizardPage extends WizardPage {

/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/
public abstract class SubmoduleCommand<V> extends

/**
* Command to sync submodule configuration
*/
public class SubmoduleSyncCommand extends

/**
* Command to update selected submodules
*/
public class SubmoduleUpdateCommand extends

/**
* Command to add a new submodule to a repository
*/
public class SubmoduleAddCommand extends

/**
* Property page for elements that can adapt to a {@link Repository} object.
*/
public class RepositoryPropertyPage extends PropertyPage {39a37,41

/**
* Gist successfully created
*/
public static final int RESULT_CREATED = 1;

/**
* Encoding utilities
*/
public abstract class EncodingUtils {34a35,44

/**
* Get byte count
*
* @param bitmap
* @return byte count
*/
public static final int getByteCount(final Bitmap bitmap) {

/**
* Unit tests of {@link LineHistoryCommand}
*/
public class LineHistoryCommandTest extends RepositoryTestCase {

/**
* Annotate command for building a {@link Revision} list for a file path.
*/
public class LineHistoryCommand extends GitCommand<List<Revision>> {

/**
* Line class that spans one or more revisions.
*/
public class Line {

/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
*/
public class LineComparator implements Comparator<Line> {

/**
* Class containing all the lines present in a file revision.
*/
public class Revision {

/**
* Class to assemble the history of every line in every revision of a file.
*/
public class RevisionBuilder {

/**
* Determines when revision building should continue as each revision with line
* history is generated.
*/
public abstract class RevisionFilter {

/**
* Tests of {@link CreateCommentActivity}
*/
public class CreateCommentActivityTest extends

/**
* Create test
*/
public CreateCommentActivityTest() {

/**
* Verify empty comment can't be created
*
* @throws Throwable
*/
public void testEmptyCommentIsProhitibed() throws Throwable {16a17,19

/**
* GitHub issue task attributes
*/
19,35c22,112

/**
* Unit tests for adding submodules to a repository
*/
@RunWith(SWTBotJunit4ClassRunner.class)

/**
* Unit tests of running a submodule sync
*/
@RunWith(SWTBotJunit4ClassRunner.class)

/**
* Search unit test suite
*/
@RunWith(Suite.class)

/**
* Unit tests for running a submodule update
*/
@RunWith(SWTBotJunit4ClassRunner.class)

/**
* Operation to add a submodule to a repository
*/
public class SubmoduleAddOperation implements IEGitOperation {

/**
* Operation that updates a repository's submodules
*/
public class SubmoduleUpdateOperation implements IEGitOperation {

/**
* Operation that syncs a repository's submodule configurations
*/
public class SubmoduleSyncOperation implements IEGitOperation {

/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/
public abstract class SubmoduleCommand<V> extends

/**
* Command to sync submodule configuration
*/
public class SubmoduleSyncCommand extends

/**
* Command to add a new submodule to a repository
*/
public class SubmoduleAddCommand extends

/**
* Command to update selected submodules
*/
public class SubmoduleUpdateCommand extends

/**
* Wizard to configure a new submodule
*/
public class AddSubmoduleWizard extends Wizard {

/**
* Wizard page to configure the path of a submodule
*/
public class SubmodulePathWizardPage extends WizardPage {

/**
* Unit tests of {@link LineHistoryCommand}
*/
public class LineHistoryCommandTest extends RepositoryTestCase {

/**
* Annotate command for building a {@link Revision} list for a file path.
*/
public class LineHistoryCommand extends GitCommand<List<Revision>> {

/**
* Line class that spans one or more continuous revisions.
*/
public class Line {

/**
* Class containing all the lines present in a file revision.
*/
public class Revision {

/**
* Class to assemble the history of every line in every revision of a file.
*/
public class RevisionBuilder {

/**
* Determines when revision building should continue as each revision with line
* history is generated.
*/
public abstract class RevisionFilter {

/**
* Blame command for building a {@link BlameResult} for a file path.
*/
public class BlameCommand extends GitCommand<BlameResult> {

/**
* Generate author information for lines based on introduction to the file.
* <p>
* Applications that want a simple one-shot computation of blame for a file
* should use {@link #computeBlameResult()} to prepare the entire result in one
* method call. This may block for significant time as the history of the
* repository must be traversed to gather information on every line.
* <p>
* Applications that want more incremental update behavior may use either the
* raw {@link #next()} streaming approach supported by this class, or construct
* a {@link BlameResult} using {@link BlameResult#create(BlameGenerator)} and
* incrementally construct the result with {@link BlameResult#computeNext()}.
* <p>
* This class is not thread-safe.
* <p>
* During blame processing there are two files involved:
* <ul>
* <li>result - The file whose lines are being examined. This is the revision
* the user is trying to view blame/annotation information alongside of.</li>
* <li>source - The file that was blamed with supplying one or more lines of
* data into result. The source may be a different file path (due to copy or
* rename). Source line numbers may differ from result line numbers due to lines
* being added/removed in intermediate revisions.</li>
* </ul>
*/
public class BlameGenerator {

/**
* Collects line annotations for inspection by applications.
* <p>
* A result is usually updated incrementally as the BlameGenerator digs back
* further through history. Applications that want to lay annotations down text
* to the original source file in a viewer may find the BlameResult structure an
* easy way to acquire the information, at the expense of keeping tables in
* memory tracking every line of the result file.
* <p>
* This class is not thread-safe.
* <p>
* During blame processing there are two files involved:
* <ul>
* <li>result - The file whose lines are being examined. This is the revision
* the user is trying to view blame/annotation information alongside of.</li>
* <li>source - The file that was blamed with supplying one or more lines of
* data into result. The source may be a different file path (due to copy or
* rename). Source line numbers may differ from result line numbers due to lines
* being added/removed in intermediate revisions.</li>
* </ul>
*/
public class BlameResult {

/**
* Unit tests of {@link BlameCommand}
*/
public class BlameCommandTest extends RepositoryTestCase {

/** Unit tests of {@link BlameGenerator}. */
public class BlameGeneratorTest extends RepositoryTestCase {
/*	Copyright (C) 2011 Emory Myers 
* 
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*  
*  	http://www.apache.org/licenses/LICENSE-2.0
*  
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License. 
*/
AirTrafficEngine() {
// Create a Paint to draw the lines for our cube
mHandler.removeCallbacks(mDrawCube);
//            pusher.disconnect();
}super.onSurfaceChanged(holder, format, width, height);
// store the center of the surface, so we can draw the cube in the right spot
mCenterX = width/2.0f;if (c != null) {
// draw something
drawTraffic(c);
// drawTouchPoint(c);
}
// Reschedule the next redraw
mHandler.removeCallbacks(mDrawCube);

/**
* Gauges application
*/
public class GaugesApplication extends Application {

/**
* Create main application
*/
public GaugesApplication() {
// Disable http.keepAlive on Froyo and below
if (SDK_INT <= FROYO)

/**
* Create main application
*
* @param context
*/
public GaugesApplication(final Context context) {

/**
* Create main application
*
* @param instrumentation
*/
public GaugesApplication(final Instrumentation instrumentation) {

/**
* Provider for a {@link GaugesService} instance
*/
public class GaugesServiceProvider {

/**
* Get service for configured key provider
*
* @return gauges service
* @throws IOException
* @throws AccountsException
*/
public GaugesService getService() throws IOException, AccountsException {

/**
* Constants used for {@link Intent} and {@link Bundle} properties
*/
public interface IntentConstants {

/**
* Authenticator service that returns a subclass of AbstractAccountAuthenticator in onBind()
*/
public class AccountAuthenticatorService extends Service {

/**
* Create account authenticator service
*/
public AccountAuthenticatorService() {

/**
* Bridge class that obtains a gaug.es API key for the currently configured account
*/
public class ApiKeyProvider {

/**
* This call blocks, so shouldn't be called on the UI thread
*
* @return API key to be used for authorization with a {@link GaugesService} instance
* @throws AccountsException
* @throws IOException
*/
public String getAuthKey() throws AccountsException, IOException {

/**
* Constants for authenticating
*/
public interface AuthConstants {

/**
* Account type id
*/
String GAUGES_ACCOUNT_TYPE = "com.github.gauges";

/**
* Account name
*/
String GAUGES_ACCOUNT_NAME = "Gaug.es";

/**
* Provider id
*/
String GAUGES_PROVIDER_AUTHORITY = "com.github.gauges.sync";

/**
* Auth token type
*/
String AUTHTOKEN_TYPE = GAUGES_ACCOUNT_TYPE;
/*
* The user has requested to add a new account to the system. We return an intent that will launch our login screen
* if the user has not logged in yet, otherwise our activity will just pass the user's credentials on to the account
* manager.
*/
@Overridereturn bundle;
// Log.d(AccountAuthenticatorService.TAG, "addAccount " + accountType +
// " authTokenType=" + authTokenType);
}

/**
* Activity to authenticate the user against gaug.es
*/
public class GaugesAuthenticatorActivity extends RoboFragmentActivity {

/**
* PARAM_CONFIRMCREDENTIALS
*/
public static final String PARAM_CONFIRMCREDENTIALS = "confirmCredentials";

/**
* PARAM_PASSWORD
*/
public static final String PARAM_PASSWORD = "password";

/**
* PARAM_USERNAME
*/
public static final String PARAM_USERNAME = "username";

/**
* PARAM_AUTHTOKEN_TYPE
*/
public static final String PARAM_AUTHTOKEN_TYPE = "authtokenType";

/**
* If set we are just checking that the user knows their credentials; this doesn't cause the user's password to be
* changed on the device.
*/
private Boolean confirmCredentials = false;

/**
* Was the original caller asking for an entirely new account?
*/
protected boolean requestNewAccount = false;

/**
* Handles onClick event on the Submit button. Sends username/password to the server for authentication.
* <p/>
* Specified by android:onClick="handleLogin" in the layout xml
*
* @param view
*/
public void handleLogin(View view) {String message;
// A 401 is returned as an IOException with this message
if ("Received authentication challenge is null".equals(cause.getMessage()))

/**
* Called when response is received from the server for confirm credentials request. See onAuthenticationResult().
* Sets the AccountAuthenticatorResult which is sent back to the caller.
*
* @param result
*/
protected void finishConfirmCredentials(boolean result) {

/**
* Called when response is received from the server for authentication request. See onAuthenticationResult(). Sets
* the AccountAuthenticatorResult which is sent back to the caller. Also sets the authToken in AccountManager for
* this account.
*/


/**
* Hide progress dialog
*/
protected void hideProgress() {

/**
* Show progress dialog
*/
protected void showProgress() {

/**
* Called when the authentication process completes (see attemptLogin()).
*
* @param result
*/
public void onAuthenticationResult(boolean result) {

/**
* Returns the message to be displayed at the top of the login dialog box.
*/
private CharSequence getMessage() {

/**
* Set the result that is to be sent as the result of the request that caused this Activity to be launched. If
* result is null or this method is never called then the request will be canceled.
*
* @param result
*            this is returned as the result of the AbstractAccountAuthenticator request
*/
public final void setAccountAuthenticatorResult(Bundle result) {

/**
* Sends the result or a Constants.ERROR_CODE_CANCELED error if a result isn't present.
*/
public void finish() {if (accountAuthenticatorResponse != null) {
// send the result bundle back if set, otherwise send an error.
if (resultBundle != null)

/**
* Registered API client an authentication key
*/
public class Client implements Serializable {

/** serialVersionUID */
private static final long serialVersionUID = -1449954462631918663L;

/**
* @return key
*/
public String getKey() {

/**
* @param key
*/
public void setKey(String key) {

/**
* @return description
*/
public String getDescription() {

/**
* @param description
*/
public void setDescription(String description) {

/**
* Dated view summary
*/
public class DatedViewSummary extends ViewSummary {

/**
* Gauge information
*/
public class Gauge implements Serializable {

/**
* Container for all {@link Gauge} contents
*/
public class GaugeContent implements Iterable<PageContent> {

/**
* Collection of {@link Gauge} referrers
*/
public class GaugeReferrers implements Iterable<Referrer> {

/**
* Collection of all gauges
*/
public class Gauges implements Iterable<Gauge> {

/**
* Container for all registered API clients
*/
public class GaugesClients implements Serializable, Iterable<Client> {

/** serialVersionUID */
private static final long serialVersionUID = -3536711047802796186L;

/**
* @return clients
*/
public List<Client> getClients() {

/**
* @param clients
*/
public void setClients(List<Client> clients) {

/**
* gaug.es constants
*/
public interface GaugesConstants {

/**
* Gauges API service
*/
public class GaugesService {

/**
* GSON instance to use for all request
*/
public static final Gson GSON = new GsonBuilder().setDateFormat("yyyy-MM-dd")

/**
* Create gauges service
*
* @param username
* @param password
*/
public GaugesService(final String username, final String password) {

/**
* Create gauges service
*
* @param apiKey
*/
public GaugesService(final String apiKey) {

/**
* Execute request
*
* @param request
* @return request
* @throws IOException
*/
protected HttpRequest execute(HttpRequest request) throws IOException {

/**
* Get all gauges
*
* @return non-null but possibly empty list of gauges
* @throws IOException
*/
public List<Gauge> getGauges() throws IOException {

/**
* Get content for gauge id
*
* @param gaugeId
* @return non-null but possibly empty list of page content information
* @throws IOException
*/
public List<PageContent> getContent(String gaugeId) throws IOException {

/**
* Get referrers for gauge id
*
* @param gaugeId
* @return non-null but possibly empty list of referrers
* @throws IOException
*/
public List<Referrer> getReferrers(String gaugeId) throws IOException {

/**
* Create API client with description
*
* @param description
* @return created client
* @throws IOException
*/
public Client createClient(String description) throws IOException {

/**
* Get client with description
*
* @param description
* @return client or null if none found matching description
* @throws IOException
*/
public Client getClient(String description) throws IOException {

/**
* Get gauge with id
*
* @param gaugeId
* @return gauge
* @throws IOException
*/
public Gauge getGauge(String gaugeId) throws IOException {

/**
* Content entry for a {@link Gauge}
*/
public class PageContent implements Serializable {

/**
* Referrer to a page on a {@link Gauge}
*/
public class Referrer implements Serializable {

/**
* View summary
*/
public class ViewSummary implements Serializable {

/**
* Loader which extends AsyncTaskLoaders and handles caveats as pointed out in
* http://code.google.com/p/android/issues/detail?id=14944.
* <p/>
* Based on CursorLoader.java in the Fragment compatibility package
* 
* @param <D>
*            data type
* @author Alexander Blom (me@alexanderblom.se)
*/
public abstract class AsyncLoader<D> extends AsyncTaskLoader<D> {

/**
* Drawable bar graph
*/
public class BarGraphDrawable extends PaintDrawable {

/**
* Fragment to load page content information for a {@link Gauge}
*/
public class ContentListFragment extends ListLoadingFragment<PageContent> {

/**
* Create content list fragment
*/
public ContentListFragment() {

/**
* View holder for a {@link PageContent} item
*/
public class ContentViewHolder implements ViewHolder<PageContent> {

/**
* Activity to display list of gauge summaries
*/
public class GaugeListActivity extends RoboFragmentActivity implements GaugeListFragment.GaugeListEventsCallback {

/**
* Fragment to display a list of gauges
*/
public class GaugeListFragment extends ListLoadingFragment<Gauge> {

/**
* Pager adapter for a gauge
*/
public class GaugePagerAdapter extends FragmentPagerAdapter implements TitleProvider {

/**
* Create pager adapter
*
* @param context
*
* @param gauge
* @param fragmentManager
*/
public GaugePagerAdapter(Context context, Gauge gauge, FragmentManager fragmentManager) {

/**
* Activity to view a specific {@link Gauge}'s traffic, content, and referrer information
*/
public class GaugeViewActivity extends RoboFragmentActivity {

/**
* View holder for a {@link Gauge}
*/
public class GaugeViewHolder implements ViewHolder<Gauge> {

/**
* Helper to set an error message on a {@link EditText} when the field is empty and the view loses focus
*/
public class LeavingBlankTextFieldWarner implements View.OnFocusChangeListener {

/**
* List loading fragment for a specific type
*
* @param <E>
*/
public abstract class ListLoadingFragment<E> extends RoboListFragment implements

/**
* Fragment to display a list of {@link Referrer} instances
*/
public class ReferrerListFragment extends ListLoadingFragment<Referrer> {

/**
* Create referrer list fragment
*/
public ReferrerListFragment() {

/**
* View holder for a {@link Referrer}
*/
public class ReferrerViewHolder implements ViewHolder<Referrer> {

/**
* Adapter for {@link android.text.TextWatcher} interface
*/
public class TextWatcherAdapter implements TextWatcher {

/**
* Fragment to display list of recent traffic
*/
public class TrafficListFragment extends ListLoadingFragment<DatedViewSummary> {for (int i = 0; i < dayCount; i++) {
// Reverse entry order since entries are in reverse chronological order but graph is drawn left to right
int index = dayCount - 1 - i;

/**
* View holder for a traffic entry
*/
public class TrafficViewHolder implements ViewHolder<DatedViewSummary> {
/*
* 09/02/2011 - Emory Myers - 	added the isConnected method
*/

/*
* 09/02/2011 - Emory Myers - 	printing stacktraces for debugging purposes
* 								added some logging
* 								implemented isConnected method
* 								modified send method
*/
		// TODO see 4.1. step 41
//		else if (!headers.get("Sec-WebSocket-Location").equals(url.toASCIIString())) {
//			System.out.println("location: " + url.toASCIIString());
//		}
//		else if protocol
	}
/*
* 09/02/2011 - Emory Myers - 	printing stacktrace on IO exception
*/


/**
* Unit tests of client API
*/
public class GaugesApiClientUtilTest {

/**
* Utilities for working with an {@link EditText}
*/
public class EditTextUtils {

/**
* A {@link Runnable} that returns a boolean
*/
public static interface BooleanRunnable {

/**
* Runnable that returns true when run, false when not run
*
* @return true if run, false otherwise
*/
boolean run();

/**
* Bind given runnable to be invoked when the
*
* @param editText
* @param runnable
* @return edit text
*/
public static EditText onDone(final EditText editText,

/**
* Alert dialog in Holo Light theme
*/
public class LightDialog extends AlertDialog {

/**
* Create light dialog
*
* @param context
* @return light alert dialog
*/
public static LightDialog create(Context context) {

/**
* Create light dialog with title and message
*
* @param context
* @param title
* @param message
* @return alert dialog
*/
public static LightDialog create(Context context, String title, String message) {

/**
* Create light dialog with title and message
*
* @param context
* @param title
* @param message
* @return alert dialog
*/
public static LightDialog create(Context context, int title, int message) {

/**
* Create light dialog with title and message
*
* @param context
* @param title
* @param message
* @return alert dialog
*/
public static LightDialog create(Context context, int title, String message) {

/**
* Create light dialog with title and message
*
* @param context
* @param title
* @param message
* @return alert dialog
*/
public static LightDialog create(Context context, String title, int message) {

/**
* @param context
*/
protected LightDialog(Context context) {

/**
* @param context
* @param theme
*/
protected LightDialog(Context context, int theme) {

/**
* Set positive button
*
* @param text
* @param listener
* @return this dialog
*/
public LightDialog setPositiveButton(int text, OnClickListener listener) {

/**
* Set positive button
*
* @param text
* @param listener
* @return this dialog
*/
public LightDialog setNegativeButton(int text, OnClickListener listener) {

/**
* Adapter for lists where only multiple view types are needed
*
*/
public abstract class MultiTypeAdapter extends TypeAdapter {

/**
* Create adapter
*
* @param activity
*/
public MultiTypeAdapter(final Activity activity) {

/**
* Create adapter
*
* @param context
*/
public MultiTypeAdapter(final Context context) {

/**
* Create adapter
*
* @param inflater
*/
public MultiTypeAdapter(final LayoutInflater inflater) {

/**
* Clear all items
*
* @return this adapter
*/
public MultiTypeAdapter clear() {

/**
* Add item to adapter registered as the given type
*
* @param type
* @param item
* @return this adapter
*/
public MultiTypeAdapter addItem(int type, Object item) {

/**
* Add items to adapter registered as the given type
*
* @param type
* @param items
* @return this adapter
*/
public MultiTypeAdapter addItems(int type, Object[] items) {

/**
* Add items to adapter registered as the given type
*
* @param type
* @param items
* @return this adapter
*/
public MultiTypeAdapter addItems(int type, Collection<?> items) {

/**
* Get layout id for type
*
* @param type
* @return layout id
*/
protected abstract int getChildLayoutId(int type);

/**
* Get child view ids for type
*
* @param type
* @return array of view ids
*/
protected abstract int[] getChildViewIds(int type);

/**
* Set text on text view with given id
*
* @param parentView
* @param childViewId
* @param text
* @return text view
*/
protected TextView setText(View parentView, int childViewId, CharSequence text) {

/**
* Update view for item
*
* @param position
* @param view
* @param item
* @param type
*/
protected void update(int position, View view, Object item, int type) {

/**
* Update view for item
*
* @param position
* @param item
* @param type
*/
protected abstract void update(int position, Object item, int type);

/**
* Section finder helper
*/
public class SectionFinder implements SectionIndexer {

/**
* Clear all sections
*
* @return this finder
*/
public SectionFinder clear() {

/**
* Get section for item
* <p>
* The default behavior is to use the first character from the item's
* {@link #toString()} method
*
* @param item
* @return section
*/
protected Object getSection(final Object item) {

/**
* Index items by section returned from {@link #getSection(Object)}
*
* @param items
* @return this finder
*/
public SectionFinder index(Object... items) {

/**
* Add items to given section
*
* @param section
* @param items
* @return this finder
*/
public SectionFinder add(final Object section, final Object... items) {

/**
* Type adapter with section indexing according to English alphabet
*/
public abstract class SectionMultiTypeAdapter extends MultiTypeAdapter

/**
* @param activity
*/
public SectionMultiTypeAdapter(final Activity activity) {

/**
* @param context
*/
public SectionMultiTypeAdapter(final Context context) {

/**
* @param inflater
*/
public SectionMultiTypeAdapter(final LayoutInflater inflater) {

/**
* Add items mapped to given letter
*
* @param sectionType
* @param section
* @param itemType
* @param items
* @return this adapter
*/
public SectionMultiTypeAdapter addItems(final int sectionType,

/**
* @param <V>
*/
public abstract class SectionSingleTypeAdapter<V> extends SingleTypeAdapter<V>

/**
* @param activity
* @param layoutResourceId
*/
public SectionSingleTypeAdapter(Activity activity, int layoutResourceId) {

/**
* @param context
* @param layoutResourceId
*/
public SectionSingleTypeAdapter(Context context, int layoutResourceId) {

/**
* @param inflater
* @param layoutResourceId
*/
public SectionSingleTypeAdapter(LayoutInflater inflater, int layoutResourceId) {

/**
* Adapter for lists where only a single view type is used
*
* @param <V>
*/
public abstract class SingleTypeAdapter<V> extends TypeAdapter {

/**
* Create adapter
*
* @param activity
* @param layoutResourceId
*/
public SingleTypeAdapter(final Activity activity, final int layoutResourceId) {

/**
* Create adapter
*
* @param context
* @param layoutResourceId
*/
public SingleTypeAdapter(final Context context, final int layoutResourceId) {

/**
* Create adapter
*
* @param inflater
* @param layoutResourceId
*/
public SingleTypeAdapter(final LayoutInflater inflater,

/**
* Set items to display
*
* @param items
*/
public void setItems(Collection<?> items) {

/**
* Set items to display
*
* @param items
*/
public void setItems(final Object[] items) {

/**
* Get child view ids to store
*
* @return ids
*/
protected abstract int[] getChildViewIds();

/**
* Initialize view
*
* @param view
* @return view
*/
protected View initialize(final View view) {

/**
* Update view for item
*
* @param position
* @param view
* @param item
*/
protected void update(int position, View view, V item) {

/**
* Update item
*
* @param position
* @param item
*/
protected abstract void update(int position, V item);

/**
* Helper to show {@link Toast} notifications
*/
public class Toaster {

/**
* Show message in {@link Toast} with {@link Toast#LENGTH_LONG} duration
*
* @param activity
* @param resId
*/
public static void showLong(final Activity activity, int resId) {

/**
* Show message in {@link Toast} with {@link Toast#LENGTH_SHORT} duration
*
* @param activity
* @param resId
*/
public static void showShort(final Activity activity, final int resId) {

/**
* Show message in {@link Toast} with {@link Toast#LENGTH_LONG} duration
*
* @param activity
* @param message
*/
public static void showLong(final Activity activity, final String message) {

/**
* Show message in {@link Toast} with {@link Toast#LENGTH_SHORT} duration
*
* @param activity
* @param message
*/
public static void showShort(final Activity activity, final String message) {

/**
* Show message in {@link Toast} with {@link Toast#LENGTH_LONG} duration
*
* @param activity
* @param message
* @param args
*/
public static void showLong(final Activity activity, final String message,

/**
* Show message in {@link Toast} with {@link Toast#LENGTH_SHORT} duration
*
* @param activity
* @param message
* @param args
*/
public static void showShort(final Activity activity, final String message,

/**
* Show message in {@link Toast} with {@link Toast#LENGTH_LONG} duration
*
* @param activity
* @param resId
* @param args
*/
public static void showLong(final Activity activity, final int resId,

/**
* Show message in {@link Toast} with {@link Toast#LENGTH_SHORT} duration
*
* @param activity
* @param resId
* @param args
*/
public static void showShort(final Activity activity, final int resId,

/**
* Base adapter
*/
public abstract class TypeAdapter extends BaseAdapter {

/**
* View being updated
*/
protected View view;

/**
* Get text view with given id
*
* @param parentView
* @param childViewId
* @return text view
*/
protected TextView textView(final View parentView, final int childViewId) {

/**
* Get image view with given id
*
* @param parentView
* @param childViewId
* @return image view
*/
protected ImageView imageView(final View parentView, final int childViewId) {

/**
* Get view with given id
*
* @param parentView
* @param childViewId
* @return view
*/
protected View view(final View parentView, final int childViewId) {

/**
* Set text on text view with given id
*
* @param parentView
* @param childViewId
* @param text
* @return text view
*/
protected TextView setText(final View parentView, final int childViewId,

/**
* Get child view
*
* @param parentView
* @param childViewId
* @param childViewClass
* @return child view
*/
@SuppressWarnings("unchecked")

/**
* Set child view as gone or visible
*
* @param parentView
* @param childViewId
* @param gone
* @return child view
*/
protected View setGone(final View parentView, final int childViewId,

/**
* Create array with given base ids and additional ids
*
* @param base
* @param ids
* @return extended array
*/
protected int[] join(final int[] base, final int... ids) {

/**
* Initialize view by binding indexed child views to tags on the root view
* <p>
* Sub-classes may override this method but must call super
*
* @param view
* @param children
* @return view
*/
protected View initialize(final View view, final int[] children) {

/**
* Get text view with given id
*
* @param childViewId
* @return text view
*/
protected TextView textView(final int childViewId) {

/**
* Get image view with given id
*
* @param childViewId
* @return image view
*/
protected ImageView imageView(final int childViewId) {

/**
* Get view with given id
*
* @param childViewId
* @return view
*/
protected View view(final int childViewId) {

/**
* Set text on text view with given id
*
* @param childViewId
* @param text
* @return text view
*/
protected TextView setText(final int childViewId, final CharSequence text) {

/**
* Get child view
*
* @param childViewId
* @param childViewClass
* @return child view
*/
protected <T> T getView(final int childViewId, final Class<T> childViewClass) {

/**
* Set child view as gone or visible
*
* @param childViewId
* @param gone
* @return child view
*/
protected View setGone(final int childViewId, boolean gone) {

/**
* Helper for finding and tweaking a view's children
*/
public class ViewFinder {

/**
* Create finder wrapping given view
*
* @param view
*/
public ViewFinder(final View view) {

/**
* Get image view with id
*
* @param id
* @return image view
*/
public ImageView imageView(final int id) {

/**
* Set text of child view with given id
*
* @param id
* @param content
* @return text view
*/
public TextView setText(final int id, final String content) {

/**
* Set text of child view with given id
*
* @param id
* @param content
* @return text view
*/
public TextView setText(final int id, final int content) {

/**
* Register on click listener to child view with given id
*
* @param id
* @param listener
* @return view registered with listener
*/
public View onClick(final int id, final OnClickListener listener) {

/**
* Register runnable to be invoked when child view with given id is clicked
*
* @param id
* @param runnable
* @return view registered with runnable
*/
public View onClick(final int id, final Runnable runnable) {

/**
* Set drawable on child image view
*
* @param id
* @param drawable
* @return image view
*/
public ImageView setDrawable(final int id, final int drawable) {

/**
* Utilities for working with the {@link View} class
*/
public class ViewUtils {

/**
* Set visibility of given view to be gone or visible
* <p>
* This method has no effect if the view visibility is currently invisible
*
* @param view
* @param gone
* @return view
*/
public static <V extends View> V setGone(final V view, final boolean gone) {

/**
* Set visibility of given view to be invisible or visible
* <p>
* This method has no effect if the view visibility is currently gone
*
* @param view
* @param invisible
* @return view
*/
public static <V extends View> V setInvisible(final V view,

/**
* Decode file to bitmap
*
* @param file
* @return bitmap
*/
protected Bitmap decode(final File file) {} catch (IOException e) {
// Ignored
}201a149,169

/**
* Set resource provider
*
* @param provider
* @return this view
*/
public AirTrafficView setResourceProvider(final AirTrafficResourceProvider provider) {

/**
* Class that maps pins and rings to a specific gauge to be used in the air traffic view
*/
public class AirTrafficResourceProvider {

/**
* Create resource provider
*
* @param resources
*/
public AirTrafficResourceProvider(final Resources resources) {
// Load all the pin images
pins[0] = BitmapFactory.decodeResource(resources, drawable.pin0);
// Load all the ring images
rings[0] = BitmapFactory.decodeResource(resources, drawable.ring0);

/**
* Set gauges to be styled
*
* @param gauges
* @return this provider
*/
public AirTrafficResourceProvider setGauges(final List<Gauge> gauges) {

/**
* Get key for gauge id
*
* @param gaugeId
* @return key, -1 if gauge id has no key
*/
public int getKey(String gaugeId) {

/**
* Get pin to draw for key
*
* @param key
* @return pin bitmap
*/
public Bitmap getPin(final int key) {

/**
* Get pin to draw for gauge with given id
*
* @param gaugeId
* @return bitmap, may be null
*/
public Bitmap getPin(String gaugeId) {

/**
* Get ring to draw for key
*
* @param key
* @return ring bitmap, may be null
*/
public Bitmap getRing(final int key) {

/**
* @return pinHeight
*/
public int getPinHeight() {

/**
* @return pinWidth
*/
public int getPinWidth() {

/**
* @return ringHeight
*/
public int getRingHeight() {

/**
* @return ringWidth
*/
public int getRingWidth() {29a30,40

/**
* Process hit
*
* @param hit
*/
protected void onHit(final Hit hit) {

/**
* Loader which extends AsyncTaskLoaders and handles caveats as pointed out in
* http://code.google.com/p/android/issues/detail?id=14944.
* <p/>
* Based on CursorLoader.java in the Fragment compatibility package
*
* @param <D>
*          data type
* @author Alexander Blom (me@alexanderblom.se)
*/
public abstract class AsyncLoader<D> extends AsyncTaskLoader<D> {

/**
* Create async loader
*
* @param context
*/
public AsyncLoader(Context context) {if (isReset())
// An async query came in while the loader is stopped
return;protected void onStopLoading() {
// Attempt to cancel the current load task if possible.
cancelLoad();
// Ensure the loader is stopped
onStopLoading();

/**
* Unit tests of {@link BranchProjectTracker}
*/
public class BranchProjectTrackerTest extends LocalRepositoryTestCase {

/**
* Search unit test suite
*/
@RunWith(Suite.class)

/**
* Base operation that supports adding pre/post tasks
*/
abstract class BaseOperation implements IEGitOperation {

/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/
class BranchProjectTracker {

/**
* Request to view an issue
*/
int ISSUE_VIEW = 2;

/**
* Request to edit an issue filter
*/
int ISSUE_FILTER_EDIT = 3;

/**
* Request to create a new issue
*/
int ISSUE_CREATE = 4;

/**
* Fragment to display a news feed for a specific repository
*/
public class RepositoryNewsFragment extends PagedListFragment<Event> {

/**
* Adapter to view a repository's various pages
*/
public class RepositoryPagerAdapter extends FragmentPagerAdapter implements TitleProvider {

/**
* @param fm
*/
public RepositoryPagerAdapter(FragmentManager fm) {

/**
* Activity to view a repository
*/
public class RepositoryViewActivity extends RoboSherlockFragmentActivity {

/**
* Create intent for this activity
*
* @param repository
* @return intent
*/
public static Intent createIntent(Repository repository) {

/**
* Exception class to be thrown when iterating over pages fails
*/
public class NoSuchPageException extends NoSuchElementException {

/**
* Iterator for getting paged responses
* 
* @param <V>
*/
public class PageIterator<V> implements Iterator<Collection<V>> {

/**
* Unit tests of {@link StreamProgressMonitor}
*/
public class StreamProgressMonitorTest {

/**
* Progress monitor that writes task information to a configured
* {@link PrintStream}
*/
public class StreamProgressMonitor implements ProgressMonitor {

/**
* GitHub issue label class.
*
* @author Kevin Sawicki (kevin@github.com)
*/
public class Label {

/**
* GitHub issue class.
*
* @author Kevin Sawicki (kevin@github.com)
*/
public class Issue {

/**
* {@link IDecoratableResource} implements for a {@link Repository} object
*/
public class DecoratableRepository implements IDecoratableResource {

/**
* Gist editor attachment part. Modeled after {@link TaskEditorAttachmentPart}
* but with less columns.
* 
* @author Kevin Sawicki (kevin@github.com)
*/
public class GistAttachmentPart extends AbstractTaskEditorPart {

/**
* Commit search results page class.
*/
public class CommitSearchResultsPage extends AbstractTextSearchViewPage {

/**
* Commit search results label provider class.
*/
public class CommitResultLabelProvider extends LabelProvider implements

/**
* Fragment to display Gists
*/
public class GistFragment extends ListLoadingFragment<Gist> {

/**
* View holder for a {@link Gist}
*/
public class GistViewHolder implements ViewHolder<Gist> {

/**
* Holder for a issue minus the comments
*/
public class CreateIssueHeaderViewHolder implements ViewHolder<Issue> {

/**
* Create issue header view holder
*
* @param view
* @param avatarHelper
* @param resources
*/
public CreateIssueHeaderViewHolder(final View view, final AvatarHelper avatarHelper, final Resources resources) {

/**
* Activity to create a new issue
*/
public class CreateIssueActivity extends DialogFragmentActivity {

/**
* Issue successfully created
*/
public static final int RESULT_CREATED = RESULT_FIRST_USER;

/**
* Create intent to create an issue in the given {@link Repository}
*
* @param repo
* @return intent
*/
public static Intent createIntent(RepositoryId repo) {

/**
* Create a Gist using an OAuth2 token
*/
public class GistViaOAuthToken {

/**
* Print a user's repositories
*/
public class PrintRepos {

/**
* Unit tests of {@link RepositoryCommit}
* 
* @author Kevin Sawicki (kevin@github.com)
*/
public class RepositoryCommitTest extends LocalRepositoryTestCase {

/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class also provides access to the {@link FileDiff} objects introduced by
* the commit.
*
* @author Kevin Sawicki (kevin@github.com)
*/
public class RepositoryCommit extends PlatformObject {

/**
* Core task attribute mapper
*/
public class GitHubTaskAttributeMapper extends TaskAttributeMapper {

/**
* GitHub task attribute metadata
*/
public class GitHubAttributeMetadata {

/**
* Core task data handler
*/
public abstract class GitHubTaskDataHandler extends AbstractTaskDataHandler {

/**
* Base repository connector
*/
public abstract class RepositoryConnector extends AbstractRepositoryConnector {

/**
* Base handler for working with a {@link TaskData} selection
*/
public abstract class TaskDataHandler extends AbstractHandler {

/**
* Callback for resolving a repository
*/
public interface IRepositoryCallback {

/**
* Create drawable bar graph for data and colors
*
* @param data
* @param colors
*/
public BarGraphDrawable(final long[][] data, final int[][] colors) {

/**
* Helpers to configure a {@link ListView}
* <p>
* Used for list views that aren't defined in local XML files and must be configured at runtime
*/
public class ListViewHelper {

/**
* Configure list view
*
* @param context
* @param listView
* @param fastScroll
* @return specified list view
*/
public static ListView configure(final Context context, final ListView listView, final boolean fastScroll) {

/**
* @author Kevin Sawicki (kevin@github.com)
*/
public class AvatarPreferencePage extends PreferencePage implements

/**
* @param context
*/
public CacheHelper(Context context) {

/**
* Query tables for columns
*
* @param helper
* @param tables
* @param columns
* @param selection
* @param selectionArgs
* @return cursor
*/
protected Cursor query(SQLiteOpenHelper helper, String tables, String[] columns, String selection,

/**
* Base GitHub service class.
*/
public abstract class GitHubService {

/**
* Image utilities
*/
public class Image {

/**
* Speech to text utilities
*/
public class Speech {

/**
* View holding adapter for arrays and collections
* 
* @param <T>
*            element type
*/
public class ViewHoldingArrayAdapter<T> extends BaseAdapter {73a75,103

/**
* Get cached response
*/
public static class CacheResponse implements Closeable {

/**
* ETag of response
*/
public final String eTag;

/**
* Body of response
*/
public final InputStream body;

/**
* Base operation that supports adding pre/post tasks
*/
abstract class BaseOperation implements IEGitOperation {

/**
* Unit tests of {@link BranchProjectTracker}
*/
public class BranchProjectTrackerTest extends LocalRepositoryTestCase {

/**
* Search unit test suite
*/
@RunWith(Suite.class)

/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/
class BranchProjectTracker {

/**
* Blame command for building a {@link Line} list for a file path.
*/
public class BlameCommand extends GitCommand<List<Line>> {

/**
* Generator of author information for lines based on when they were introduced
* into a file.
*/
public class BlameGenerator {

/**
* Line class that spans one or more continuous revisions.
*/
public class Line {

/**
* Unit tests of {@link BlameCommand}
*/
public class BlameCommandTest extends RepositoryTestCase {

/**
* Create exception from {@link JsonParseException}
*
* @param cause
*/
public JsonException(JsonParseException cause) {

/**
* Get bookmarked issue filters
* <p>
* This method may perform network I/O and should never be called on the UI-thread
*
* @return non-null but possibly empty collection of issue filters
*/
public Collection<IssueFilter> getIssueFilters() {

/**
* Get bookmarked issue filters
*
* @param requestFuture
*/
public void getIssueFilters(final RequestFuture<Collection<IssueFilter>> requestFuture) {

/**
* Add issue filter to store
* <p>
* This method may perform file I/O and should never be called on the UI-thread
*
* @param filter
*/
public void addIssueFilter(IssueFilter filter) {

/**
* Add issue filter to store
*
* @param filter
* @param requestFuture
*/
public void addIssueFilter(final IssueFilter filter, final RequestFuture<IssueFilter> requestFuture) {

/**
* View holder for an {@link IssueFilter}
*/
public class IssueFilterViewHolder implements ViewHolder<IssueFilter> {

/**
* Create holder for view
*
* @param view
*/
public IssueFilterViewHolder(final View view) {

/**
* List fragment displaying a list of {@link IssueFilter} items
*/
public class FilterListFragment extends ListLoadingFragment<IssueFilter> {47a52,61

/**
* Create intent to browse the filtered issues
*
* @param filter
* @return intent
*/
public static Intent createIntent(IssueFilter filter) {

/**
* Activity to browse a list of bookmarked {@link IssueFilter} items
*/
public class FilterBrowseActivity extends RoboFragmentActivity {

/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class also provides access to the {@link FileDiff} objects introduced by
* the commit.
*/
public class RepositoryCommit extends PlatformObject {

/**
* Unit tests of {@link RepositoryCommit}
*/
public class RepositoryCommitTest extends LocalRepositoryTestCase {

/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/
public class PathCheckoutCommandTest extends RepositoryTestCase {

/**
* Start an activity to view the given {@link User}
*
* @param user
* @return true if new activity started, false otherwise
*/
protected boolean viewUser(User user) {

/**
* Unit tests of {@link LineHistoryCommand}
*/
public class LineHistoryCommandTest extends RepositoryTestCase {

/**
* Annotate command for building a {@link Revision} list for a file path.
*/
public class LineHistoryCommand extends GitCommand<List<Revision>> {

/**
* Line class that spans one or more revisions.
*/
public class Line {

/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
*/
public class LineComparator implements Comparator<Line> {

/**
* Class containing all the lines present in a file revision.
*/
public class Revision {

/**
* Class to assemble the history of every line in every revision of a file.
*/
public class RevisionBuilder {

/**
* Determines when revision building should continue as each revision with line
* history is generated.
*/
public abstract class RevisionFilter {

/**
* Action prefix for all intents created
*/
String INTENT_PREFIX = "com.github.mobile.gauges.";

/**
* View Gauge action
*/
String VIEW_GAUGE = INTENT_PREFIX + "gauge.VIEW";

/**
* Unit tests of using a {@link WorkingTreeIterator} for a repository with
* submodules.
*/
public class WorkingTreeIteratorTest extends RepositoryTestCase {

/** Simple struct representing an event and its handler. */


/**
* Model class for the comparison of two commits
*/
public class RepositoryCommitCompare implements Serializable {

/**
* Unit tests of {@link RepositoryCommitCompare}
*/
public class RepositoryCommitCompareTest {

/**
* Drag assistant for {@link FileNode} selections in the repositories view
*/
public class RepositoryDragAssistant extends CommonDragAdapterAssistant {
// Set number field to max number size
Paint paint = new Paint();

/**
* Interface facade to searching repositories
*/
public interface IRepositorySearch {

/**
* Search for repositories matching query
*
* @param query
* @return list of repositories matching query
* @throws IOException
*/
List<SearchRepository> search(String query) throws IOException;23a24,26

/**
* GitHub task attribute mapper class.
*/
26,27c29,34

/**
* Helpers for dealing with system services
*/
public class ServiceUtils {

/**
* Get default display
*
* @param context
* @return display
*/
public static Display getDisplay(final Context context) {

/**
* Get default display
*
* @param view
* @return display
*/
public static Display getDisplay(final View view) {

/**
* Get default display width
*
* @param context
* @return display
*/
@SuppressWarnings("deprecation")

/**
* Get default display width
*
* @param view
* @return display
*/
public static int getDisplayWidth(final View view) {

/**
* Image utilities
*/
public class ImageUtils {

/**
* Get a bitmap from the image path
*
* @param imagePath
* @return bitmap or null if read fails
*/
public static Bitmap getBitmap(final String imagePath) {

/**
* Get a bitmap from the image path
*
* @param imagePath
* @param sampleSize
* @return bitmap or null if read fails
*/
public static Bitmap getBitmap(final String imagePath, int sampleSize) {

/**
* Get size of image
*
* @param imagePath
* @return size
*/
public static Point getSize(final String imagePath) {

/**
* Get bitmap with maximum height or width
*
* @param imagePath
* @param width
* @param height
* @return image
*/
public static Bitmap getBitmap(final String imagePath, int width, int height) {

/**
* Get bitmap with maximum height or width
*
* @param image
* @param width
* @param height
* @return image
*/
public static Bitmap getBitmap(final File image, int width, int height) {

/**
* Get a bitmap from the image file
*
* @param image
* @return bitmap or null if read fails
*/
public static Bitmap getBitmap(final File image) {

/**
* Load a {@link Bitmap} from the given path and set it on the given {@link ImageView}
*
* @param imagePath
* @param view
*/
public static void setImage(final String imagePath, final ImageView view) {

/**
* Load a {@link Bitmap} from the given {@link File} and set it on the given {@link ImageView}
*
* @param image
* @param view
*/
public static void setImage(final File image, final ImageView view) {

/**
* Round the corners of a {@link Bitmap}
*
* @param source
* @param radius
* @return rounded corner bitmap
*/
public static Bitmap roundCorners(final Bitmap source, final float radius) {

/**
* Helpers for accessing {@link AccountManager}
*/
public class AccountUtils {

/**
* Get login name of configured account
*
* @param context
* @return login name or null if none configure
*/
public static String getLogin(final Context context) {

/**
* Get account used for authentication
*
* @param manager
* @param activity
* @return account
*/
public static Account getAccount(final AccountManager manager, final Activity activity) {

/**
* Helpers for dealing with custom typefaces and measuring text to display
*/
public class TypefaceUtils {

/**
* Fork icon
*/
public static final char ICON_FORK = '\uf202';

/**
* Create icon
*/
public static final char ICON_CREATE = '\uf203';

/**
* Delete icon
*/
public static final char ICON_DELETE = '\uf204';

/**
* Push icon
*/
public static final char ICON_PUSH = '\uf205';

/**
* Wiki icon
*/
public static final char ICON_WIKI = '\uf207';

/**
* Upload icon
*/
public static final char ICON_UPLOAD = '\uf212';

/**
* Gist icon
*/
public static final char ICON_GIST = '\uf214';

/**
* Add member icon
*/
public static final char ICON_ADD_MEMBER = '\uf226';

/**
* Follow icon
*/
public static final char ICON_FOLLOW = '\uf228';

/**
* Watch icon
*/
public static final char ICON_WATCH = '\uf229';

/**
* Pull request icon
*/
public static final char ICON_PULL_REQUEST = '\uf234';

/**
* Issue open icon
*/
public static final char ICON_ISSUE_OPEN = '\uf238';

/**
* Issue reopen icon
*/
public static final char ICON_ISSUE_REOPEN = '\uf239';

/**
* Issue close icon
*/
public static final char ICON_ISSUE_CLOSE = '\uf240';

/**
* Issue comment icon
*/
public static final char ICON_ISSUE_COMMENT = '\uf241';

/**
* Comment icon
*/
public static final char ICON_COMMENT = '\uf243';

/**
* Find the maximum number of digits in the given numbers
*
* @param numbers
* @return max digits
*/
public static int getMaxDigits(int... numbers) {

/**
* Get width of number of digits
*
* @param view
* @param numberOfDigits
* @return number width
*/
public static int getWidth(TextView view, int numberOfDigits) {

/**
* Get octocons typeface
*
* @param context
* @return octocons typeface
*/
public static Typeface getOctocons(Context context) {

/**
* Set octocons typeface on given text view(s)
*
* @param textViews
*/
public static void setOctocons(TextView... textViews) {

/**
* Get typeface with name
*
* @param context
* @param name
* @return typeface
*/
public static Typeface getTypeface(Context context, String name) {

/**
* Utility class for working with {@link SharedPreferences}
*/
public class PreferenceUtils {

/**
* Save preferences in given editor
*
* @param editor
*/
public static void save(Editor editor) {

/**
* Avatar utilities
*/
public class AvatarUtils {

/**
* Create avatar helper
*
* @param context
*/
@Inject

/**
* Create bitmap from raw image and set to view
*
* @param image
* @param view
* @param user
* @return this helper
*/
protected AvatarUtils setImage(final BitmapDrawable image, final ImageView view, final User user) {

/**
* Get image for user
*
* @param user
* @return image
*/
protected BitmapDrawable getImage(final User user) {

/**
* Decode file to bitmap
*
* @param file
* @return bitmap
*/
protected Bitmap decode(final File file) {

/**
* Fetch avatar from URL
*
* @param url
* @param userId
* @return bitmap
*/
protected BitmapDrawable fetchAvatar(final String url, final Integer userId) {} catch (IOException e) {
// Ignored
}

/**
* Sets the logo on the {@link ActionBar} to the user's avatar.
*
* @param actionBar
* @param user
* @return this helper
*/
public AvatarUtils bind(final ActionBar actionBar, final User user) {

/**
* Bind view to image at URL
*
* @param view
* @param user
* @return this helper
*/
public AvatarUtils bind(final ImageView view, final User user) {

/**
* Helpers to configure a {@link ListView}
* <p>
* Used for list views that aren't defined in local XML files and must be configured at runtime
*/
public class ListViewUtils {

/**
* Configure list view
*
* @param context
* @param listView
* @param fastScroll
* @return specified list view
*/
public static ListView configure(final Context context, final ListView listView, final boolean fastScroll) {

/**
* Command class to stash changes in the working directory and index in a
* commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/
public class StashCreateCommand extends GitCommand<RevCommit> {

/**
* Unit tests of {@link StashCreateCommand}
*/
public class StashCreateCommandTest extends RepositoryTestCase {

/**
* Constants for use with {@link Intent}s
*/
public enum IntentConstant {

/**
* Activity to choose a stock symbol from a filterable list
*/
public class SelectStockActivity extends SherlockActivity {

/**
* Preference page for the History view
*/
public class HistoryPreferencePage extends FieldEditorPreferencePage implements

/** Preference page for views preferences */
public class SynchronizePreferencePage extends FieldEditorPreferencePage

/**
* Get resource property as a double
*
* @throws Exception
*/
@Test

/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/
public class PathCheckoutCommandTest extends RepositoryTestCase {

/**
* Unit test of {@link OrganizationService}
*/
@RunWith(MockitoJUnitRunner.class)

/**
* Unit tests of {@link CommitService}
*/
@RunWith(MockitoJUnitRunner.class)

/**
* Unit tests of {@link DeployKeyService}
*/
@RunWith(MockitoJUnitRunner.class)

/**
* Unit tests of {@link DataService}
*/
@RunWith(MockitoJUnitRunner.class)

/**
* Unit tests of {@link WatcherService}
*/
@RunWith(MockitoJUnitRunner.class)

/**
* Unit tests of {@link CollaboratorService}
*/
@RunWith(MockitoJUnitRunner.class)37a37,50

/**
* Shows a toast to the user - can be called from any thread, toast will be displayed using the UI-thread.
* <p>
* The important thing about the delayed aspect of the UI-thread code used by this method is that it may actually
* run <em>after</em> the associated activity has been destroyed - so it can not keep a reference to the activity.
* Calling methods on a destroyed activity may throw exceptions, and keeping a reference to it is technically a
* short-term memory-leak: http://developer.android.com/resources/articles/avoiding-memory-leaks.html
*
* @param activity
* @param resId
*/
public static void toastOnUiThread(Activity activity, final int resId) {String message;
// A 401 is returned as an IOException with this message
if ("Received authentication challenge is null".equals(cause.getMessage()))else if (item instanceof CharSequence) {
// Scan backwards and find the file
position--;

/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/
public class PathCheckoutCommandTest extends RepositoryTestCase {

/**
* Unit tests for {@link Comment}
*/
@SuppressWarnings("restriction")

/**
* Unit tests for {@link GistRevision}
*/
@SuppressWarnings("restriction")

/**
* Unit tests for {@link GistService}
*/
@SuppressWarnings("restriction")

/**
* Unit tests for {@link Gist}
*/
@SuppressWarnings("restriction")

/**
* Unit tests for {@link IssueService}
*/
@SuppressWarnings("restriction")

/**
* Unit tests for {@link Issue}
*/
@SuppressWarnings("restriction")

/**
* Unit tests for {@link LabelService}.
*/
@SuppressWarnings("restriction")

/**
* Unit tests for {@link MilestoneService}
*/
@SuppressWarnings("restriction")

/**
* Unit tests for {@link Milestone}
*/
@SuppressWarnings("restriction")

/**
* Tests for {@link PullRequestServiceTest}
*/
@SuppressWarnings("restriction")

/**
* @author Kevin Sawicki (kevin@github.com)
*/
public class GistTest extends LiveTest {

/**
* 
*/
public class IssueTest extends LiveTest {

/**
* Base live test class.
*/
public abstract class LiveTest extends TestCase {

/**
* All tests against a live GitHub instance.
*/
@RunWith(Suite.class)

/**
* Live pull request tests
*/
public class PullRequestTest extends LiveTest {

/**
* Live repository test
*/
public class RepositoryTest extends LiveTest {

/**
* GitHub exception that wraps and formats a {@link RequestException}
*/
public class GitHubException extends IOException {

/**
* 
*/
public abstract class Assert {

/**
* GitHub issue comment class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/
public class Comment {

/**
* Field error
*/
public class FieldError {

/**
* GitHub gist class.
*/
public class Gist {

/**
* Gist change status class.
*/
public class GistChangeStatus {

/**
* Gist file class.
*/
public class GistFile {

/**
* Gist revision class.
*/
public class GistRevision {

/**
* Interface for accepting collections of resources page by page.
* 
* @param <V>
*/
public interface IResourceCollector<V> {

/**
* Interface for container classes that can provide a collection of resources of
* the same type.
* 
* @param <V>
*/
public interface IResourceProvider<V> {

/**
* Id class.
*/
public class Id {

/**
* GitHub issue class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/
public class Issue {

/**
* GitHub issue label class.
*/
public class Label {

/**
* {@link LinkedList} based resource collector
* 
* @param <V>
*/
public class ListResourceCollector<V> implements IResourceCollector<V> {

/**
* GitHub issue milestone class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/
public class Milestone {

/**
* Pull request model class.
*/
public class PullRequest {

/**
* Pull request discussion model class.
*/
public class PullRequestDiscussion {

/**
* Pull request marker model class.
*/
public class PullRequestMarker {

/**
* GitHub Repository class.
*/
public class Repository {

/**
* GitHub request error class
* 
* @author Kevin Sawicki (kevin@github.com)
*/
public class RequestError {

/**
* GitHub user class.
*
* @author Kevin Sawicki (kevin@github.com)
*/
public class User {

/**
* Formatter for date formats present in the GitHub v2 and v3 API.
*/
public class DateFormatter implements JsonDeserializer<Date> {

/**
* Client class for interacting with GitHub HTTP/JSON API.
*/
public class GitHubClient {

/**
* GitHub API request class.
*/
public class GitHubRequest {

/**
* GitHub API response class.
*/
public class GitHubResponse {

/**
* GitHub constants
*/
public interface IGitHubConstants {

/**
* Page link class to be used to determine the links to other pages of request
* responses encoded in the current response. These will be present if the
* result set size exceeds the per page limit.
*/
public class PageLinks {

/**
* Pages request class that contains a collector for accept resources page by
* page.
* 
* @param <V>
*/
public class PagedRequest<V> extends GitHubRequest {

/**
* Request exception class that wraps an {@link RequestError} object.
* 
* @author Kevin Sawicki (kevin@github.com)
*/
public class RequestException extends IOException {

/**
* Service class for getting and list gists.
*/
public class GistService extends GitHubService {

/**
* Base GitHub service class.
*/
public abstract class GitHubService {

/**
* Issue service class for listing, searching, and fetching {@link Issue}
* objects using a {@link GitHubClient}.
* 
* @author Kevin Sawicki (kevin@github.com)
*/
public class IssueService extends GitHubService {

/**
* Label service class for listing {@link Label} objects in use for a given user
* and repository.
*/
public class LabelService extends GitHubService {

/**
* Milestone service class for listing the {@link Milestone} objects in use by a
* repository and user accessed via a {@link GitHubClient}.
*/
public class MilestoneService extends GitHubService {

/**
* Service class getting and listing pull requests.
*/
public class PullRequestService extends GitHubService {

/**
* Repository service class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/
public class RepositoryService extends GitHubService {

/**
* Label comparator using case-insensitive name comparisons.
*/
public class LabelComparator implements Comparator<Label>, Serializable {

/**
* Operation that deletes a tag
*/
public class DeleteTagOperation implements IEGitOperation {

/**
* Command to delete a tag
*/
public class DeleteTagCommand extends RepositoriesViewCommandHandler<TagNode> {

/**
* Tests of displaying a list of gauges
*/
public class GaugeListTest extends

/**
* View holder for a search repository displayed in a list
*/
public class SearchRepoViewHolder implements ViewHolder<SearchRepository> {

/**
* Create search repository view holder
*
* @param view
*/
public SearchRepoViewHolder(final View view) {35a36,38

/**
* GitHub issue task data handler
*/
38,41c41,42

/**
* Activity display a collection of issues in a pager
*/
public class IssuesViewActivity extends DialogFragmentActivity implements OnPageChangeListener {

/**
* Create an intent to show a single issue
*
* @param issue
* @return intent
*/
public static Intent createIntent(Issue issue) {

/**
* Create an intent to show issues with an initial selected issue
*
* @param issues
* @param repository
* @param position
* @return intent
*/
public static Intent createIntent(Collection<? extends Issue> issues, Repository repository, int position) {

/**
* Create an intent to show issues with an initial selected issue
*
* @param issues
* @param position
* @return intent
*/
public static Intent createIntent(Collection<? extends Issue> issues, int position) {public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
// Intentionally left blank
}public void onPageScrollStateChanged(int state) {
// Intentionally left blank
}

/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about sobmodule</a>
*/
public class SubmoduleStatusCommand extends

/**
* Viewer to display one or more file differences using standard editor colors
* and fonts preferences.
*
* @author Kevin Sawicki (kevin@github.com)
*/
public class DiffViewer extends SourceViewer {

/**
* Tests of {@link ItemListAdapter}
*/
public class ItemListAdapterTest extends AndroidTestCase {

/**
* Verify view is reused
*/
public void testReuseView() {

/**
* Generator of author information for lines based on when they were introduced
* into a file.
*/
public class BlameGenerator {

/**
* Line class that spans one or more continuous revisions.
*/
public class Line {

/**
* Blame command for building a {@link Line} list for a file path.
*/
public class BlameCommand extends GitCommand<List<Line>> {

/**
* Unit tests of {@link BlameCommand}
*/
public class BlameCommandTest extends RepositoryTestCase {

/**
* Editor page class to display commit notes.
*/
public class NotesEditorPage extends FormPage {

/**
* Repository commit note class.
*/
public class RepositoryCommitNote extends PlatformObject implements

/**
* Note details page that display the text content of a note in a
* {@link StyledText} widget.
*/
public class NoteDetailsPage implements IDetailsPage, IDetailsPageProvider {

/**
* Notes master details block class.
*/
public class NotesBlock extends MasterDetailsBlock {

/**
* Tests of the news text rendering
*/
public class NewsEventTextTest extends AndroidTestCase {

/**
* Custom Guice-scope that makes an authenticated GitHub account available,
* by enforcing that the user is logged in before proceeding.
*/
public class AccountScope extends ScopeBase {

/**
* Enters scope once we've ensured the user has a valid account.
*/
public void enterWith(Activity activityUsedToStartLoginProcess) {

/**
* Enters scope using a GitHubAccount derived from the supplied account
*/
public void enterWith(Account account, AccountManager accountManager) {

/**
* @return name
*/


/**
* @return content
*/


/**
* @return wrap
*/


/**
* Set whether lines should wrap
*
* @param wrap
* @return this editor
*/


/**
* Bind {@link Object#toString()} to given {@link WebView}
*
* @param name
* @param provider
* @return this editor
*/


/**
* Toggle line wrap
*
* @return this editor
*/
27a31,45

/**
* Preference to wrap lines of code
*/


/**
* Get code browsing preferences
*
* @param context
* @return preferences
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Command class to delete a stashed commit reference
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Utility for writing reflog entries
*/


/**
* Utilities for writing multiple HTTP requests
*/
//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//


/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/


/**
* Get default display width
*
* @param context
* @return display
*/


/**
* Get default display width
*
* @param view
* @return display
*/


/**
* Unit tests of {@link RepositoryCommit}
*/


/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class computes and provides access to the {@link FileDiff} objects
* introduced by the commit.
*/
105a106,140

/**
* Pin image drawn at a hit's location
*/


/**
* Create pin image to draw for hit
*
* @param x
* @param y
* @param pin
*/


/**
* Draw pin on canvas
*
* @param canvas
*/


/**
* Gist task data handler class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Service class for getting and list gists.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* GitHub gist class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Gist file class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link RequestError} class
*/

// in the intent but not currently present in the store


/**
* Annotate command for building a {@link RevisionContainer} for a file path.
*/


/**
* Line class that spans one or more revisions.
*/


/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
*/


/**
* Class containing all the lines present at a file revision.
*/


/**
* Class to assemble the history of every line in every revision of a file.
*/


/**
* Container class for the line history of all revisions of a file.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link LineHistoryCommand}
*/


/**
* Status class containing the type, path, and commit id of the submodule.
*/


/**
* Enumeration of different statuses that a submodule can be in
*/


/**
* Walker that visits all submodule entries found in a tree
*/


/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule sync command.
* 
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
* 
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/


/**
* Unit tests of {@link SubmoduleInitCommand}
*/


/**
* Unit tests of {@link SubmoduleStatusCommand}
*/


/**
* Unit tests of {@link SubmoduleSyncCommand}
*/


/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/


/**
* Unit tests of {@link SubmoduleWalk}
*/


/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/


/**
* Command to update selected submodules
*/


/**
* Operation that updates a repository's submodules
*/


/**
* Unit tests of {@link StashListCommand}
*/


/**
* Command class to list the stashed commits in a repository.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Repository container class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Repository branch model class
*/


/**
* Repository tag model class
*/


/**
* Unit tests of {@link RepositoryTag}
*/


/**
* Unit tests of {@link RepositoryBranch}
*/
39a41,46

/**
* Create intent to view issue
*
* @param issue
* @return intent
*/


/**
* NLS for Mylyn GitHub Core
*/


/**
* GitHub pull request attributes
*/


/**
* Pull request composite that includes commits
*/


/**
* GitHub pull request connector.
*/


/**
* Enumeration of task operations
*/


/**
* GitHub issue task data handler
*/


/**
* Pull request utilities
*/


/**
* Import repositories wizard class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Base HTTP-based task repository settings page
*/


/**
* Checkout pull request handler
*/


/**
* Task editor section to view commits attached to a pull request
*/


/**
* Handler class that fetches changes from a selected pull request
*/


/**
* NLS
*/


/**
* Pull request adapter
*/


/**
* Pull request commit adapter
*/


/**
* Pull request connector UI
*/


/**
* Adds the files from a pull request's commits to the context when it is
* activated.
*/


/**
* GitHub pull request repository query page class.
*/


/**
* Pull request task repository settings page.
*/


/**
* Editor page for GitHub pull requests.
*/


/**
* Pull request task editor page factory class.
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Implements "Open in Editor"
*/


/**
* List adapter to render Gist comments
*/


/**
* Create adapter for files
*
* @param activity
* @param comments
*/


/**
* Interface for container classes that can provide a collection of resources of
* the same type.
* 
* @param <V>
*/


/**
* Base GitHub service class.
*/


/**
* Commit model with comments
*/


/**
* Create commit with comments
*
* @param commit
* @param comments
*/


/**
* Create empty full commit
*/


/**
* @return commit
*/


/**
84c95,106

* Add non-selectable footer view with no data
*
* @see #addFooter(View, Object, boolean)
* @param view
* @return this adapter
*/
122a123,133

/**
* Get view for position
*
* @see #getView(int, View, ViewGroup)
* @param position
* @return view
*/


/**
* Unit tests of {@link UserComparator}
*/


/**
* Test sorting of users that match login
*/


/**
* Test sorting of users that don't match login
*/


/**
* Task to create an {@link Issue}
*/


/**
* Create task to create an {@link Issue}
*
* @param activity
* @param repository
* @param issue
*/


/**
* Create issue
*
* @return this task
*/


/**
* Activity for browsing a list of issues
*/


/**
* View holder for an issue in a repository
*/


/**
* Factory for creating view holder
*/


/**
* Create view holder
*
* @param v
*/


/**
* Commit search results page class.
*/


/**
* Commit search results label provider class.
*/


/**
* Unit tests of {@link GitException}
*/

// Replace div with e-mail content with block quote


/**
* Avatar utilities
*/


/**
* Create avatar helper
*
* @param context
*/


/**
* Create bitmap from raw image and set to view
*
* @param image
* @param view
* @param user
* @return this helper
*/


/**
* Get image for user
*
* @param user
* @return image
*/


/**
* Decode file to bitmap
*
* @param file
* @return bitmap
*/


/**
* Fetch avatar from URL
*
* @param url
* @param userId
* @return bitmap
*/
} catch (IOException e) {
// Ignored


/**
* Sets the logo on the {@link ActionBar} to the user's avatar.
*
* @param actionBar
* @param user
* @return this helper
*/


/**
* Bind view to image at URL
*
* @param view
* @param user
* @return this helper
*/
36a37,41

/**
* The maximum numbers of hits to retain
*/


/**
* Fragment to display list of recent traffic
*/


/**
* View holder for a {@link PageContent} item
*/


/**
* Fragment to display a list of {@link Referrer} instances
*/


/**
* Fragment to load page content information for a {@link Gauge}
*/


/**
* View holder for a traffic entry
*/


/**
* Activity to view a specific {@link Gauge}
*/


/**
* View holder for a {@link Referrer}
*/


/**
* Content entry for a {@link Gauge}
*/


/**
* Container for all {@link Gauge} contents
*/


/**
* Collection of {@link Gauge} referrers
*/


/**
* Referrer to a page on a {@link Gauge}
*/


/**
* GitHub account model
*/


/**
* Account username
*/


/**
* Account password
*/


/**
* Create account with username and password
*
* @param username
* @param password
*/


/**
* Sorts users and orgs in alphabetical order with special handling to put currently authenticated user first.
*/


/**
* Create comparator for given account
*
* @param account
*/


/**
* Request malformed resource
*
* @throws Exception
*/


/**
148a154,158
* Handler for server requests
*/


/**
* Drawable of a bar graph of people and views over a 7-day period
*/


/**
* Milestone service class for listing the {@link Milestone} objects in use by a
* repository and user accessed via a {@link GitHubClient}.
* 
* @author Kevin Sawicki (kevin@github.com)
*/
return accounts[0]; // at some point, support more than one github
// account, ie vanilla and fi

// if (progressBar.isShowing()) {
// progressBar.dismiss();
// }

// alertDialog.setTitle("Error");
// alertDialog.setMessage(description);
// alertDialog.setButton("OK", new DialogInterface.OnClickListener() {
// public void onClick(DialogInterface dialog, int which) {
// return;
// }
// });
// alertDialog.show();

// usernameEdit.setText(mUsername);
// mMessage.setText(getMessage());

// if (!populated) {
// editText.setError(getString(R.string.blank_field_warning));
// }
// return populated;

// mMessage
// .setText(getText(R.string.login_activity_loginfail_text_both));

// mMessage
// .setText(getText(R.string.login_activity_loginfail_text_pwonly));

// getString(R.string.label);
// if (isEmpty(mUsername)) {
// // If no username, then we ask the user to log in using an
// // appropriate service.
// final CharSequence msg =
// getText(R.string.login_activity_newaccount_text);
// return msg;
// }
// if (isEmpty(mPassword)) {
// // We have an account but no password
// return getText(R.string.login_activity_loginfail_text_pwmissing);
// }

// Log.d(AccountAuthenticatorService.TAG, "addAccount " + accountType +
// " authTokenType=" + authTokenType);

// Prepare the loader. Either re-connect with an existing one,


/**
* Task to load and store and {@link Issue}
*/


/**
* Create task to refresh given issue
*
* @param context
* @param repositoryId
* @param issueNumber
*/


/**
* Create content list fragment
*/


/**
* Filter to track the commit(s) with the shortest author email address
*/


/**
* Base filter to track the commit(s) with the shorttest email address for a
* {@link PersonIdent} associated with each commit
*/


/**
* Base filter to track the commit(s) with the longest email address for a
* {@link PersonIdent} associated with each commit
*/


/**
* Filter to track the commit(s) with the longest committer email address
*/


/** serialVersionUID */


/**
* @return people
*/


/**
* @param people
* @return this summary
*/


/**
* @return views
*/


/**
* @param views
* @return this summary
*/


/**
* Base URL for all requests
*/


/**
* Authentication URL
*/


/**
* Gauges URL
*/


/**
* Embedded Gauges URL
*/


/**
* Clients URL
*/


/** serialVersionUID */


/**
* @return date
*/


/**
* @param date
* @return this summary
*/


/**
* Create view holder
*
* @param view
*/


/**
* Create async loader
*
* @param context
*/
if (isReset())
// An async query came in while the loader is stopped
protected void onStopLoading() {
// Attempt to cancel the current load task if possible.

// Ensure the loader is stopped


/**
* Create view holder
*
* @param view
*/


/**
* Create view holder
*
* @param view
* @param resources
*/


/**
* Create traffic view holder
*
* @param view
*/
private static void formatIncorrectStyles(final StringBuilder input) {
// em and strong tag styles are swapped on pre-4.0 so swap them back
// using alternate tags that don't exhibit the incorrect styling.
// http://code.google.com/p/android/issues/detail?id=3473


/**
* Unit tests of {@link CreateBranchPage}
*/


/**
* Filter to track the commit(s) with the shortest message
*/


/**
* Base filter that tracks commits that have a field with the same length
*/


/**
* Unit tests of {@link ShortestMessageFilter}
*/


/**
* Represents the "Submodules" node
*/


/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/


/**
* Page commits in blocks of 25 and print author and date
*/


/**
* Iterator for getting paged responses
* 
* @param <V>
*/


/**
* Exception class to be thrown when iterating over pages fails
*/
68a85,93

/**
* @param loadListener
* @return this fragment
*/
44a44,49

/**
* Create adapter for list of items
*
* @param items
* @return list adapter
*/


/**
* Create drawable bar graph for data and colors
*
* @param data
* @param colors
*/


/**
* Fragment to display a list of {@link Repository} instances
*/

// Only hard refresh if view already created and org is changing


/**
* Fragment to display a list of {@link Repository} instances
*/


/**
* @param query
* @return this fragment
*/


/**
* Suggestions provider for recently searched for repository queries
*/


/**
* Save query to history
*
* @param context
* @param query
*/


/**
* Clear query history
*
* @param context
*/


/**
* Create suggestions provider for searched for repository queries
*/


/**
* Activity to search repositories
*/


/**
* Used for creating projects out of .project files
*/


/**
* Issue service class for listing, searching, and fetching {@link Issue}
* objects using a {@link GitHubClient}.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link RepositoryManager}
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Repository manager descriptor
*/


/**
* Repository build manager
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Base commit browser
*
* @author Kevin Sawicki (kevin@github.com)
*/
if (host.getTabWidget().getTabCount() > 0) {
// Crash on Gingerbread if tab isn't set to zero since adding a
// new tab removes selection state on the old tab which will be
// null unless the current tab index is the same as the first
// tab index being added


/**
* Reference to a {@link Gauge}
*/
22a18,21

/**
* Gauge id
*/


/**
* Dashboard issue list fragment
*/


/**
* Filter data argument
*/
93a97,105

/**
* Was the body of the response served from the cache?
*
* @return true if served from the cache, false if served from the network
*/


/**
* Activity to create a comment on an {@link Issue}
*/


/**
* Create intent to create a comment
*
* @param repoId
* @param issueNumber
* @param user
* @return intent
*/


/**
* Activity to create a comment on a {@link Gist}
*/


/**
* Create intent to create a comment
*
* @param gist
* @return intent
*/
93a64,82

/**
* Create comment
*
* @param comment
*/


/**
* Finish this activity passing back the created comment
*
* @param comment
*/


/**
* 
*/


/**
* Team model class.
*/


/**
* Service class for working with organization teams
*/


/**
* Request to view a commit
*/


/**
* Base list adapter to display issues
*
* @param <I>
* @param <V>
*/


/**
* Number formatter
*/


/**
* Avatar loader
*/


/**
* View containing the issue number
*/


/**
* Width of widest issue number
*/


/**
* @param viewId
* @param inflater
* @param elements
* @param avatars
*/


/**
* Get number of issue
*
* @param issue
* @return issue number
*/


/**
* Update issue number displayed in given text view
*
* @param number
* @param state
* @param flags
* @param view
*/


/**
* Update comment count in given text view
*
* @param comments
* @param view
*/


/**
* Update reporter details in given text view
*
* @param reporter
* @param date
* @param view
*/


/**
* Update label views with values from given label models
*
* @param labels
* @param views
*/


/**
* Gist editor attachment part. Modeled after {@link TaskEditorAttachmentPart}
* but with less columns.
*/
119a120,153

/**
* Get existing authorization for this app
*
* @param service
* @param scopes
* @return token or null if none found
* @throws IOException
*/


/**
* Create authorization for this app
*
* @param service
* @param scopes
* @return created token
* @throws IOException
*/


/**
* PARAM_CONFIRMCREDENTIALS
*/


/**
* PARAM_PASSWORD
*/


/**
* PARAM_USERNAME
*/


/**
* PARAM_AUTHTOKEN_TYPE
*/


/**
* If set we are just checking that the user knows their credentials; this doesn't cause the user's password to be
* changed on the device.
*/


/**
* Was the original caller asking for an entirely new account?
*/


/**
* Handles onClick event on the Submit button. Sends username/password to the server for authentication.
* <p/>
* Specified by android:onClick="handleLogin" in the layout xml
*
* @param view
*/
String message;
// A 401 is returned as an IOException with this message


/**
* Called when response is received from the server for confirm credentials request. See onAuthenticationResult().
* Sets the AccountAuthenticatorResult which is sent back to the caller.
*
* @param result
*/


/**
* Called when response is received from the server for authentication request. See onAuthenticationResult(). Sets
* the AccountAuthenticatorResult which is sent back to the caller. Also sets the authToken in AccountManager for
* this account.
*/


/**
* Hide progress dialog
*/


/**
* Show progress dialog
*/


/**
* Called when the authentication process completes (see attemptLogin()).
*
* @param result
*/


/**
* Returns the message to be displayed at the top of the login dialog box.
*/


/**
* Represents the "Submodules" node
*/
for (int i = 0; i < dayCount; i++) {
// Reverse entry order since entries are in reverse chronological order but graph is drawn left to right


/**
* Line class that spans one or more revisions.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Class containing all the lines present at a file revision.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Class to assemble the history of every line in every revision of a file.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Container class for the line history of all revisions of a file.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Annotate command for building a {@link RevisionContainer} for a file path.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link LineHistoryCommand}
*
* @author Kevin Sawicki (kevin@github.com)
*/

// Add dummy objects for gists, issue dashboard, and bookmarks


/**
* Tree filter that counts entries visited of the configured type
*/


/**
* Filter that include commits based on number of differences introduced in each
* commit.
*/


/**
* Set the result that is to be sent as the result of the request that caused this Activity to be launched. If
* result is null or this method is never called then the request will be canceled.
*
* @param result
*            this is returned as the result of the AbstractAccountAuthenticator request
*/


/**
* Sends the result or a Constants.ERROR_CODE_CANCELED error if a result isn't present.
*/
if (accountAuthenticatorResponse != null) {
// send the result bundle back if set, otherwise send an error.


/**
* Styled label provider that wraps a {@link WorkbenchLabelProvider}
*/


/**
* Activity to view a file in a Gist
*/


/**
* Create intent to show file
*
* @param context
* @param gist
* @param file
* @return intent
*/


/**
82a90,152
* Get text view with given id
*
* @param childViewId
* @return text view
*/


/**
* Get image view with given id
*
* @param childViewId
* @return image view
*/


/**
* Get view with given id
*
* @param childViewId
* @return view
*/


/**
* Set text on text view with given id
*
* @param childViewId
* @param text
* @return text view
*/


/**
* Get child view
*
* @param childViewId
* @param childViewClass
* @return child view
*/


/**
* Set child view as gone or visible
*
* @param childViewId
* @param gone
* @return child view
*/


/**
146c216,227

protected void update(int position, View view, V item) {
this.view = view;
update(position, item);
}


/**
* Update item
*
* @param position
* @param item
*/
141a142,164

/**
* Create new resource from position at given JSON reader
*
* @param reader
* @return new resource
* @throws IOException
*/


/**
* Create new resource backed by given URL
*
* @param url
* @return new resource
* @throws IOException
* @throw IOException
*/


/**
* Unit tests of {@link HttpRequestUtils}
*/


/**
* Test secure requests
*/


/**
* Test insecure requests
*/
0a1,15
/*
* Copyright 2012 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/**
* Operation that deletes a tag
*/


/**
* Command to delete a tag
*/


/**
* List fragment that adds more elements when the bottom of the list is scrolled to
*
* @param <E>
*/


/**
* Resource pager
*/


/**
* Create pager that provides resources
*
* @return pager
*/


/**
* Get resource id of {@link String} to display when loading
*
* @return string resource id
*/
public void onScrollStateChanged(AbsListView view, int scrollState) {
// Intentionally left blank


/**
* Show more events while retaining the current pager state
*/


/**
* Gist task attribute enumeration.
*/


/**
* NLS for Mylyn GitHub Core
*/


/**
* Dashboard issue view holder
*/


/**
* Create dashboard issue view holder
*
* @param v
* @param maxNumberCount
*/


/**
* Task to unstar a song
*/


/**
* Task to star a song
*/


/**
* Base URL matcher with utilities for sub-classes to use
*/


/**
* Is given input URL a match?
* <p>
* This method ignores null and empty URLs and does not reset the matcher with them
*
* @param url
* @param matcher
* @return true if matcher matches, false otherwise
*/


/**
* Matcher for gist URLS that provides the Gist id matched
* <p>
* This class is not thread-safe
*/


/**
* Get Gist id from URL
*
* @param url
* @return gist id or null if the given URL is not to a Gist
*/


/**
* Unit tests of {@link GistUrlMatcher}
*/


/**
* Verify issue URL matching provides accurate Gist ids
*/


/**
* Verify issue URL matching provides accurate Gist ids
*/


/**
* Checkout commit handler
*/


/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/


/**
* Base operation that supports adding pre/post tasks
*/


/**
* Unit tests of {@link BranchProjectTracker}
*/


/**
* Search unit test suite
*/


/**
* Gist revision class.
*/


/**
* Gist change status class.
*/

// Support opening this activity with a single Gist that may be present in the intent but not currently present
// in the store


/**
* A <code>DecorationOverlayIcon</code> is an image descriptor that can be used
* to overlay decoration images on to the 4 corner quadrants of a base image
* descriptor. The four quadrants are {@link IDecoration#TOP_LEFT},
* {@link IDecoration#TOP_RIGHT}, {@link IDecoration#BOTTOM_LEFT} and
* {@link IDecoration#BOTTOM_RIGHT}. Additionally, the overlay can be used to
* provide an underlay corresponding to {@link IDecoration#UNDERLAY}.
*
* This class is modeled after {@link DecorationOverlayIcon} but supports using
* a base image descriptor instead of a base image.
*/


/**
* Commit search results page class.
*/


/**
* Commit search results label provider class.
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Command class to stash changes in the working directory and index.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/
38a41,50

/**
* Create intent to browse a repository's issues
*
* @param repository
* @return intent
*/
8a15,17

/**
* Helper for creating intents
*/


/**
* Prefix for all intents created
*/
19a25,75

/**
* Prefix for all extra data added to intents
*/


/**
* Repository handle
*/


/**
* Repository name
*/


/**
* Repository owner
*/


/**
* Issue number
*/


/**
* Gist id
*/


/**
* Gist handle
*/


/**
* Gist file handle
*/


/**
* User handle
*/


/**
* Resolve the {@link RepositoryId} referenced by the given intent
*
* @param intent
* @return repository id
*/
25a82,84

/**
* Builder for generating an intent configured with extra data such as an issue, repository, or gist
*/
29a89,93

/**
* Create builder with suffix
*
* @param actionSuffix
*/
33a98,103

/**
* Add repository id to intent being built up
*
* @param repositoryId
* @return this builder
*/
37a109,124

/**
* Add repository to intent being built up
*
* @param repository
* @return this builder
*/


/**
* Add issue to intent being built up
*
* @param issue
* @return this builder
*/
41a129,175

/**
* Add gist to intent being built up
*
* @param gist
* @return this builder
*/


/**
* Add gist id to intent being built up
*
* @param gist
* @return this builder
*/


/**
* Add gist file to intent being built up
*
* @param file
* @return this builder
*/


/**
* Add user to intent being built up
*
* @param user
* @return this builder;
*/


/**
* Add extra field data value to intent being built up
*
* @param fieldName
* @param value
* @return this builder
*/


/**
* Add extra field data value to intent being built up
*
* @param fieldName
* @param value
* @return this builder
*/
51a193,209

/**
* Add extra field data value to intent being built up
*
* @param fieldName
* @param value
* @return this builder
*/


/**
* Get built intent
*
* @return intent
*/


/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule update command.
* 
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* Generator that visits all submodule entries found in the index tree
*/


/**
* Status class containing the type, path, and commit id of the submodule.
*/


/**
* Enumeration of different statuses that a submodule can be in
*/


/**
* Transport protocol contributed via service provider
*/


/**
* Operation that deletes a tag
*/


/**
* Command to delete a tag
*/


/**
* Operation to revert a commit
*/
61a62,75

/**
* Set typeface with name on given text views
*
* @param name
* @param views
*/


/**
* Class that represents a single commit in a Git repository.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Class that represents a file affected by a commit
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Filter that builds a list of {@link CommitFile} from {@link DiffEntry}
* objects
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Test case that supports creating a Git repository
*/


/**
* Unit tests of classes used to build a changelog
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Base filter to track the commit(s) with the shortest name for a
* {@link PersonIdent} associated with each commit
*/


/**
* Base filter to track the commit(s) with the longest name for a
* {@link PersonIdent} associated with each commit
*/


/**
* Filter to track the commit(s) with the shortest committer name
*/


/**
* Filter to track the commit(s) with the longest committer name
*/


/**
* Arguments key for the selected items when showing a multi choice dialog
*/


/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param choices
* @param selectedChoices
*/


/**
* Activity to create a comment
*/


/**
* Create intent to create a comment
*
* @return intent
*/


/**
* Unit tests of {@link BranchProjectTracker}
*/


/**
* Search unit test suite
*/


/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/


/**
* Base operation that supports adding pre/post tasks
*/


/**
* Commit editor page class displaying author, committer, parent commits,
* message, and file information in form sections.
*/

// Skip certificate validation on Froyo or below


/**
* @return starred
*/


/**
* Unit tests of author filters
*/


/**
* Get intent extra
*
* @param name
* @return serializable
*/


/**
* Get intent extra
*
* @param name
* @return int
*/


/**
* Get intent extra
*
* @param name
* @return string
*/


/**
* Unit tests of {@link StashListCommand}
*/


/**
* Command class to list the stashed commits in a repository.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Repository selection wizard page.
*/


/**
* Operation to add a submodule to a repository
*/


/**
* Operation that updates a repository's submodules
*/


/**
* Operation that syncs a repository's submodule configurations
*/


/**
* Wizard to configure a new submodule
*/


/**
* Wizard page to configure the path of a submodule
*/


/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/


/**
* Command to sync submodule configuration
*/


/**
* Command to update selected submodules
*/


/**
* Command to add a new submodule to a repository
*/


/**
* Unit tests for resolving reflog-based revisions
*/


/**
* Test case utilities
*/


/**
* Activity to view all the songs by an artist and be able to add them to the
* queue
*/


/**
* Activity to view all the songs on an album and be able to add them to the
* queue
*/


/**
* Base activity to display a list of songs and optionally queue them
*/


/**
* Command class to list the stashed commits in a repository.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Unit tests of {@link StashListCommand}
*/


/**
* Unit tests of {@link BlameCommand}
*/


/**
* Generator of author information for lines based on when they were introduced
* into a file.
*/


/**
* Line class that spans one or more continuous revisions.
*/


/**
* Blame command for building a {@link Line} list for a file path.
*/


/**
* Base handler with helpers for working with selections
*/


/**
* Handler to cherry pick the commit onto the current branch
*/


/**
* Utilities for working with objects that implement {@link IAdaptable}
*/


/**
* Commit proposal processor
*/


/**
* 
*/


/**
* Unit tests of {@link DataService}
*/


/**
* Model class for resources identified bya SHA-1
*/


/**
* Resource that has type and URL fields
*/


/**
* Blob model class
*/


/**
* Tag model class
*/


/**
* Reference model class
*/


/**
* Tree entry model class
*/


/**
* Date service class for low-level access to Git repository data.
*/


/**
* Replace with HEAD revision action handler
*/


/**
* Replace with Commit action
*/


/**
* Replace with commit action handler
*/


/**
* Replace with ref action handler
*/


/**
* Replace with HEAD revision action
*/


/**
* Replace with reference action
*/


/**
* GitHub user class.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* GitHub request error class
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Request exception class that wraps an {@link RequestError} object.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Base GitHub service class.
*/


/**
* Command to add a new submodule to a repository
*/


/**
* Wizard to configure a new submodule
*/


/**
* Wizard page to configure the path of a submodule
*/


/**
* Operation to add a submodule to a repository
*/


/**
* Implements "Open in Editor"
*/


/**
* Create content list fragment
*/


/**
* 
*/


/**
* Organization service class
*/

/*  Copyright (C) 2011 Emory Myers
* 
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*  
*  	http://www.apache.org/licenses/LICENSE-2.0
*  
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License. 
*/

/*  Copyright (C) 2011 Emory Myers
* 
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*  
*  	http://www.apache.org/licenses/LICENSE-2.0
*  
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License. 
*/

/*	Copyright (C) 2011 Emory Myers 
* 
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*  
*  	http://www.apache.org/licenses/LICENSE-2.0
*  
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License. 
*/

/*
* 09/02/2011 - Emory Myers - 	added the isConnected method
*/

/*
* 09/02/2011 - Emory Myers - 	printing stacktraces for debugging purposes
* 								added some logging
* 								implemented isConnected method
* 								modified send method
*/
		// TODO see 4.1. step 41
//		else if (!headers.get("Sec-WebSocket-Location").equals(url.toASCIIString())) {
//			System.out.println("location: " + url.toASCIIString());
//		}
//		else if protocol

/*
* 09/02/2011 - Emory Myers - 	printing stacktrace on IO exception
*/


/**
* Viewer to display one or more file differences using standard editor colors
* and fonts preferences.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* OAuth2 authorization scheme. Sets an authorization header with a value of the
* space-separated user principal name and password from credentials.
*/


/**
* Commit filter that wraps a tree filter that includes commits that the tree
* filter includes for at least one path based on a tree walk of the current
* commit's tree and all the current commit's parent trees.
*/


/**
* Operation that deletes a tag
*/


/**
* Command to delete a tag
*/


/**
* Drag assistant for {@link FileNode} selections in the repositories view
*/


/**
* Unit tests of {@link CommitCommand}
*/


/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/


/**
* Unit tests of {@link SubmoduleGenerator}
*/


/**
* Unit tests of {@link SubmoduleInitCommand}
*/


/**
* Unit tests of {@link SubmoduleStatusCommand}
*/


/**
* Unit tests of {@link SubmoduleSyncCommand}
*/


/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/


/**
* Generator that visits all submodule entries found in the index tree
*/


/**
* Status class containing the type, path, and commit id of the submodule.
*/


/**
* Enumeration of different statuses that a submodule can be in
*/


/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* Pager over users
*/


/**
* Fragment to display a list of users being followed
*/


/**
* Fragment to display the users being followed by the default user
*/


/**
* Fragment to display the users being followed by a specific user
*/


/**
* Fragment to page over users
*/


/**
* Avatar loader
*/


/**
* User service
*/


/**
* Loader for templates
*/


/**
* Unit tests of {@link Commit} class
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Git repository helper for use by test cases
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Base extension of {@link HudsonTestCase}
* 
* @author Kevin Sawicki (kevin@github.com)
*/
} catch (IOException ignored) {
// Ignored


/**
* Unit tests of {@link RepositoryUtils}
*/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

******************************************************************************/


/******************************************************************************
7c7

******************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/******************************************************************************
7c7

*****************************************************************************/


/**
* Create referrer list fragment
*/

// Bypass any rev walks if only one branch or less


/**
* Diff style range formatter class. This class builds up a list of
* {@link DiffStyleRange} instances as a {@link FileDiff} is being written to an
* {@link IDocument}.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link EventRepository}
*/


/**
* Model class for repository information contained in an {@link Event}
*/


/**
* Diff style range formatter class that builds up a list of
* {@link DiffStyleRange} instances as each {@link FileDiff} is being written to
* an {@link IDocument}.
*/


/**
* Unit tests for {@link DiffStyleRangeFormatter}
*/


/**
* Bind blob content to current {@link WebView}
*
* @param name
* @param blob
* @return this editor
*/


/**
* Opens a {@link RevCommit} in the commit editor
*/


/**
* Unit tests of {@link ContentsService}
*/


/**
* Unit tests of {@link RepositoryContents}
*/


/**
* Contents of a path in a repository
*/


/**
* Service for accessing repository contents
*
* @see <a href="http://developer.github.com/v3/repos/contents">GitHub contents
*      API documentation</a>
*/


/**
* Commit proposal processor
*/


/**
* Activity to share a text selection as a public or private Gist
*/


/**
* Unit tests of {@link IssueStore}
*/


/**
* Verify issue is updated when re-added
*/


/**
* Generic weak store of ids to items
*
*/


/**
* Create item reference
*
* @param item
* @param id
* @param queue
*/


/**
* Generic reference store
*
* @param <V>
*/


/**
* Create reference store
*/


/**
* Get item with id from store
*
* @param id
* @return item
*/


/**
* Insert item with id into store
*
* @param id
* @param item
*/


/**
* Fragment to display a list of public Gists
*/


/**
* Create Gist request code
*/


/**
* View Gist request code
*/
32a58,60

/**
* Gist service
*/


/**
* Fragment to display a list of Gists
*/


/**
* Fragment to display a list of Gists
*/


/**
* Pager adapter for different Gist queries
*/


/**
* Create pager adapter
*
* @param resources
* @param fragmentManager
*/


/**
* Store of Gists
*/


/**
* Create gist store
*
* @param service
*/


/**
* Get gist
*
* @param id
* @return gist or null if not in store
*/


/**
* Add gist to store
*
* @param gist
* @return gist
*/


/**
* Refresh gist
*
* @param id
* @return refreshed gist
* @throws IOException
*/


/**
* Edit gist
*
* @param gist
* @return edited gist
* @throws IOException
*/


/**
* Utilities for working {@link IRepositoryQuery} objects.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Helper to display an HTML block in a {@link WebView}
*/


/**
* Create viewer
*
* @param view
*/


/**
* Set HTML to display
*
* @param html
* @return this viewer
*/


/**
* @return html
*/


/**
* @return view
*/


/**
* Update height
*
* @param height
*/


/**
* GitHub issue task editor attribute part that display labels and milestone
* attribute editors.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Corrector used to adjust Y position
*/


/**
* Class to track all renames encountered during a {@link RevWalk}
*/


/**
* Unit tests of committer filters
*/


/** serialVersionUID */


/**
* @return views
*/


/**
* @param views
* @return this content
*/


/**
* @return path
*/


/**
* @param path
* @return this content
*/


/**
* @return title
*/


/**
* @param title
* @return this content
*/


/**
* @return url
*/


/**
* @param url
* @return this content
*/


/** serialVersionUID */


/**
* @param recentDays
* @return this gauge
*/


/**
* @return recentDays
*/


/**
* @return today
*/


/**
* @param today
* @return this gauge
*/


/**
* @return id
*/


/**
* @param id
*/


/**
* @return title
*/


/**
* @param title
* @return this gauge
*/


/** serialVersionUID */


/**
* @return views
*/


/**
* @param views
* @return this referrer
*/


/**
* @return host
*/


/**
* @param host
* @return this referrer
*/


/**
* @return path
*/


/**
* @param path
* @return this referrer
*/


/**
* @return url
*/


/**
* @param url
* @return this referrer
*/
authToken = null;
// Authenticator failed to respond
authToken = null;
// User canceled operation
authToken = null;
// Possible network issues


/**
* GitHub constants.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link StashListCommand}
*/


/**
* Command class to list the stashed commits in a repository.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Date formatter for multiple date formats present in the GitHub v2 API.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* GitHub issue comment class.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* GitHub issue comments wrapper class.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Adapter for a list of searched for repositories
*/


/**
* Create list adapter for searched for repositories
*
* @param inflater
* @param elements
*/


/**
*
* Create list adapter for searched for repositories
*
* @param inflater
*/


/**
* Activity to search repositories
*/


/**
* Item view for a repository
*/


/**
* Repository type icon
*/


/**
* Repository name text
*/


/**
* Repository description text
*/


/**
* Recently view label
*/


/**
* @param view
*/


/**
* Fragment to display a list of {@link Repository} instances
*/
this.org.set(org);
// Only hard refresh if view already created and org is changing


/**
* Helper for obtaining the recently viewed repositories for under a given user or organization
*/


/**
* The maximum number of recent repos to store - this is the total across all different orgs.
*/


/**
* Create helper scoped to given user
*
* @param context
*/


/**
* Add repository to recent list
*
* @param repo
* @return this helper
*/


/**
* Add id to recent list
*
* @param repoId
* @return this helper
*/


/**
* Persist recent list
*
* @return this helper
*/


/**
* Is the given repository id contained in the recent list?
*
* @param repoId
* @return true if recent, false otherwise
*/


/**
* Find recently viewed repos amongst the list of supplied repos. The most recently viewed repos will head the
* resulting list, ordered by recency, followed by the other repos in the supplied list.
*
* @param fullRepoList the full set of repos that will be displayed
* @param numberOfTopRecentReposToShow the max num repos to show as 'recent' - prioritising the <em>most</em> recent
* @return value-object with the full sorted list of repos (headed by recents), plus the ids of the recent repos
*/


/**
* Value-object holding a sorted list of repos and the ids of the most recently-view repos.
*/


/**
* Adapter for a list of repositories
*/


/**
* Create list adapter for repositories
*
* @param inflater
* @param elements
* @param account
* @param recent
*/


/**
* Create list adapter for repositories
*
* @param inflater
* @param account
* @param recent
*/


/**
* Suggestions provider for recently searched for repository queries
*/


/**
* Save query to history
*
* @param context
* @param query
*/


/**
* Clear query history
*
* @param context
*/


/**
* Create suggestions provider for searched for repository queries
*/


/**
* Fragment to display a list of {@link Repository} instances
*/


/**
* @param query
* @return this fragment
*/


/**
* Activity to edit the title and description for an issue
*/


/**
* Create intent to edit an issue
*
* @param issue
* @return intent
*/


/**
* Pager adapter for the issues dashboard
*/


/**
* Create pager adapter
*
* @param resources
* @param fragmentManager
*/


/**
* Activity for browsing a list of issues scoped to a single {@link IssueFilter}
*/


/**
* Create intent to browse a repository's issues
*
* @param repository
* @return intent
*/


/**
* Create intent to browse the filtered issues
*
* @param filter
* @return intent
*/


/**
* Fragment to display a list of issues
*/


/**
* Activity to create a new issue
*/


/**
* Create intent to create an issue in the given {@link Repository}
*
* @param repo
* @return intent
*/


/**
* Custom drawable for labels applied to an issue
*/


/**
* Create drawable for labels
*
* @param paddingLeft
* @param textSize
* @param maxWidth
* @param labels
*/


/**
* Activity to create a persistent issues filter for a repository
*/


/**
* Create intent for creating an issue filter for the given repository
*
* @param repo
* @param filter
* @return intent
*/


/**
* Dashboard activity for issues
*/


/**
* Async task to delete a Gist
*/


/**
* Create task
*
* @param context
* @param gistId
*/


/**
* Execute the task with a progress dialog displaying.
* <p>
* This method must be called from the main thread.
*/


/**
* Fragment to display the content of a file in a Gist
*/


/**
* Activity to page through the content of all the files in a Gist
*/


/**
* Create intent to show files with an initial selected file
*
* @param gist
* @param position
* @return intent
*/


/**
* Task to open a random Gist
*/


/**
* Create task
*
* @param context
*/


/**
* Execute the task with a progress dialog displaying.
* <p>
* This method must be called from the main thread.
*/

// Make at least two tries since page numbers are volatile


/**
* Activity to display an existing Gist
*/


/**
* Task to load and open a Gist with an id
*/


/**
* Create task
*
* @param context
* @param gistId
*/


/**
* Execute the task with a progress dialog displaying.
* <p>
* This method must be called from the main thread.
*/


/**
* Pager adapter for different Gist queries
*/


/**
* Create pager adapter
*
* @param resources
* @param fragmentManager
*/


/**
* Adapter to page through an array of Gists
*/


/**
* @param fm
* @param gistIds
*/


/**
* Activity to display a collection of Gists in a pager
*/


/**
* Create an intent to show a single gist
*
* @param gist
* @return intent
*/


/**
* Create an intent to show gists with an initial selected Gist
*
* @param gists
* @param position
* @return intent
*/

// Support opening this activity with a single Gist that may be present in the intent but not currently present
// in the store
public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
// Intentionally left blank
public void onPageScrollStateChanged(int state) {
// Intentionally left blank


/**
* Activity to share a text selection as a public or private Gist
*/


/**
* Activity to display view pagers of different Gist queries
*/


/**
* Pager adapter for all the files in a given gist
*/


/**
* @param fm
* @param gist
*/


/**
* Load of a {@link List} or {@link User} organizations
*/


/**
* Create organization loader
*
* @param activity
* @param accountDataManager
* @param userComparatorProvider
*/


/**
* Unit tests of {@link DataService}
*/


/**
* Model class for resources identified bya SHA-1
*/


/**
* Tree entry model class
*/


/**
* Blob model class
*/


/**
* Tag model class
*/


/**
* Reference model class
*/


/**
* Resource that has type and URL fields
*/


/**
* Date service class for low-level access to Git repository data.
*/


/**
* Toggles the "Display Latest Branch Commit" preference
*/


/**
* Date commit filter that includes commit until one if found that is older than
* the configured date.
*/


/**
* Committer date filter
*/


/**
* Author date filter
*/


/**
* 
*/


/**
* Set items to display
*
* @param items
*/


/**
* Generic resource pager for elements with an id that can be paged
*
* @param <E>
*/


/**
* Next page to request
*/


/**
* Number of pages to request
*/


/**
* All resources retrieved
*/


/**
* Are more pages available?
*/


/**
* Reset the number of the next page to be requested from {@link #next()} and clear all stored state
*
* @return this pager
*/


/**
* Clear all stored resources and have the next call to {@link #next()} load all previously loaded pages
*
* @return this pager
*/


/**
* Get number of resources loaded into this pager
*
* @return number of resources
*/


/**
* Get resources
*
* @return resources
*/


/**
* Get the next page of issues
*
* @return true if more pages
* @throws IOException
*/
}
// Set page to count value if first call after call to reset()


/**
* Are more pages available to request?
*
* @return true if the last call to {@link #next()} returned true, false otherwise
*/


/**
* Callback to register a fetched resource before it is stored in this pager
* <p>
* Sub-classes may override
*
* @param resource
* @return resource
*/


/**
* Get id for resource
*
* @param resource
* @return id
*/


/**
* Create iterator to return given page and size
*
* @param page
* @param size
* @return iterator
*/


/**
* Pager over Gists
*/


/**
* Create pager
*
* @param store
*/


/**
* Helper class for showing more and more pages of issues
*/


/**
* Store to add loaded issues to
*/


/**
* Create issue pager
*
* @param store
*/
60a63,68

/**
* Event service
*/


/**
* Fragment to display an organization's news
*/


/**
* Issue filter
*/


/** serialVersionUID */


/**
* Add label to filter
*
* @param label
* @return this filter
*/


/**
* @param labels
* @return this filter
*/


/**
* @return labels
*/


/**
* @param milestone
* @return this filter
*/


/**
* @return milestone
*/


/**
* Add state to filter
*
* @param state
* @return this filter
*/


/**
* @param states
* @return this filter
*/


/**
* @return states
*/


/**
* @param assignee
* @return this filter
*/


/**
* Does this filter contain the given state?
*
* @param state
* @return true if contains the state, false otherwise
*/


/**
* Remove state from filter
*
* @param state
* @return this filter
*/


/**
* @return assignee
*/


/**
* Commit search result class.
*/


/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
* 
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* Status class containing the type, path, and commit id of the submodule.
*/


/**
* Enumeration of different statuses that a submodule can be in
*/


/**
* Walker that visits all submodule entries found in a tree
*/


/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/


/**
* Unit tests of {@link SubmoduleInitCommand}
*/


/**
* Unit tests of {@link SubmoduleStatusCommand}
*/


/**
* Unit tests of {@link SubmoduleSyncCommand}
*/


/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/


/**
* Unit tests of {@link SubmoduleWalk}
*/


/**
* Editor class to view a commit in a form editor.
*/


/**
* Commit match class.
*/


/**
* Commit search dialog page class.
*/


/**
* Pattern constructor utilities to localize warnings from using internal
* {@link PatternConstructor} class.
*/


/**
* Repository match class.
*/


/**
* Open commit action
*/


/**
* Commit selection dialog
*/


/**
* Commit command handler
*/


/**
* Create branch handler
*/


/**
* Create tag handler
*/


/**
* Test caching uncompressed responses
*
* @throws Exception
*/
} catch (IOException ignore) {
// Ignored


/**
56a62,71
}


/**
* Set current view that is currently being updated
*
* @param view
*/


/**
* Handler to blame a path on a selected commit
*/


/**
* Task to refresh a repository
*/


/**
* Create task for context and id provider
*
* @param context
* @param repo
*/


/**
* Task to refresh a user
*/


/**
* Create task for context and login
*
* @param context
* @param login
*/


/**
* Avatar image class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Tests for {@link PullRequest}
*/
57a62,66

/**
* Result if the Gist was deleted
*/


/**
* Class to track all renames encountered during a {@link RevWalk}
*/


/**
* Repository container class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Commit search query class that runs a {@link RevWalk} for all
* {@link Repository} objects included in the {@link CommitSearchSettings} and
* matches all {@link RevCommit} objects against the search settings.
*/


/**
* Replace with HEAD revision action handler
*/


/**
* Replace with Commit action
*/


/**
* Replace with commit action handler
*/


/**
* Replace with ref action handler
*/


/**
* Replace with HEAD revision action
*/


/**
* Replace with reference action
*/


/**
* Compare with previous revision action handler.
*/


/**
* Compare with previous revision action.
*/
105a106,140

/**
* Pin image drawn at a hit's location
*/


/**
* Create pin image to draw for hit
*
* @param x
* @param y
* @param pin
*/


/**
* Draw pin on canvas
*
* @param canvas
*/


/**
* Source viewer to display one or more file differences using standard editor
* colors and fonts preferences.
*/


/**
* Create resource with Gson factory
*
* @param gson
*/


/**
* Fill this resource by opening a request to the URL and parsing the response
*
* @param url
* @return this resource
* @throws IOException
*/
} catch (IOException ignored) {
// Ignored


/**
* Verify data is sent when receiving response without first calling
* {@link HttpRequest#code()}
*
* @throws Exception
*/
} catch (IOException ignored) {
// Ignored


/**
* Repository utilities
*/


/**
* Filter that only includes commits that have at least one note attached
*/


/**
* Filter that looks up the notes associated with each commit visited and
* provides them {@link #include(RevCommit, Note, String)}
*/
14a14,16

/**
* Create account authenticator service
*/


/**
* Transport protocol contributed via service provider
*/


/**
* PARAM_CONFIRMCREDENTIALS
*/


/**
* PARAM_PASSWORD
*/


/**
* PARAM_USERNAME
*/


/**
* PARAM_AUTHTOKEN_TYPE
*/


/**
* If set we are just checking that the user knows their credentials; this doesn't cause the user's password to be
* changed on the device.
*/


/**
* Was the original caller asking for an entirely new account?
*/


/**
* Handles onClick event on the Submit button. Sends username/password to the server for authentication.
* <p/>
* Specified by android:onClick="handleLogin" in the layout xml
*
* @param view
*/
String message;
// A 401 is returned as an IOException with this message


/**
* Called when response is received from the server for confirm credentials request. See onAuthenticationResult().
* Sets the AccountAuthenticatorResult which is sent back to the caller.
*
* @param result
*/


/**
* Called when response is received from the server for authentication request. See onAuthenticationResult(). Sets
* the AccountAuthenticatorResult which is sent back to the caller. Also sets the authToken in AccountManager for
* this account.
*/


/**
* Hide progress dialog
*/


/**
* Show progress dialog
*/


/**
* Called when the authentication process completes (see attemptLogin()).
*
* @param result
*/


/**
* Returns the message to be displayed at the top of the login dialog box.
*/


/**
* An exception occurring when a file cannot be locked
*/


/**
* Public mirror repository icon
*/


/**
* Comparators that sort issue's by created at date
*/


/**
* Descending order
*/


/**
* Ascending order
*/


/**
* Create comparator in descending order
*/


/**
* Create comparator
*
* @param direction
*/
201a149,169

/**
* Set resource provider
*
* @param provider
* @return this view
*/


/**
* Class that maps pins and rings to a specific gauge to be used in the air traffic view
*/


/**
* Create resource provider
*
* @param resources
*/
public AirTrafficResourceProvider(final Resources resources) {
// Load all the pin images

// Load all the ring images


/**
* Set gauges to be styled
*
* @param gauges
* @return this provider
*/


/**
* Get key for gauge id
*
* @param gaugeId
* @return key, -1 if gauge id has no key
*/


/**
* Get pin to draw for key
*
* @param key
* @return pin bitmap
*/


/**
* Get pin to draw for gauge with given id
*
* @param gaugeId
* @return bitmap, may be null
*/


/**
* Get ring to draw for key
*
* @param key
* @return ring bitmap, may be null
*/


/**
* @return pinHeight
*/


/**
* @return pinWidth
*/


/**
* @return ringHeight
*/


/**
* @return ringWidth
*/
29a30,40

/**
* Process hit
*
* @param hit
*/


/**
* Constants for authenticating
*/


/**
* Account type id
*/


/**
* Account name
*/


/**
* Provider id
*/


/**
* Auth token type
*/


/**
* Show annotation action class.
*/


/**
* Show annotation action handler
*/


/**
* Base class for activity tests
*
* @param <T>
*/


/**
* @param activityClass
*/


/**
* Verify activity was created successfully
*/


/**
* Get edit text with id
*
* @param id
* @return edit text
*/


/**
* Get view with id
*
* @param id
* @return edit text
*/


/**
* Send focus to view
*
* @param view
* @throws Throwable
*/


/**
* Run runnable on ui thread
*
* @param runnable
* @throws Throwable
*/


/**
* Send text
*
* @param text
*/


/**
* Test of {@link FiltersViewActivity}
*/


/**
* Create test
*/


/**
* Tests of {@link ItemListAdapter}
*/


/**
* Verify view is reused
*/


/**
* Tests of the news text rendering
*/


/**
* Verify text of commit comment event
*/


/**
* Verify text of create event
*/


/**
* Verify text of create event
*/


/**
* Verify text of deleve event
*/


/**
* Verify text of follow event
*/


/**
* Verify text of Gist event
*/


/**
* Verify text of wiki event
*/


/**
* Verify text of issue comment event
*/


/**
* Verify text of issue event
*/


/**
* Verify text of member event
*/


/**
* Verify text of open sourced event
*/


/**
* Verify text of watch event
*/


/**
* Verify text of pull request event
*/


/**
* Verify text of push event
*/


/**
* Verify text of push event
*/


/**
* Tests of {@link CreateCommentActivity}
*/


/**
* Create test
*/


/**
* Verify empty comment can't be created
*
* @throws Throwable
*/


/**
* Tests of {@link CreateGistActivity}
*/


/**
* Create test
*/


/**
* Create Gist with initial text
*/


/**
* Create Gist with no initial text
*
* @throws Throwable
*/


/**
* Tests of {@link GistFilesViewActivity}
*/


/**
* Create test
*/


/**
* Verify changing pages between gist files
*
* @throws Throwable
*/


/**
* Tests of {@link CreateCommentActivity}
*/


/**
* Create test
*/


/**
* Verify empty comment can't be created
*
* @throws Throwable
*/


/**
* Tests of {@link EditIssueActivity}
*/


/**
* Create test
*/


/**
* Verify save menu is properly enabled/disable depending on the issue have
* a non-empty title
*
* @throws Throwable
*/


/**
* Tests of {@link FilterIssuesActivity}
*/


/**
* Create test
*/


/**
* Unit tests of {@link IssueUriMatcher}
*/


/**
* Verity empty uri
*/


/**
* Verity non-numeric issue number in uri
*/


/**
* Verify http uri
*/


/**
* Verify https uri
*/


/**
* Verify uri with comment fragment
*/


/**
* Unit tests of {@link RecentRepositories}
*/


/**
* Verify bad input
*/


/**
* Verify eviction
*/


/**
* Verify input/output to disk of {@link RecentRepositories} state
*/


/**
* Verify repositories are scoped to organization
*/


/**
* Tests of {@link RepositorySearchActivity}
*/


/**
* Create test
*/


/**
* Unit tests of {@link RepositoryUriMatcher}
*/


/**
* Verity empty uri
*/


/**
* Verify URI with no owner
*/


/**
* Verify URI with owner but no name
*/


/**
* Verify URI with owner but no name
*/


/**
* Verify URI with owner but no name
*/


/**
* Tests of {@link LoginActivity}
*/


/**
* Create test for {@link LoginActivity}
*/


/**
* Verify activity was created successfully
*
* @throws Throwable
*/


/**
* Unit tests of {@link UserUriMatcher}
*/


/**
* Verity empty URI
*/


/**
* Verify no name
*/


/**
* Verity URI with name
*/


/**
* Verity URI with name
*/


/**
* Verity URI with name
*/


/**
* Verity URI with name
*/


/**
* Unit tests of {@link DiffSizeFilter}
*/


/**
* Filter for including commits that introduced a configurable number of
* differences
*/


/**
* Line class that spans one or more revisions.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Class containing all the lines present at a file revision.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Class to assemble the history of every line in every revision of a file.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Container class for the line history of all revisions of a file.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Annotate command for building a {@link RevisionContainer} for a file path.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link LineHistoryCommand}
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Get author date of commit
*
* @param commit
117a140,196
}


/**
* Get committer date of commit
*
* @param commit
* @return author name or null if missing
*/


/**
* Bind commit author avatar to image view
*
* @param commit
* @param avatars
* @param view
* @return view
*/


/**
* Bind commit committer avatar to image view
*
* @param commit
* @param avatars
* @param view
* @return view
*/
//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//


/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/


/**
* Utilities for writing multiple HTTP requests
*/


/**
* Unit tests of {@link UserService}
*/


/**
* User plan
*/


/**
* User service class.
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Command class to stash changes in the working directory and index.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/
68a69,81

/**
* Callback interface when the selected organization changes
*/


/**
* Organization selection changed
*
* @param org
*/
250a264,269

/**
* Register a listener to be notified when the organization selected changes
*
* @param listener
* @return the currently selected organization
*/


/**
* Application note URL
41c41,46

String APP_NOTE_URL = "https://github.com/github/android";


/**
* Application note
*/


/**
* Field error
*/


/**
* Operation that wraps another operation and handles lock failures
*/


/**
* Append text as URL
*
* @param text
* @param listener
* @return this text
*/


/**
* Append text as URL
*
* @param text
* @return this text
*/


/**
* Tests of {@link EditIssuesFilterActivity}
*/


/**
* Create test
*/


/**
* Activity to create or edit an issues filter for a repository
*/


/**
* Create intent for creating an issue filter for the given repository
*
* @param filter
* @return intent
*/


/**
* Task to decode a bitmap from a file path
*/


/**
* Create task to decode the bitmap at the specified path to the specified
* maximum width and height
*
* @param maxWidth
* @param maxHeight
* @param path
*/


/**
* Decode {@link Bitmap} at given path
*
* @return bitmap
*/


/**
* Does the given path exist?
*
* @param path
* @return true if exists and non-empty, false otherwise
*/


/**
* Load bitmap
*
* @return bitmap
*/


/**
* Node representing a stashed commit in a repository
*/


/**
* Represents the "Stash" node
*/


/**
* Download model class
*/


/**
* Extension of {@link Download} to represent the initiation of a download with
* metadata about where to put the actual content when uploading.
*/


/**
* Service for accessing, creating, and deleting repositories downloads.
*/


/**
* Unit tests of {@link PatternFindCommitFilter}
*/


/**
* Unit tests of {@link CommitService}
*/


/**
* Opens a {@link RevCommit} in the commit editor
*/


/**
* GitHub issue label class.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* GitHub issue class.
*
* @author Kevin Sawicki (kevin@github.com)
*/
}
// Fill in any days left if recent days reported less than 7


/**
* Repository used in a build
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link BuildRepository}
*/


/**
* Author colors
*/


/**
* Annotation information control
*/


/**
* Annotation information control creator
*/


/**
* Blame operation
*/


/**
* Annotation revision
*/


/**
* Show annotation action class.
*/


/**
* Show blame annotations action handler
*/


/**
* Get intent extra
*
* @param name
* @return string array
*/
73a74,83

/**
* Get intent extra
*
* @param name
* @return string array
*/


/**
* 
*/


/**
* Loader which extends AsyncTaskLoaders and handles caveats as pointed out in
* http://code.google.com/p/android/issues/detail?id=14944.
* <p/>
* Based on CursorLoader.java in the Fragment compatibility package
* 
* @param <D>
*            data type
* @author Alexander Blom (me@alexanderblom.se)
*/


/**
* Activity to display list of gauge summaries
*/


/**
* Fragment to display a list of gauges
*/


/**
* View holder for a {@link Gauge}
*/


/**
* List loading fragment for a specific type
* 
* @param <E>
*/


/**
* Dated view summary
*/


/**
* Gauge information
*/


/**
* Collection of all gauges
*/


/**
* Gauges API service
*/


/**
* View summary
*/
57a63,69

/**
* Get data to display when obtaining an account fails
*
* @return data
*/


/**
* Show conflict message about previously registered authenticator from
* another application
*
* @param activity
*/


/**
* Task to star a {@link Gist}
*/


/**
* Create task to star a {@link Gist}
*
* @param context
* @param id
*/


/**
* Task to unstar a {@link Gist}
*/


/**
* Create task to unstar a {@link Gist}
*
* @param context
* @param id
*/


/**
* Show annotation action class.
*/


/**
* Show annotation action handler
*/


/**
* Unit tests of {@link CommitSearchPage}
*/


/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/


/**
* Unit tests of {@link BranchProjectTracker}
*/


/**
* Search unit test suite
*/


/**
* Base operation that supports adding pre/post tasks
*/
public void checkClientTrusted(X509Certificate[] chain, String authType) {
// Intentionally left blank
public void checkServerTrusted(X509Certificate[] chain, String authType) {
// Intentionally left blank


/**
* Drawable bar graph
*/


/**
* Unit tests for resolving reflog-based revisions
*/


/**
* View to display an Air Traffic map
*/


/**
* Unscaled width of map image used
*/


/**
* Unscaled height of map image used
*/


/**
* Divisor used to compute the scaling value
* <p>
* Constant taken from gaug.es site
*/


/**
* Multiplier used to compute the scaling value
* <p>
* Constant taken from gaug.es site
*/


/**
* Relative width used for x/y correction and scale value
*/


/**
* Scale value used based on map image dimensions
*/


/**
* Correction value used to adjust scaled y position
*/


/**
* Correction value used to adjust scaled x position
*/


/**
* Constant taken from gaug.es site
*/


/**
* Constant taken from gaug.es site
*/


/**
* Constant taken from gaug.es site
*/


/**
* Used to track elapsed time for animations and fps
*/


/**
* Used to track frames per second
*/


/**
* Frames per second
*/

// Load all the pin images

// Load all the ring images
90a216,220

/**
* Set the list of {@link Gauge} items to display
*
* @param gauges
*/

// Find the color index for the given site id

// Determine the x and y positions to draw the hit at.
// This code was taken from the gaug.es site

// Take absolute positions on actual map and scale to actual screen size since map image may have been scaled

// Draw rings if the hit just occurred
148a321,323

/**
* Pause the animated view
*/


/**
* Resume the animated view
*/
11a12,14

/**
* Callback that delivers pushed air traffic events to a {@link Queue}
*/
14a21,25

/**
* Create callback that pushes hits to given {@link Queue}
*
* @param hits
*/
2a3,6

/**
* Class to model a hit of traffic to a specific site
*/


/**
* Create a hit for the given site
*
* @param siteId
* @param lon
* @param lat
* @param time
*/


/**
* Unit tests of {@link Check} class
*/


/**
* Utility methods for various generic checks such as equality.
*/


/**
* Commit diff filter that computes the differences introduced by each commit
* visited.
*/


/**
* Unit tests of {@link CommitDiffFilter}
*/


/**
* Tests of {@link CreateCommentActivity}
*/


/**
* Client that uses {@link HttpRequest} instances to make requests
*/


/**
* Response that uses a configured {@link HttpRequest}
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* Select the ref to show reflog for
*/


/**
* Label provider for {@link FileDiff} objects
*/


/**
* Content provider for {@link FileDiff} objects
*/


/**
* A class with information about the changes to a file introduced in a
* commit.
*/


/**
* Unit tests of {@link HttpRequest}
*/


/**
* Helper for dealing with custom typefaces
*/


/**
* Get octocons typeface
*
* @param context
* @return octocons typeface
*/


/**
* Get typeface with name
*
* @param context
* @param name
* @return typeface
*/
194a182,191
// Load pagers if needed


/**
* {@link GitHubClient} extensions that integrates with the Android account manager to provide request credentials
*/


/**
* Create account-aware client
*
* @param accountProvider
*/


/**
* Create account-aware client
*
* @param hostname
* @param accountProvider
*/

// Credentials setting must come before super call
public boolean onOptionsItemSelected(MenuItem item) {
// Don't allow options before issue loads


/**
* Unit tests of {@link CommitCommand}
*/


/**
* Unit tests for {@link DiffStyleRangeFormatter}
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Diff style range formatter class. This class builds up a list of
* {@link DiffStyleRange} instances as a {@link FileDiff} is being written to an
* {@link IDocument}.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Command to apply the changes in a stashed commit to a repository
*/


/**
* Command to stash current changes in working directory and index
*/


/**
* Operation that creates a stashed commit for a repository
*/


/**
* Operation that applies a stashed commit in a repository
*/


/**
* Find the maximum number of digits in the given numbers
*
* @param numbers
* @return max digits
*/


/**
* Get width of number of digits with '#' prefix displayed in given view
*
* @param view
* @param numberOfDigits
* @return number width
*/


/**
* List adapter for items of a specific type
*
* @param <I>
* @param <V>
*/


/**
* Create empty adapter
*
* @param viewId
* @param inflater
*/


/**
* Create adapter
*
* @param viewId
* @param inflater
* @param elements
*/


/**
* @return items
*/


/**
* Set items
*
* @param items
* @return items
*/


/**
* Update view to display item
*
* @param view
* @param item
*/


/**
* Create empty item view
*
* @param view
* @return item
*/


/**
* Class that stores references to children of a view that get updated when the item in the view changes
*/


/**
* Create item view storing references to children of given view to be accessed when the view is ready to display an
* item
*
* @param view
*/
public ItemView(View view) {
// Intentionally left blank


/**
* List fragment that adds more elements when the bottom of the list is scrolled to
*
* @param <E>
*/


/**
* Resource pager
*/


/**
* Create pager that provides resources
*
* @return pager
*/


/**
* Get resource id of {@link String} to display when loading
*
* @return string resource id
*/
public void onScrollStateChanged(AbsListView view, int scrollState) {
// Intentionally left blank


/**
* Show more events while retaining the current pager state
*/


/**
* Base fragment for displaying a list of items that loads with a progress bar visible
*
* @param <E>
*/


/**
* List items provided to {@link #onLoadFinished(Loader, List)}
*/

// Start out with a progress bar

// Prepare the loader. Either re-connect with an existing one,
// or start a new one.


/**
* If the user explicitly hits the reload key, they don't want to see cached data. Calling this method means the
* loader will be passed a 'force-reload' parameter to indicate cached data shouldn't be used and a fresh request
* should be made.
*/


/**
* @param args
*            the args bundle passed to the loader by the LoaderManager
* @return true if the bundle indicates the user requested a forced reload of data
*/


/**
* Refresh the fragment's list
*/


/**
* Create adapter to display items
*
* @param items
* @return adapter
*/


/**
* Set the list to be shown and stop the refresh animation
*/
public void onLoaderReset(Loader<List<E>> loader) {
// Intentionally left blank


/**
* Show exception using {@link ErrorHelper#show(android.content.Context, Exception, int)}
* <p>
* This method ensures the {@link Toast} is displayed on the UI thread and so it may be called from any thread
*
* @param e
* @param defaultMessage
*/


/**
* Get exception from loader if it provides one by being a {@link ThrowableLoader}
*
* @param loader
* @return exception or null if none provided
*/


/**
* Refresh the list with the progress bar showing
*/


/**
* Fragment to display a pageable list of dashboard issues
*/


/**
* Filter data argument
*/


/**
* View used to display a dashboard issue
*/


/**
* Text view of repository id
*/


/**
* Issue number text view
*/


/**
* Issue title text view
*/


/**
* Opener avatar image view
*/


/**
* Creation time text view
*/


/**
* Number of comments text view
*/


/**
* Pull request icon text view
*/


/**
* Initial paint flags of {@link #number}
*/


/**
* @param view
*/


/**
* Adapter to display a list of dashboard issues
*/


/**
* Create adapter
*
* @param avatarHelper
* @param inflater
*/


/**
* Create adapter
*
* @param avatarHelper
* @param inflater
* @param elements
*/


/**
* Commit search result class.
*/
25a26,28

/**
* Main activity
*/


/**
* Key to to track current tab
*/


/**
* Task to refresh a repository
*/


/**
* Create task for context and id provider
*
* @param context
* @param repo
*/


/**
* Provider for a {@link GaugesService} instance
*/


/**
* Get service for configured key provider
*
* @return gauges service
* @throws IOException
* @throws AccountsException
*/


/**
* Service that plays music
*/


/**
* Activity to view what is playing and listen to music
*/


/**
* Activity to configure the settings for a Play server
*/


/**
* Service to receive push notifications about the currently playing song and
* queued songs
*/


/**
* Task to fetch the streaming URL and pusher application key of a configured
* Play server
*/


/**
* Obtain the currently playing and queued songs
*/


/**
* Stored settings for the configured Play server
*/


/**
* Service class to make requests to the Play API
*/


/**
* Song model
*/


/**
* Callback for when the current song changes or an error occurs
*/


/**
* Pusher to receive song data
*/


/**
* Wrapper class to encapsulate all data send via a Play push update
*/


/**
* List adapter for items of a specific type
* 
* @param <V>
*/


/**
* View wrapper for the currently playing {@link Song} layout
*/


/**
* List adapter for songs
*/


/**
* View wrapper to load and display art for a {@link Song}
*/


/**
* Show annotation action handler
*/


/**
* Show annotation action class.
*/


/**
* Unit tests of {@link DiffLineCountFilter}
*/


/**
* Unit tests of {@link DiffFileCountFilter}
*/


/**
* Download model class
*/


/**
* Extension of {@link Download} to represent the initiation of a download with
* metadata about where to put the actual content when uploading.
*/


/**
* Service for accessing, creating, and deleting repositories downloads.
*/


/**
* Request future delivering a response
*
* @param <V>
*            type of response data
*/


/**
* Callback that response for request was successfully obtained
*
* @param response
*/


/**
* Manager cache for an account
*/


/**
* Format version to bump if serialization format changes and cache should be ignored
*/


/**
* Create manager storing data at given root folder
*
* @param context
* @param root
* @param users
* @param orgs
* @param repos
* @param issues
*/


/**
* Read data from file
*
* @param file
* @return data
*/


/**
* Write data to file
*
* @param file
* @param data
* @return this manager
*/


/**
* Get orgs
*
* @param requestFuture
*/


/**
* Get repositories for user
*
* @param user
* @param requestFuture
*/


/**
* Get repositories for user
*
* @param repository
* @param filter
* @param requestFuture
*/


/**
* Reader of previously fetched request data
*/


/**
* Create request reader
*
* @param file
* @param formatVersion
*/


/**
* Read request data
*
* @return read data
*/


/**
* Request writer
*/


/**
* Create a request writer that writes to the given file
*
* @param file
* @param formatVersion
*/


/**
* Write request to file
*
* @param request
* @return request
*/


/**
* Show {@link Toast} for exception
* <p>
* This given default message will be used if an message can not be derived from the given {@link Exception}
* <p>
* This method may be called from any thread
*
* @param activity
* @param e
* @param defaultMessage
*/
138a175,177
// Remove signature


/**
* Email fragment div is removed and newlines are replaced with br tags
*/


/**
* Email fragment div is removed and newlines are replaced with br tags
*/


/**
* Repository branch model class
*/


/**
* Repository tag model class
*/


/**
* Unit tests of {@link RepositoryTag}
*/


/**
* Unit tests of {@link RepositoryBranch}
*/


/**
* Show annotation action handler
*/


/**
* Show annotation action class.
*/


/**
* Service for interacting with the collaborators on a GitHub repository
* 
* @see <a href="http://developer.github.com/v3/repos/collaborators/">GitHub
*      collaborator API documentation</a>
*/


/**
* Unit tests of {@link CollaboratorService}
*/


/**
* List adapter for a list of users
*/


/**
* Create user list adapter
*
* @param inflater
* @param elements
* @param avatarHelper
*/


/**
* Create user list adapter
*
* @param inflater
* @param avatarHelper
*/


/**
* Item view of a user
*/


/**
* Avatar image view
*/


/**
* Login text view
*/


/**
* @param view
*/


/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class computes and provides access to the {@link FileDiff} objects
* introduced by the commit.
*/


/**
* Unit tests of {@link RepositoryCommit}
*/


/**
* Unit tests of
* {@link GerritConnectorUi#findHyperlinks(org.eclipse.mylyn.tasks.core.TaskRepository, org.eclipse.mylyn.tasks.core.ITask, String, int, int)}
* 
* @author Kevin Sawicki
*/
39a40,52

/**
* Get selected fragment
*
* @return fragment
*/


/**
* Interface for container classes that can provide a collection of resources of
* the same type.
* 
* @param <V>
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Command class to stash changes in the working directory and index in a
* commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Fragment to display a list of Gists
*/


/**
* @param clickListener
* @return this fragment
*/


/**
* Refresh the fragment's list
*/


/**
* Unit tests of {@link BranchProjectTracker}
*/


/**
* Search unit test suite
*/


/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/


/**
* Base operation that supports adding pre/post tasks
*/


/**
96a105,122
* Set text on text view to be formatted version of given integer number
* <p>
* This method uses the formatter returned from
* {@link NumberFormat#getIntegerInstance()}
*
* @param parentView
* @param childViewId
* @param number
* @return text view
*/


/**
207a234,247
}


/**
* Set text on text view to be formatted version of given integer number
* <p>
* This method uses the formatter returned from
* {@link NumberFormat#getIntegerInstance()}
*
* @param childViewId
* @param number
* @return text view
*/
32a33,35

/**
* Gist notification popup class
*/
38a36,38

/**
* Create Gist handler class.
*/
26a28,30

/**
* Create Gist job class
*/


/**
* Command to delete a tag
*/


/**
* Operation that deletes a tag
*/


/**
* Unit tests of {@link Link}
*/


/**
* Expand templated URI with no values
*/


/**
* Expand templated URI with single value
*/


/**
* Expand templated href with no params
*
* @return href with no expanded values if this link if templated, base href
*         otherwise
*/


/**
* Expand templated href using given values
*
* @param values
* @return href with values expanded if this link is templated, base href
*         otherwise
*/


/**
* Expand templated href using given name and value
*
* @param name
* @param value
* @return href with name/value expanded if this link is templated, base href
*         otherwise
*/


/**
* Expand templated href using given name/value pairs
*
* @param values
* @return href with values expanded if this link is templated, base href
*         otherwise
*/


/**
* Milestone service class for listing the {@link Milestone} objects in use by a
* repository and user accessed via a {@link GitHubClient}.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Run runnable on ui thread
* 
* @param runnable
* @throws Throwable
*/


/**
* Tests of {@link GistFilesViewActivity}
*/


/**
* Create test
*/


/**
* Verify changing pages between gist files
* 
* @throws Throwable
*/


/**
* Helper for working with a SQLite database
*/


/**
* Transaction interface
*/


/**
* Perform transaction
*
* @param database
*/


/**
* Create database helper
*
* @param context
* @param name
* @param factory
* @param version
*/


/**
* Get readable database
*
* @return readable database or null if it failed to create/open
*/
} catch (SQLiteException e1) {
// Make second attempt


/**
* Get writable database
*
* @return writable database or null if it failed to create/open
*/
} catch (SQLiteException e1) {
// Make second attempt


/**
* Run given {@link Transaction}
*
* @param transaction
* @return true if transaction completed, false otherwise
*/


/**
* Iterator for getting paged responses
* 
* @param <V>
*/


/**
* Exception class to be thrown when iterating over pages fails
*/
22a23,25

/**
* GitHub class
*/


/**
* GitHub Repository class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Select the ref to show reflog for
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Command class to delete a stashed commit reference
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Utility for writing reflog entries
*/


/**
* Select the ref to show reflog for
*/


/**
* Actiivty with tabbed pages
*
* @param <V>
*/


/**
* View pager
*/


/**
* Tab host
*/


/**
* Pager adapter
*/


/**
* Create pager adapter
*
* @return pager adapter
*/


/**
* Get title for position
*
* @param position
* @return title
*/


/**
* Set current item to new position
* <p>
* This is guaranteed to only be called when a position changes and the
* current item of the pager has already been updated to the given position
* <p>
* Sub-classes may override this method
*
* @param position
*/
protected void setCurrentItem(final int position) {
// Intentionally left blank


/**
* Get content view to be used when {@link #onCreate(Bundle)} is called
*
* @return layout resource id
*/
int positionOffsetPixels) {
// Intentionally left blank
public void onPageScrollStateChanged(int state) {
// Intentionally left blank


/**
* Create tabs and pager
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Command class to delete a stashed commit reference
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Utility for writing reflog entries
*/


/**
* Tests of {@link FullCommit}
*/


/**
* Test commit with one file and one line comment
*/


/**
* Test commit with one file and one commit comment
*/


/**
* Test commit with no files and one commit comment
*/


/**
* Test commit with no comments and one file
*/


/**
* Test commit with line and global comments
*/


/**
* Live unit tests of {@link LabelService}
*/


/**
31a39,43


/**
* View Air Traffic action
*/


/**
* Unit tests of {@link GsonUtils}
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link CommitLogWriter}
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Commit log class that provides iteration of {@link Commit} objects
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Gson utilities
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Commit log reader class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Class that writes {@link Commit} objects to a {@link Writer}
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Handles Gist attatchments
*/


/**
* Unit tests of {@link GaugesService}
*/


/**
* Create reader for string
*
* @param value
* @return input stream reader
* @throws IOException
*/


/**
* Set up default mocks
*
* @throws IOException
*/


/**
* Verify getting gauges with an empty response
*
* @throws IOException
*/


/**
* Verify getting page content with an empty response
*
* @throws IOException
*/


/**
* Verify getting referrers with an empty response
*
* @throws IOException
*/


/**
* Register runnable to be invoked when all given child view ids are clicked
*
* @param ids
* @param runnable
*/


/**
* Repository selection wizard page.
*/


/**
* Utilities for writing multiple HTTP requests
*/
//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//


/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/


/**
* Commit search results page class.
*/


/**
* Commit search results label provider class.
*/


/**
* Extension of {@link Download} to represent the initiation of a download with
* metadata about where to put the actual content when uploading.
*/


/**
* 
*/


/**
* Service for accessing, creating, and deleting repositories downloads.
*/
117a108,149

/**
* Get geographic location label for hit
*
* @param hit
* @return label
*/


/**
* Get page title of hit
*
* @param hit
* @return title
*/
31a36,115

/**
* The maximum numbers of hits to retain
*/


/**
* Size scales the ring does through while being animated
*/


/**
* Ring Animation
*/


/**
* Create animation for hit
*
* @param hit
*/


/**
* @param state
*/


/**
* @return size
*/


/**
* Draw ring on canvas
*
* @param canvas
* @param location
* @param paint
*/


/**
* Get location of hit on map
*
* @param hit
* @param point
* @return point
*/

// Take absolute positions on actual map and scale to actual screen size since map image may have been
// scaled
private void draw(Hit hit, Canvas canvas, PointF location, long now) {
// Find the color index for the given site id


/**
* Add hit to view
*
* @param newHit
*/


/**
* Activity to display a stock quote
*/


/**
* Operation to drop a stashed commit
*/


/**
* Command to drop one or all stashed commits
*/


/**
* Unit tests of {@link RepositoryService}
*/


/**
108a115
this.cursor = cursor;
113a121,155
}


/**
* Set text on child view to string of column index
*
* @param childViewIndex
* @param columnIndex
* @return text view
*/


/**
* Set text on child view to number at column index
*
* @param childViewIndex
* @param columnIndex
* @return text view
*/


/**
* Set text on child view to time span from number at column index
*
* @param childViewIndex
* @param columnIndex
* @return text view
*/


/**
* Team model class.
*/


/**
* User plan
*/


/**
* User service class.
*/


/**
* Organization service class
*/


/**
* Service class for working with organization teams
*/


/**
* Exception class to be thrown when iterating over pages fails
*/


/**
* Iterator for getting paged responses
* 
* @param <V>
*/


/**
* Interceptor that sets authentication credentials
*/


/**
* Unit tests of {@link UserService}
*/


/**
* 
*/


/**
* Live unit tests of {@link LabelService}
*/


/**
* 
*/


/**
* {@link IImportWizard} for cloning GitHub repositories.
*/


/**
* Search for GitHub repositories wizard page.
*/


/**
* Author colors
*/


/**
* Annotation information control
*/


/**
* Annotation information control creator
*/


/**
* Blame operation
*/


/**
* Annotation revision
*/


/**
* Show annotation action class.
*/


/**
* Show blame annotations action handler
*/


/**
* Unit tests of {@link RenameBranchCommand}
*/


/**
* Unit tests of {@link StashListCommand}
*/


/**
* Command class to list the stashed commits in a repository.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Utilities for working with objects that implement {@link IAdaptable}
*/


/**
* Handler to cherry pick the commit onto the current branch
*/


/**
* Base handler with helpers for working with selections
*/


/**
* Generator of author information for lines based on when they were introduced
* into a file.
*/


/**
* Line class that spans one or more continuous revisions.
*/


/**
* Blame command for building a {@link Line} list for a file path.
*/


/**
* Unit tests of {@link BlameCommand}
*/


/**
* OAuth2 authorization scheme. Sets an authorization header with a value of the
* space-separated user principal name and password from credentials.
*/


/**
* Get gauge with id
*
* @param gaugeId
* @return gauge
* @throws IOException
*/


/**
* {@link PersonIdent} comparator that compares the name and email address.
* 
* This class compares {@link PersonIdent#getName()	} first and if they are
* identical it will compare {@link PersonIdent#getEmailAddress()} next.
*/


/**
* Fragment to display a list of Gists
*/


/**
* @param repository
* @return this fragment
*/


/**
* @param filter
* @return this fragment
*/


/**
* @param clickListener
* @return this fragment
*/
71a72,82

/**
* Get configured account
*
* @param context
* @return account or null if none
*/
HttpRequest request = HttpRequest.get(source);
// Add credentials if a secure connection to github.com


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Command class to delete a stashed commit reference
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Utility for writing reflog entries
*/
27a28,32

/**
* Read and connect timeout in milliseconds
*/


/**
* Iterator for getting paged responses
* 
* @param <V>
*/


/**
* Exception class to be thrown when iterating over pages fails
*/


/**
* An exception occurring when a file cannot be locked
*/


/**
* Task to add starred songs to the queue
*/


/**
* Result class for a task that results in an {@link IOException} or an array of
* {@link Song} objects
*/


/**
* Unit tests of {@link ReflectiveHolderFactory}
*/


/**
* {@link ViewHolderFactory} that uses reflection to create new
* {@link ViewHolder} isntances with optional parameters
* 
* @param <T>
*            model class that views are bound to
*/


/**
* Base view holder class
* 
* @param <T>
*            model class that the view is bound to
*/
43a43,47

/**
* Add modules
*
* @param modules
*/


/**
* Utilities for working with {@link Repository} objects
*/


/**
* Does the repository have details denoting it was loaded from an API call?
* <p>
* This uses a simple heuristic of either being a fork or having a non-zero
* amount of forks meaning it came back from an API call providing those
* details and more.
*
* @param repository
* @return true if complete, false otherwise
*
*/
117a108,149

/**
* Get geographic location label for hit
*
* @param hit
* @return label
*/


/**
* Get page title of hit
*
* @param hit
* @return title
*/
31a36,115

/**
* The maximum numbers of hits to retain
*/


/**
* Size scales the ring does through while being animated
*/


/**
* Ring Animation
*/


/**
* Create animation for hit
*
* @param hit
*/


/**
* @param state
*/


/**
* @return size
*/


/**
* Draw ring on canvas
*
* @param canvas
* @param location
* @param paint
*/


/**
* Get location of hit on map
*
* @param hit
* @param point
* @return point
*/

// Take absolute positions on actual map and scale to actual screen size since map image may have been
// scaled
private void draw(Hit hit, Canvas canvas, PointF location, long now) {
// Find the color index for the given site id


/**
* Add hit to view
*
* @param newHit
*/


/**
* Verify hostname verifier is set and accepts all
*/


/**
* Unit tests of {@link BlameCommand}
*/


/** Unit tests of {@link BlameGenerator}. */


/**
* Generate author information for lines based on introduction to the file.
* <p>
* Applications that want a simple one-shot computation of blame for a file
* should use {@link #computeBlameResult()} to prepare the entire result in one
* method call. This may block for significant time as the history of the
* repository must be traversed to gather information on every line.
* <p>
* Applications that want more incremental update behavior may use either the
* raw {@link #next()} streaming approach supported by this class, or construct
* a {@link BlameResult} using {@link BlameResult#create(BlameGenerator)} and
* incrementally construct the result with {@link BlameResult#computeNext()}.
* <p>
* This class is not thread-safe.
* <p>
* During blame processing there are two files involved:
* <ul>
* <li>result - The file whose lines are being examined. This is the revision
* the user is trying to view blame/annotation information alongside of.</li>
* <li>source - The file that was blamed with supplying one or more lines of
* data into result. The source may be a different file path (due to copy or
* rename). Source line numbers may differ from result line numbers due to lines
* being added/removed in intermediate revisions.</li>
* </ul>
*/


/**
* Collects line annotations for inspection by applications.
* <p>
* A result is usually updated incrementally as the BlameGenerator digs back
* further through history. Applications that want to lay annotations down text
* to the original source file in a viewer may find the BlameResult structure an
* easy way to acquire the information, at the expense of keeping tables in
* memory tracking every line of the result file.
* <p>
* This class is not thread-safe.
* <p>
* During blame processing there are two files involved:
* <ul>
* <li>result - The file whose lines are being examined. This is the revision
* the user is trying to view blame/annotation information alongside of.</li>
* <li>source - The file that was blamed with supplying one or more lines of
* data into result. The source may be a different file path (due to copy or
* rename). Source line numbers may differ from result line numbers due to lines
* being added/removed in intermediate revisions.</li>
* </ul>
*/


/**
* Blame command for building a {@link BlameResult} for a file path.
*/


/**
* Create a map of all the request parameters represented by this filter
*
* @return non-null map of filter request parameters
*/


/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/


/**
* Represents the "Submodules" node
*/


/**
* Interface definition for a callback to be invoked when a {@link Gauge} has been selected.
*/


/**
* Callback method to be invoked when a {@link Gauge} is selected
*
* @param gauge
*/


/**
* Utilities for working with objects that implement {@link IAdaptable}
*/


/**
* Handler to cherry pick the commit onto the current branch
*/


/**
* Base handler with helpers for working with selections
*/


/**
* Create test for {@link GaugeListActivity}
*/


/**
* Verify activity exists
*/


/**
* Unit tests for {@link DiffStyleRangeFormatter}
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Diff style range formatter class. This class builds up a list of
* {@link DiffStyleRange} instances as a {@link FileDiff} is being written to an
* {@link IDocument}.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Core task attribute mapper
*/


/**
* GitHub task attribute metadata
*/


/**
* Core task data handler
*/


/**
* Base repository connector
*/


/**
* Base handler for working with a {@link TaskData} selection
*/


/**
* Callback for resolving a repository
*/


/**
* Unit test of {@link OrganizationService}
*/


/**
* Unit tests of {@link CommitService}
*/


/**
* Unit tests of {@link DeployKeyService}
*/


/**
* Unit tests of {@link UserService}
*/


/**
* Unit tests of {@link DataService}
*/


/**
* Unit tests of {@link TeamService}
*/


/**
* Unit tests of {@link WatcherService}
*/


/**
* Unit tests of {@link CollaboratorService}
*/


/**
* Units tests of the {@link Assert} class
*/


/**
* Create referrer list fragment
*/


/**
* Status class containing the type, path, and commit id of the submodule.
*/


/**
* Enumeration of different statuses that a submodule can be in
*/


/**
* Walker that visits all submodule entries found in a tree
*/


/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule sync command.
* 
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
* 
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/


/**
* Unit tests of {@link SubmoduleInitCommand}
*/


/**
* Unit tests of {@link SubmoduleStatusCommand}
*/


/**
* Unit tests of {@link SubmoduleSyncCommand}
*/


/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/


/**
* Unit tests of {@link SubmoduleWalk}
*/


/**
* Dialog to display a confirmation
*/


/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
*/


/**
* Activity that display dialogs
*/


/**
* Callback for a dialog finishing and delivering a result
*
* @param requestCode
* @param resultCode
*            result such as {@link Activity#RESULT_CANCELED} or {@link Activity#RESULT_OK}
* @param arguments
*/


/**
* Gist task editor page factory class
*/


/**
* Gist task editor page class
*/


/**
* Operation that creates a stashed commit for a repository
*/


/**
* Operation that applies a stashed commit in a repository
*/


/**
* Command to apply the changes in a stashed commit to a repository
*/


/**
* Command to stash current changes in working directory and index
*/


/**
* Avatar label displaying an image and label for a avatar url.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link CommitEditor}
*/


/**
* Unit tests of {@link CommitSearchQuery}
*/


/**
* Gist change status class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Gist revision class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Command class to stash changes in the working directory and index in a
* commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* View holder for common markdown-rendering views
*
* @param <V>
*/


/**
* Context
*/


/**
* Image getter
*/


/**
* View
*/


/**
* Create view holder
*
* @param context
* @param imageGetter
* @param view
*/


/**
* Bind {@link TextView} at id to HTML
*
* @param id
* @param html
*/


/**
* Comment view holder
*/


/**
* Factory for creating view holder
*
* @param context
* @param imageGetter
* @return view holder
*/


/**
* Create a comment holder
*
* @param context
* @param imageGetter
* @param view
*/


/**
* Bind text view to HTML string
*
* @param view
* @param html
* @return this image getter
*/


/**
* Bind view to user
*
* @param context
* @param view
* @param user
*/


/**
* View holder for an issue's body
*/


/**
* Create factory
*
* @param context
* @param imageGetter
* @return view holder factory
*/


/**
* @param context
* @param imageGetter
* @param view
*/


/**
* 
*/


/**
* Repository commit model class. This class contains GitHub-specific
* information about the commit and also provides access to the raw Git
* {@link Commit} object.
*/


/**
* Commit comment model class.
*/


/**
* Service for interacting with repository commits
* 
* @see <a href="http://developer.github.com/v3/repos/commits">GitHub commit API
*      documentation</a>
*/


/**
* Is the given owner name valid?
*
* @param name
* @return true if valid, false otherwise
*/


/**
* Is the given commit SHA-1 valid?
*
* @param sha
* @return true if valid, false otherwise
*/


/**
* Match for a commit in a repository
*/


/**
* Repository of commit
*/


/**
* SHA-1 of commit
*/


/**
* Create match
*
* @param repository
* @param commit
*/


/**
* Parses a {@link CommitMatch} from a {@link Uri}
*/


/**
* Attempt to parse a {@link CommitMatch} from the given {@link Uri}
*
* @param uri
* @return {@link CommitMatch} or null if unparseable
*/


/**
* Tests of {@link CommitUriMatcher}
*/


/**
* Verity empty uri
*/


/**
* Verify non-hex commit SHA-1 in uri
*/


/**
* Verify http uri
*/


/**
* Verify https uri
*/


/**
* Verify uri with comment fragment
*/


/**
* Is the given {@link Exception} due to a 401 Unauthorized API response?
*
* @param e
* @return true if 401, false otherwise
*/


/**
45a52,60

/**
* @param fadeIn
* @return this task
*/


/**
* Holder for a file associated with a Gist
*/


/**
* Create holder for view
*
* @param view
*/

// Load avatar if single issue and user is currently unset or missing


/**
* Base class for commands that use a {@link Transport} during execution.
* <p>
* This class provides standard configuration of a transport for options such as
* a {@link CredentialsProvider}, a timeout, and a
* {@link TransportConfigCallback}.
*
* @param <C>
* @param <T>
*/
28a28,30

/**
* Utilities for verifying gaug.es account
*/


/**
* Operation that deletes a tag
*/


/**
* Command to delete a tag
*/


/**
* Unit tests of {@link ViewUtils}
*/


/**
* Set a visible view gone
*/


/**
* Set an invisible view gone
*/


/**
* Set a visible view invisible
*/


/**
* Set a visible view invisible
*/


/**
* Create tab using information from current adapter
* <p>
* This can be called when the tabs changed but must be called after an
* initial call to {@link #configureTabPager()}
*/


/**
* Compare with previous revision action handler.
*/


/**
* Compare with previous revision action.
*/


/**
* Show annotation action handler
*/


/**
* Show annotation action class.
*/


/**
* Base class for commands that use a {@link Transport} during execution.
* <p>
* This class provides standard configuration of a transport for options such as
* a {@link CredentialsProvider}, a timeout, and a
* {@link TransportConfigCallback}.
*
* @param <C>
* @param <T>
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Interface definition for a callback to be invoked when a {@link Gauge} has been selected.
*/


/**
* Callback method to be invoked when a {@link Gauge} is selected
*
* @param gauge
*/


/**
* Viewer to display {@link FileDiff} objects in a table.
*/


/**
* Parses a {@link User} from a {@link Uri}
*/


/**
* Attempt to parse a {@link User} from the given {@link Uri}
*
* @param uri
* @return {@link User} or null if unparseable
*/


/**
* Task to refresh a user
*/


/**
* Create task for context and login
*
* @param context
* @param login
*/


/**
* Utilities for writing multiple HTTP requests
*/
//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//


/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/


/**
* Unit tests of {@link CommitFileImpactFilter}
*/


/**
* Unit tests of {@link CommitLineImpactFilter}
*/


/**
* Unit tests of {@link CommitImpactTest}
*/


/**
* Registered API client an authentication key
*/


/** serialVersionUID */


/**
* @return key
*/


/**
* @param key
*/


/**
* @return description
*/


/**
* @param description
*/
21a25,29

/**
* Matcher for finding a {@link Gist} from an {@link Event}
*/


/**
* Helper to find a {@link Gist} to open for an event
*/


/**
* Get gist from event
*
* @param event
* @return gist or null if event doesn't apply
*/


/**
* Unit tests of {@link CommitCommand}
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Command class to stash changes in the working directory and index in a
* commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Bridge class that obtains a gaug.es API key for the currently configured account
*/


/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/


/**
* Command to sync submodule configuration
*/


/**
* Command to update selected submodules
*/


/**
* Operation that updates a repository's submodules
*/


/**
* Operation that syncs a repository's submodule configurations
*/


/**
* NLS
*/


/**
* gaug.es constants
*/


/**
* Unit tests of HTML conversions done when rendering markdown
*/


/**
* Single email toggle span is removed
*/


/**
* Multiple email toggle spans are removed
*/


/**
* Leading break is removed
*/


/**
* Trailing break is removed
*/


/**
* Leading & trailing breaks are removed
*/


/**
* Leading & trailing breaks are removed
*/


/**
* Leading whitespace is removed
*/


/**
* Trailing whitespace is removed
*/


/**
* Leading & trailing whitespace is removed
*/


/**
* HTML Utilities
*/


/**
* Get last span of given kind
*
* @param text
* @param kind
* @return span
*/


/**
* Encode HTML
*
* @param html
* @return html
*/


/**
* Encode HTML
*
* @param html
* @param imageGetter
* @return html
*/


/**
* Formatter for HTML strings so that they are ready to be displayed in text views
*/


/**
* Format given HTML string so it is ready to be presented in a text view
*
* @param html
* @return formatted HTML
*/

// Remove e-mail toggle link

// Remove div with e-mail content

// Remove hidden div

// Replace paragraphs with breaks

// Remove e-mail div around actual body

// Trim trailing breaks and whitespace


/**
* Getter for an image
*/


/**
* Create image getter for context
*
* @param context
*/


/**
* Bind text view to HTML string
*
* @param view
* @param html
* @param id
* @return this image getter
*/


/**
* Helper to handle any custom activity launching done by selecting URLs
*/


/**
* Create intent to launch view of URI
*
* @param uri
* @return intent
*/


/**
* Convert global view intent one into one that can be possibly opening inside the current application.
*
* @param intent
* @return converted intent or null if non-application specific
*/


/**
* Helpers for accessing {@link AccountManager}
*/


/**
* Get login name of configured account
*
* @param context
* @return login name or null if none configure
*/


/**
* Start an activity to view the given {@link Issue}
*
* @param issue
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
8,10c4,21

* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
8,10c4,21

* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/


/**
* Diff editor page class.
*/


/**
* Source viewer to display one or more file differences using standard editor
* colors and fonts preferences.
*/


/**
* Task to queue songs that match a subject
*/


/**
* {@link LinkedList} based resource collector
* 
* @param <V>
*/


/**
* Interface for accepting collections of resources page by page.
* 
* @param <V>
*/


/**
* GitHub API request class.
*/


/**
* Unit tests of {@link StashApplyCommand}
*/


/**
* Command class to apply a stashed commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/
32a33,35

/**
* Gist notification popup class
*/
38a36,38

/**
* Create Gist handler class.
*/
26a28,30

/**
* Create Gist job class
*/


/**
* Task to unfollow a user
*/


/**
* Create task for context and login
*
* @param context
* @param login
*/


/**
* Execute the task with a progress dialog displaying.
* <p>
* This method must be called from the main thread.
*/


/**
* Import repositories wizard class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* GitHub UI plug-in
*/


/**
* NLS
*/


/**
* Credentials wizard page class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Stores Avatars
*/


/**
* Avatar label displaying an image and label for a avatar url.
*/


/**
* Repository selection wizard page.
*/


/**
* Repository search wizard
*/
92a93,97

/**
* Sync period in seconds, currently every 8 hours
*/


/**
* Tests of displaying a list of gauges
*/


/**
* Provider for a {@link GaugesService} instance
*/


/**
* Get service for configured key provider
*
* @return gauges service
* @throws IOException
* @throws AccountsException
*/


/**
* Preference page for the History view
*/


/** Preference page for views preferences */


/**
* Create default dialog
*
* @return dialog
*/


/**
* Choices arguments
*/


/**
* Selected choice argument
*/


/**
* Tag
*/


/**
* Dialog fragment to select an issue milestone
*/


/**
* Get selected milestone from results bundle
*
* @param arguments
* @return milestone
*/


/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param choices
* @param selectedChoice
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests for resolving reflog-based revisions
*/


/**
* Avatar utilities
*/


/**
* Bind view to image at URL
*
* @param context
* @param view
* @param avatarUrl
*/


/**
* Label provider for {@link FileDiff} objects
*/


/**
* Content provider for {@link FileDiff} objects
*/


/**
* A class with information about the changes to a file introduced in a
* commit.
*/


/**
* Get embedded resource
*
* @throws Exception
*/


/**
* Key model class.
*/


/**
*
*/


/**
* Repository search wizard
*/


/**
* Get account used for authentication
*
* @param accountManager
* @param activityUsedToStartLoginProcess
* @return account
*/


/**
* Select the ref to show reflog for
*/


/**
* Element factory for saving and restoring the state of a
* {@link CommitEditorInput} instance.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link CommitEditorInputFactory}
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Markdown loader
*/


/**
* @param context
* @param repository
* @param raw
* @param imageGetter
*/


/**
* Fragment to display raw comment text
*/


/**
* Get comment text
*
* @return text
*/


/**
* Fragment to display rendered comment fragment
*/


/**
* Set text to render
*
* @param raw
* @param repo
*/


/**
* Pager of a raw and rendered comment text
*/


/**
* @param activity
* @param repo
*/


/**
* Get comment text
*
* @return text
*/


/**
* Set current item
*
* @param position
* @return this adapter
*/
169a170,174

/**
* Edit icon
*/


/**
* Matcher for issue URLS that provides the issue number matched
* <p>
* This class is not thread-safe
*/


/**
* Get issue number from URL
*
* @param url
* @return issue number of -1 if the given URL is not to an issue
*/


/**
* Unit tests of {@link IssueUrlMatcher}
*/


/**
* Verify issue URL matching provides accurate issue numbers
*/


/**
* Verify issue URL matching provides accurate issue numbers
*/


/**
* Unit tests of {@link CreateBranchPage}
*/


/**
* View holder for a rendered news event
*/


/**
* Can the given event type be rendered by this view holder?
*
* @param eventType
* @return true if renderable, false otherwise
*/


/**
* Create view holder
*
* @param view
*/


/**
* Fragment to display a news feed for a given user
*/
List<Event> events = new ArrayList<Event>(service.pageUserEvents(user.getLogin()).next());
// Remove any events that can't be rendered


/**
* Pager adapter for a user's different views
*/


/**
* @param fm
*/


/**
* Activity to view a user's various pages
*/


/**
* Create intent for this activity
*
* @param user
* @return intent
*/


/**
* Helper for obtaining the recently viewed repositories for under a given user or organization
*/


/**
* Create helper scoped to given user
*
* @param context
* @param user
*/


/**
* Add repository to recent list
*
* @param repo
* @return this helper
*/


/**
* Add id to recent list
*
* @param repoId
* @return this helper
*/


/**
* Persist recent list
*
* @return this helper
*/


/**
* Is the given repository id contained in the recent list?
*
* @param repoId
* @return true if recent, false otherwise
*/


/**
* Create main application
*/
public GaugesApplication() {
// Disable http.keepAlive on Froyo and below


/**
* Create main application
*
* @param context
*/


/**
* Create main application
*
* @param instrumentation
*/


/**
* 'Referer' header name
*/


/**
* Simple extensions of {@link DelegatingStyledCellLabelProvider} which uses a
* {@link WorkbenchLabelProvider} for use with objects that adapt to
* {@link IWorkbenchAdapter}.
*/


/**
* Mojo that uploads a built resource as a GitHub repository download
* 
* @author Kevin Sawicki (kevin@github.com)
* @goal upload
*/


/**
* Unit tests of {@link DownloadsMojo}
* 
* @author Kevin Sawicki (kevin@github.com)
*/
String login = id.substring(0, slash);
// Use actor if it matches login parsed from repository id


/**
* Start an activity to view the given repository
*
* @param repository
*/
63a64,73

/**
* Start an activity to view the given repository
*
* @param repository
*/


/**
* Utilities for writing multiple HTTP requests
*/
//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//


/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/


/**
* Memo'ized typefaces loaded from the assets directory
*/


/**
* Get typeface with name
*
* @param name
* @param view
* @return typeface, either cached or loaded from the assets
*/


/**
* Set typeface with name on given text view
*
* @param name
* @param view
* @return view
*/


/**
* Commit editor page class displaying author, committer, parent commits,
* message, and file information in form sections.
*/


/**
* Dialog to select a Gist task repository
*/


/**
* Unit tests of {@link BlameCommand}
*/


/**
* Generator of author information for lines based on when they were introduced
* into a file.
*/


/**
* Line class that spans one or more continuous revisions.
*/


/**
* Blame command for building a {@link Line} list for a file path.
*/


/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/


/**
* Unit tests of {@link SubmoduleGenerator}
*/


/**
* Unit tests of {@link SubmoduleInitCommand}
*/


/**
* Unit tests of {@link SubmoduleStatusCommand}
*/


/**
* Unit tests of {@link SubmoduleSyncCommand}
*/


/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/


/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule add command.
*
* This will a
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* Generator that visits all submodule entries found in the index tree
*/


/**
* Status class containing the type, path, and commit id of the submodule.
*/


/**
* Enumeration of different statuses that a submodule can be in
*/

// stateText.setText(state);
return Collections.singletonList(revision);
/*
118a122
*/


/**
* Unit tests for resolving reflog-based revisions
*/


/**
* Create request to URL
*
* @param url
* @return request
* @throws HttpRequestException
*/


/**
* Constants used in gist repositories query properties.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
2120c2145

public void getWithQueryParams1() throws Exception {
2142a2168,2192
* Verify GET with query parameters
*
* @throws Exception
*/


/**
2148c2198

public void getWithEscapedQueryParams1() throws Exception {
2170a2221,2245
* Verify GET with escaped query parameters
*
* @throws Exception
*/


/**
2176c2251

public void deleteWithQueryParams1() throws Exception {
2198a2274,2298
* Verify DELETE with query parameters
*
* @throws Exception
*/


/**
2204c2304

public void deleteWithEscapedQueryParams1() throws Exception {
2226a2327,2351
* Verify DELETE with escaped query parameters
*
* @throws Exception
*/


/**
2232c2357

public void putWithQueryParams1() throws Exception {
2254a2380,2404
* Verify PUT with query parameters
*
* @throws Exception
*/


/**
2260c2410

public void putWithEscapedQueryParams1() throws Exception {
2282a2433,2457
* Verify PUT with escaped query parameters
*
* @throws Exception
*/


/**
2288c2463

public void headWithQueryParams1() throws Exception {
2310a2486,2510
* Verify HEAD with query parameters
*
* @throws Exception
*/


/**
2316c2516

public void headWithEscapedQueryParams1() throws Exception {
2331a2532,2556
assertTrue(request.ok());
assertEquals("HEAD", method.get());
assertEquals("us er", outputParams.get("name"));
assertEquals("100", outputParams.get("number"));
}


/**
* Verify HEAD with escaped query parameters
*
* @throws Exception
*/


/**
* Helper for finding and tweaking a view's children
*/


/**
* Create finder wrapping given view
*
* @param view
*/


/**
* Get image view with id
*
* @param id
* @return image view
*/


/**
* Set text of child view with given id
*
* @param id
* @param content
* @return text view
*/


/**
* Set text of child view with given id
*
* @param id
* @param content
* @return text view
*/


/**
* Register on click listener to child view with given id
*
* @param id
* @param listener
* @return view registered with listener
*/


/**
* Register runnable to be invoked when child view with given id is clicked
*
* @param id
* @param runnable
* @return view registered with runnable
*/


/**
* Unit tests of {@link RequestError} class
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Avatar plug-in that contains a persistent {@link AvatarStore} instance
* available for use.
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests for {@link DiffStyleRangeFormatter}
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Diff style range formatter class. This class builds up a list of
* {@link DiffStyleRange} instances as a {@link FileDiff} is being written to an
* {@link IDocument}.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Id class.
*/


/**
* Pull request discussion model class.
*/


/**
* Encoding utilities
*/


/**
* Unit tests of {@link CommitLimitFilter}
*/


/**
* Filter that stops including commits after a certain number of commits are
* considered. This class should be last in an {@link AndCommitFilter} if you
* want to only limit matched commits and not just all visited commits.
*/


/**
* Set the result that is to be sent as the result of the request that caused this Activity to be launched. If
* result is null or this method is never called then the request will be canceled.
*
* @param result
*            this is returned as the result of the AbstractAccountAuthenticator request
*/


/**
* Sends the result or a Constants.ERROR_CODE_CANCELED error if a result isn't present.
*/
if (accountAuthenticatorResponse != null) {
// send the result bundle back if set, otherwise send an error.


/**
* Represents the "Submodules" node
*/


/**
* Base tree filter to be extended by sub-classes
*/


/**
* Start a 'HEAD' request to the given URL along with the query params
*
* @param baseUrl
* @param params
*          The query parameters to include as part of the baseUrl
* @param encode
*          true to encode the full URL
*
* @see #append(String, Map)
* @see #encode(CharSequence)
*
* @return request
*/


/**
* Start a 'GET' request to the given URL along with the query params
*
* @param baseUrl
* @param encode
*          true to encode the full URL
* @param params
*          the name/value query parameter pairs to include as part of the
*          baseUrl
*
* @see #append(String, String...)
* @see #encode(CharSequence)
*
* @return request
*/


/**
* Tests of {@link FilterIssuesActivity}
*/


/**
* Create test
*/


/**
* Select the ref to show reflog for
*/


/**
* Commit search query class that runs a {@link RevWalk} for all
* {@link Repository} objects included in the {@link CommitSearchSettings} and
* matches all {@link RevCommit} objects against the search settings.
*/


/**
* Node representing a stashed commit in a repository
*/


/**
* Represents the "Stash" node
*/


/**
* Preference page for the History view
*/


/** Preference page for views preferences */


/**
* Editor part for viewing an issue's labels.
*/


/**
* GitHub issue task editor attribute part that display labels and milestone
* attribute editors.
* 
* @author Kevin Sawicki (kevin@github.com)
*/
int positionOffsetPixels) {
// Intentionally left blank
public void onPageScrollStateChanged(int state) {
// Intentionally left blank


/**
* Activity to view a file on a branch
*/


/**
* Create intent to show file in commit
*
* @param repository
* @param branch
* @param file
* @param blobSha
* @return intent
*/


/**
* Adapter to display a source code tree
*/


/**
* @param activity
*/


/**
* @param context
*/


/**
* Set root folder to display
*
* @param root
*/


/**
* Fragment to display a repository's source code tree
*/


/**
* Back up the currently viewed folder to its parent
*
* @return true if directory changed, false otherwise
*/
31a33,37

/**
* Index of code page
*/


/**
* Pass back button pressed event down to fragments
*
* @return true if handled, false otherwise
*/


/**
* {@link Tree} with additional information
*/


/**
* Entry in a tree
*/


/**
* Parent folder
*/


/**
* Raw tree entry
*/


/**
* Name
*/


/**
* Folder in a tree
*/


/**
* Sub folders
*/


/**
* Files
*/


/**
* Tree
*/


/**
* Root folder
*/


/**
* Branch where tree is present
*/


/**
* Create tree with branch
*
* @param tree
* @param branch
*/


/**
* Task to refresh a blob
*/


/**
* @param repository
* @param blobSha
* @param context
*/


/**
* Task to load the tree for a repository's default branch
*/


/**
* Create task to refresh repository's tree
*
* @param repository
* @param context
* @param executor
*/


/**
* Create task to refresh repository's tree
*
* @param repository
* @param context
*/


/**
* Get gauge with id
*
* @param gaugeId
* @return gauge
* @throws IOException
*/


/**
* Unit tests of {@link ParentCountFilter}
*/


/**
* Cursor adapter for a single view type
*/


/**
* Create adapter
*
* @param activity
* @param cursor
* @param flags
* @param layoutResourceId
*/


/**
* Create adapter
*
* @param context
* @param cursor
* @param flags
* @param layoutResourceId
*/


/**
* Create adapter
*
* @param context
* @param cursor
* @param flags
*
* @param inflater
* @param layoutResourceId
*/


/**
* Get child view ids to store
* <p>
* The index of each id in the returned array should be used when using the
* helpers to update a specific child view
*
* @return ids
*/


/**
* Initialize view
*
* @param view
* @return view
*/


/**
* Cursor adapter with helpers
*/


/**
* Updater for current view
*/


/**
* @param context
* @param c
* @param autoRequery
*/


/**
* @param context
* @param c
* @param flags
*/


/**
* Updater for child views indexed from a root view
*/


/**
* Number formatter for integers
*/


/**
* Root view currently being updated
*/


/**
* Child views currently being updated
*/


/**
* Initialize view by binding indexed child views to tags on the root view
* <p>
* Sub-classes may override this method but must call super
*
* @param view
* @param children
* @return view
*/


/**
* Set current view that is currently being updated
*
* @param view
*/


/**
* Get indexed children
*
* @param parentView
* @return children
*/


/**
* Get text view at given index
*
* @param childViewIndex
* @return text view
*/


/**
* Get text view at given index
*
* @param parentView
* @param childViewIndex
* @return text view
*/


/**
* Get image view at given index
*
* @param childViewIndex
* @return image view
*/


/**
* Get image view at given index
*
* @param parentView
* @param childViewIndex
* @return image view
*/


/**
* Get view at given index
*
* @param childViewIndex
* @return view
*/


/**
* Get view at given index
*
* @param parentView
* @param childViewIndex
* @return view
*/


/**
* Set text on text view at given index
*
* @param childViewIndex
* @param text
* @return text view
*/


/**
* Set text on text view at given index
*
* @param parentView
* @param childViewIndex
* @param text
* @return text view
*/


/**
* Set text on text view at index to string resource
*
* @param childViewIndex
* @param resourceId
* @return text view
*/


/**
* Set text on text view at index to string resource
*
* @param parentView
* @param childViewIndex
* @param resourceId
* @return text view
*/


/**
* Set text on text view to be formatted version of given integer number
* <p>
* This method uses the formatter returned from
* {@link NumberFormat#getIntegerInstance()}
*
* @param childViewIndex
* @param number
* @return text view
*/


/**
* Set text on text view to be formatted version of given integer number
* <p>
* This method uses the formatter returned from
* {@link NumberFormat#getIntegerInstance()}
*
* @param parentView
* @param childViewIndex
* @param number
* @return text view
*/


/**
* Get child view
*
* @param childViewIndex
* @param childViewClass
* @return child view
*/


/**
* Get child view
*
* @param parentView
* @param childViewIndex
* @param childViewClass
* @return child view
*/


/**
* Set child view as gone or visible
*
* @param childViewIndex
* @param gone
* @return child view
*/


/**
* Set child view as gone or visible
*
* @param parentView
* @param childViewIndex
* @param gone
* @return child view
*/


/**
* Set the checked state of the {@link CompoundButton} with at index
*
* @param childViewIndex
* @param checked
* @return check box
*/


/**
* Set the checked state of the {@link CompoundButton} with at index
*
* @param parentView
* @param childViewIndex
* @param checked
* @return check box
*/


/**
* Set the text on the text view if it is non-empty and make the view gone if
* it is empty
*
* @param childViewIndex
* @param text
* @return text view
*/


/**
* Set the text on the text view if it is non-empty and make the view gone if
* it is empty
*
* @param parentView
*
* @param childViewIndex
* @param text
* @return text view
*/


/**
* Set relative time span on text view
*
* @param childViewIndex
* @param time
* @return text view
*/


/**
* Set relative time span on text view
*
* @param parentView
* @param childViewIndex
* @param time
* @return text view
*/


/**
* Key model class.
*/


/**
* DELETE request that supports an entity
*/


/**
* @param objects
*/


/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/


/**
* Get the {@link URL} of this request's connection
*
* @return request URL
*/
37a38,65

/**
* Is the current reader node a legacy node?
* 
* @param reader
* @param context
* @return true if legacy, false otherwise
*/


/**
* Legacy unmarshalling of object id
* 
* @param reader
* @param context
* @return object id
*/


/**
* Remote config converter that handles unmarshaling legacy externalization of
* JGit RemoteConfig class.
*/


/**
* Remote config proxy
*/


/**
* Create remote config proxy
*/


/**
* @return remote config
* @throws URISyntaxException
*/


/**
* Create remote config converter
* 
* @param xStream
*/


/**
* Is the current reader node a legacy node?
* 
* @param reader
* @param context
* @return true if legacy, false otherwise
*/


/**
* Legacy unmarshalling of remote config
* 
* @param reader
* @param context
* @return remote config
*/


/**
* Unit test of {@link OrganizationService}
*/


/**
* Unit tests of {@link CommitService}
*/


/**
* Unit tests of {@link DeployKeyService}
*/


/**
* Unit tests of {@link UserService}
*/


/**
* Unit tests of {@link DataService}
*/


/**
* Unit tests of {@link TeamService}
*/


/**
* Unit tests of {@link WatcherService}
*/


/**
* Unit tests of {@link CollaboratorService}
*/


/**
168a187,193
}


/**
* @return ringBounds
*/


/**
* Command to drop one or all stashed commits
*/


/**
* Operation to drop a stashed commit
*/


/**
* Unit tests of {@link DiffCountFilter}
*/


/**
* Quote containing price and share amount
*/


/**
* Share price bought at
*/


/**
* Share price sold at
*/


/**
* Number of shares
*/


/**
* Create stock quote
*
* @param buyPrice
* @param sellPrice
* @param shares
*/


/**
* Get amount paid for shares
*
* @return purchase cost
*/


/**
* Get net process
*
* @return net amount
*/


/**
* Get return rate
*
* @return rate
*/

// Ensure list elements are one per line
19a21,23

/**
* Main module provide services and clients
*/


/**
* Utilities for working with objects that implement {@link IAdaptable}
*/


/**
* Base handler with helpers for working with selections
*/


/**
* Handler to cherry pick the commit onto the current branch
*/


/**
* Interface for container classes that can provide a collection of resources of
* the same type.
* 
* @param <V>
*/


/**
* Pager adapter for a user's different views
*/


/**
* @param fm
* @param resources
* @param defaultUser
*/


/**
* This methods clears any fragments that may not apply to the newly selected org.
*
* @return this adapter
*/


/**
* Home screen activity
*/


/**
* Create intent for this activity
*
* @return intent
*/

// Don't notify listeners or change pager if org hasn't changed
39a41,43

/**
* Avatar loader
*/
42a47,49

/**
* User service
*/


/**
* News that a given user has created
*/


/**
* Fragment to display a list of followers
*/


/**
* Fragment to display a list of followers
*/


/**
* Current organization/user
*/
39a43,45

/**
* Event service
*/


/**
* News that a given user has received
*/


/**
* Activity to view a user's various pages
*/


/**
* Create intent for this activity
*
* @param user
* @return intent
*/


/**
* Adapter for a list of repositories
*/


/**
* Create list adapter for repositories
*
* @param inflater
* @param elements
* @param user
*/


/**
* Create list adapter for repositories
*
* @param inflater
* @param user
*/


/**
* Fragment to display a list of repositories for a {@link User}
*/
} catch (IOException ignored) {
// TODO This is never actually thrown even though it is declared


/**
* Tests of {@link CreateGistActivity}
*/


/**
* Base class for commands that use a {@link Transport} during execution.
* <p>
* This class provides standard configuration of a transport for options such as
* a {@link CredentialsProvider}, a timeout, and a
* {@link TransportConfigCallback}.
*
* @param <C>
* @param <T>
*/


/**
* A fluid interface for making HTTP requests using an underlying
* {@link HttpURLConnection} (or sub-class).
*/


/**
* Unit tests of HttpRequest
*/


/**
* Base test case that provides a running HTTP server
*/


/**
* Tests of {@link RepositorySearchActivity}
*/


/**
* Create test
*/


/**
* Dashboard activity for issues
*/


/**
* Pager adapter for the issues dashboard
*/


/**
* Create pager adapter
*
* @param context
* @param service
* @param fragmentManager
*/


/**
* Commit editor page class displaying author, committer, parent commits,
* message, and file information in form sections.
*/


/**
* Blob utilities
*/


/**
* Select the ref to show reflog for
*/


/**
* Unit tests of {@link UrlUtils}
*/


/**
* Unit tests of {@link LabelComparator}
*/


/**
* Unit tests of {@link EncodingUtils}
*/


/**
* Unit tests of {@link DateUtils}
*/


/**
* Unit tests of {@link MilestoneComparator}
*/


/**
* Registered API client an authentication key
*/


/** serialVersionUID */


/**
* @return key
*/


/**
* @param key
*/


/**
* @return description
*/


/**
* @param description
*/


/**
* Import repositories wizard class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Set up server
*
* @throws Exception
*/


/**
* Clear handler
*/


/**
* Unit tests of {@link GistFile}
*/


/**
* Unit tests of {@link GistChangeStatus}
*/

// Initialize prototype deck

// universal gravitational constant  (m3 kg-1 s-2)

// Do arithmetic op represented by this constant


/** class foo */
void method2() {
// make sure this is shown as method2 in the symbol list


/**
* Credential tests for the various configuration types
* 
* @author Kevin Sawicki (kevin@github.com)
*/
33a35,39

/**
* Create async loader
*
* @param context
*/
else {
// Look for current folder in new tree or else reset to root
110a111,138

/**
* Remove all headers
*
* @return true if headers were removed, false otherwise
*/


/**
* Remove all footers
*
* @return true if headers were removed, false otherwise
*/


/**
* Annotate command for building a {@link RevisionContainer} for a file path.
*/


/**
* Line class that spans one or more revisions.
*/


/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
*/


/**
* Class containing all the lines present at a file revision.
*/


/**
* Class to assemble the history of every line in every revision of a file.
*/


/**
* Container class for the line history of all revisions of a file.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link LineHistoryCommand}
*/


/**
* Expand templated URI with values map
*/


/**
* Unit tests of {@link RenameBranchCommand}
*/


/**
* Element factory for saving and restoring the state of a
* {@link CommitEditorInput} instance.
*/


/**
* Unit tests of {@link CommitEditorInputFactory}
*/


/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/


/**
* Show annotation action handler
*/


/**
* Show annotation action class.
*/


/**
* Annotate operation
*/


/**
* Annotation information control
*/


/**
* Annotation information control creator
*/


/**
* Annotation revision
*/


/**
* Author colors
*/


/**
* Unit tests of {@link BlameCommand}
*/


/**
* Generator of author information for lines based on when they were introduced
* into a file.
*/


/**
* Line class that spans one or more continuous revisions.
*/


/**
* Blame command for building a {@link Line} list for a file path.
*/


/**
* Activity to login
*/


/**
* Auth token type parameter
*/


/**
* If set we are just checking that the user knows their credentials; this doesn't cause the user's password to be
* changed on the device.
*/


/**
* Was the original caller asking for an entirely new account?
*/


/**
* Authenticate login & password
*/
badCredentials = true;
// A 401 can be returned as an IOException with this message


/**
* Called when response is received from the server for confirm credentials request. See onAuthenticationResult().
* Sets the AccountAuthenticatorResult which is sent back to the caller.
*
* @param result
*/


/**
* Called when response is received from the server for authentication request. See onAuthenticationResult(). Sets
* the AccountAuthenticatorResult which is sent back to the caller. Also sets the authToken in AccountManager for
* this account.
*/


/**
* Called when the authentication process completes (see attemptLogin()).
*
* @param result
*/


/**
* Tests of {@link CreateCommentActivity}
*/


/**
* Unit tests of {@link RepositoryCommit}
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class also provides access to the {@link FileDiff} objects introduced by
* the commit.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Wizard to configure a new submodule
*/


/**
* Wizard page to configure the path of a submodule
*/


/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/


/**
* Command to sync submodule configuration
*/


/**
* Command to update selected submodules
*/


/**
* Command to add a new submodule to a repository
*/


/**
* Operation to add a submodule to a repository
*/


/**
* Operation that updates a repository's submodules
*/


/**
* Operation that syncs a repository's submodule configurations
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about sobmodule</a>
*/


/**
* Helpers for gestures
*/


/**
* Register listener on double-tap gesture for view
*
* @param view
* @param listener
* @return view
*/


/**
* Adapter for a {@link OnDoubleTapListener}
*/


/**
* Unit tests of {@link GistStore}
*/


/**
* Verify issue is updated when re-added
*/


/**
* 'application/json' content type header value
*/


/**
* 'gzip' encoding header value
*/


/**
*
*/


/**
* Commit search results page class.
*/


/**
* Commit search results label provider class.
*/


/**
* Activity to display a list of Gists
*/
12a12,14

/**
* Welcome activity that prompts to sign in
*/

/*
* Copyright 2012 GitHub Inc.
8,10c4,15

* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/**
* Tests of {@link CommitService#getBase(org.eclipse.jgit.lib.ObjectId...)} and
* {@link CommitService#getBase(String...)}
*/


/**
* Base test case with utilities for common Git operations performed during
* testing
*/


/**
* Clone Gist handler class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Information about the streaming location of the Play server and also the
* pusher application key
*/


/**
* strong tags replaced with b tags
*/


/**
* Unit tests for adding submodules to a repository
*/


/**
* Unit tests of running a submodule sync
*/


/**
* Search unit test suite
*/


/**
* Unit tests for running a submodule update
*/


/**
* Operation to add a submodule to a repository
*/


/**
* Operation that updates a repository's submodules
*/


/**
* Operation that syncs a repository's submodule configurations
*/


/**
* Wizard to configure a new submodule
*/


/**
* Wizard page to configure the path of a submodule
*/


/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/


/**
* Command to sync submodule configuration
*/


/**
* Command to add a new submodule to a repository
*/


/**
* Command to update selected submodules
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Command class to delete a stashed commit reference
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Utility for writing reflog entries
*/


/**
* Gist attachment wizard page class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Get address for location
*
* @param context
* @param location
* @return possibly null address retrieved from location's latitude and
*         longitude
*/


/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/


/**
* Unit tests of {@link SubmoduleInitCommand}
*/


/**
* Unit tests of {@link SubmoduleStatusCommand}
*/


/**
* Unit tests of {@link SubmoduleSyncCommand}
*/


/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/


/**
* Unit tests of {@link SubmoduleWalk}
*/


/**
* Status class containing the type, path, and commit id of the submodule.
*/


/**
* Enumeration of different statuses that a submodule can be in
*/


/**
* Walker that visits all submodule entries found in a tree
*/


/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* Section containing commit message, author, and committer controls.
*/


/**
* Represents the "Submodules" node
*/


/**
* Extension of {@link Issue} that includes the {@link Repository} that the
* issue is in.
* <p>
* This type of issue is returned from {@link IssueService} calls that don't
* require an {@link IRepositoryIdProvider} to be specified and therefore the
* repository information is needed to correlate which issues occur in which
* repositories.
*/


/**
* Unit tests of {@link RepositoryIssue}
*/
14a15,17

/**
* Enumeration of task operations
*/


/******************************************************************************
10c10

*****************************************************************************/


/**
* GitHub Repository class.
*/


/**
* Repository id
*/


/**
* 
*/


/**
* 
*/
35a36,38

/**
* GitHub issue task data handler
*/


/**
* Used for creating projects out of .project files
*/
23a24,28

/**
* GitHub task attribute mapper class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* {@link LinkedList} based resource collector
* 
* @param <V>
*/


/**
* Interface for accepting collections of resources page by page.
* 
* @param <V>
*/


/**
* GitHub API request class.
*/

// Added isMerge because we don't want to allow empty remote names
// for tag/branch pushes.


/**
* Unit tests of {@link OAuthService}
*/


/**
* Unit tests of {@link Authorization}
*/


/**
* Unit tests of {@link Application}
*/


/**
* Authorization model class
*/


/**
* Authorized application model class
*/


/**
* Service for interacting with a user's OAUth authorizations
*
* @see <a href="http://developer.github.com/v3/oauth/">GitHub OAuth API
*      documentation</a>
*/


/**
* Unit tests of {@link CommitStatus}
*/
17a17,21

/**
* Create comparator for given account
*
* @param account
*/


/**
* Finder bound to this activity's view
*/


/**
* Unit tests of {@link CommitSearchQuery}
*/


/**
* Unit tests of {@link GitHubClient}
*/
18a19,21

/**
* All headless unit tests of GitHub Java API
*/


/**
* Show annotation action handler
*/


/**
* Show annotation action class.
*/


/**
* Annotate operation
*/


/**
* Annotation information control
*/


/**
* Annotation information control creator
*/


/**
* Annotation revision
*/


/**
* Author colors
*/


/**
* Command class to stash changes in the working directory and index in a
* commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Alert dialog in Holo Light theme
*/


/**
* Create light dialog
*
* @param context
* @return light alert dialog
*/


/**
* Create light dialog with title and message
*
* @param context
* @param title
* @param message
* @return alert dialog
*/


/**
* Create light dialog with title and message
*
* @param context
* @param title
* @param message
* @return alert dialog
*/


/**
* @param context
*/


/**
* @param context
* @param theme
*/


/**
* Utilities for writing multiple HTTP requests
*/
//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//


/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/


/**
* Unit tests of {@link SignedOffByFilter}
*/


/**
* Unit tests of {@link CommitService#getLatest()}
*/


/**
* Stock model class
*/


/**
* Loader for persistent stock list used for autocompletion of symbols
*/


/**
* Adapter to display a list of stocks
*/


/**
* List adapter for items of a specific type
*
* @param <V>
*/


/**
* 
*/


/**
* Unit tests of {@link AllCommitFilter}
*/


/**
* Operation that wraps another operation and handles lock failures
*/


/**
* Pager adapter for a gauge
*/


/**
* Create pager adapter
*
* @param context
*
* @param gauge
* @param fragmentManager
*/


/**
* Verify data is send when receiving response date header without first
* calling {@link HttpRequest#code()}
*
* @throws Exception
*/


/**
* Gist editor attachment part. Modeled after {@link TaskEditorAttachmentPart}
* but with less columns.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* GitHub issue task editor attribute part that display labels and milestone
* attribute editors.
*/


/**
* GitHub connector specific UI extensions.
*/


/**
* Editor part for viewing an issue's labels.
*/


/**
* GitHub issue repository query page class.
*/


/**
* GitHub connector specific extensions.
*/


/**
* Issue summary task editor part modeled after {@link TaskEditorSummaryPart}
* but displaying reporter and assignee avatar images.
*/


/**
* Editor page for GitHub.
*/


/**
* Editor page factory for GitHub.
*/


/**
* NLS
*/


/**
* GitHub class
*/


/**
* GitHub exception that wraps and formats a {@link RequestException}
*/


/**
* NLS for Mylyn GitHub Core
*/


/**
* Utilities for working with {@link IRepositoryQuery} objects.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* GitHub issue task attributes
*/


/**
* GitHub task attribute mapper class.
*/


/**
* GitHub connector.
*/


/**
* Enumeration of task operations
*/


/**
* GitHub issue task data handler
*/


/**
* NLS for Mylyn GitHub Core
*/


/**
* Unit tests for {@link DiffStyleRangeFormatter}
*/


/**
* Diff style range formatter class that builds up a list of
* {@link DiffStyleRange} instances as each {@link FileDiff} is being written to
* an {@link IDocument}.
*/
} catch (IOException ignored) {
// Ignored
} catch (AccountsException ignored) {
// Ignored


/**
* Initial user name
*/


/**
* Unit tests of {@link UrlUtils}
*/


/**
* Unit tests of {@link LabelComparator}
*/


/**
* Unit tests of {@link EncodingUtils}
*/


/**
* Unit tests of {@link DateUtils}
*/


/**
* Unit tests of {@link MilestoneComparator}
*/


/**
* Base operation that supports adding pre/post tasks
*/


/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/


/**
* Unit tests of {@link BranchProjectTracker}
*/


/**
* Search unit test suite
*/


/**
* Unit tests of {@link BranchProjectTracker}
*/


/**
* Search unit test suite
*/


/**
* Base operation that supports adding pre/post tasks
*/


/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/


/**
* Base client class for interacting with GitHub HTTP/JSON API.
*
* @param <C>
*/


/**
* Multi-part part that is a fixed size input stream
*/


/**
* Base HTTP client response with links to other resources
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Command class to stash changes in the working directory and index in a
* commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Replace with HEAD revision action handler
*/


/**
* Replace with Commit action
*/


/**
* Replace with commit action handler
*/


/**
* Replace with ref action handler
*/


/**
* Replace with HEAD revision action
*/


/**
* Replace with reference action
*/


/**
* An exception occurring when a file cannot be locked
*/

/* Attach a rotating ImageView to the refresh item as an ActionView */


/**
* Create finder wrapping given window
*
* @param window
*/


/**
* Create finder wrapping given activity
*
* @param activity
*/


/**
* Task to check repository starring status
*/


/**
* Create task for context and id provider
*
* @param context
* @param repo
*/
50a51,59

/**
* Get milestones
*
* @return list of milestones
*/


/**
* Toggles the "Display Latest Branch Commit" preference
*/


/**
* Utilities for an {@link Activity}
*/


/**
* Finish the given activity and start a home activity class.
* <p>
* This mirror the behavior of the home action bar button that clears the
* current activity and starts or brings another activity to the top.
*
* @param activity
* @param homeActivityClass
*/


/**
* Dialog to display when a revert failures
*/


/**
* Generator that visits all submodule entries found in the index tree
*/


/**
* Status class containing the type, path, and commit id of the submodule.
*/


/**
* Enumeration of different statuses that a submodule can be in
*/


/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* Styled label provider that wraps a {@link WorkbenchLabelProvider}
*/


/**
* Load listener callback
*
* @param <V>
*/


/**
* Loaded callback
*
* @param data
*/


/**
* Unit tests of {@link CommitCommand}
*/


/**
* Operation that wraps another operation and handles lock failures
*/
case id.issue_comment:
// Don't allow commenting before issue loads


/**
78c83,88

public static final String EXTRA_COMMENT_BODY = INTENT_EXTRA_PREFIX + "COMMENT_BODY";


/**
* Comments handle
*/


/**
* Public repository icon
*/


/**
* Adapter for a list of searched for repositories
*/


/**
* Create list adapter for searched for repositories
*
* @param inflater
* @param elements
*/


/**
*
* Create list adapter for searched for repositories
*
* @param inflater
*/


/**
* Item view for a searched for repository
*/


/**
* Repository description text view
*/


/**
* @param view
*/


/**
* Adapter for a list of repositories
*/


/**
* Create list adapter for repositories
*
* @param inflater
* @param elements
* @param account
* @param recent
*/


/**
* Create list adapter for repositories
*
* @param inflater
* @param account
* @param recent
*/


/**
* Item view for a repository
*/


/**
* Repository type icon
*/


/**
* Repository name text
*/


/**
* Recently view label
*/


/**
* @param view
*/


/**
* Exception class to be thrown when iterating over pages fails
*/


/**
* Iterator for getting paged responses
* 
* @param <V>
*/


/**
* Verify authenticator is registered
*/


/**
* Id class.
*/


/**
* Pull request discussion model class.
*/


/**
* Pull request marker model class.
*/


/**
* Unit tests of {@link GaugesService}
*/


/**
* Create reader for string
*
* @param value
* @return input stream reader
* @throws IOException
*/


/**
* Set up default mocks
*
* @throws IOException
*/


/**
* Verify getting gauges with an empty response
*
* @throws IOException
*/


/**
* Verify getting page content with an empty response
*
* @throws IOException
*/


/**
* Verify getting referrers with an empty response
*
* @throws IOException
*/


/**
* GitHub issue comment class.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* GitHub issue milestone class.
*
* @author Kevin Sawicki (kevin@github.com)
*/
protected float calculateScreenX(final Hit hit) {
// Determine the x positions to draw the hit at.

// Take absolute positions on actual map and scale to actual screen size since map image may have been
// scaled


/**
* Calculate the y location of the given hit on the map
*
* @param hit
* @return y coordinate
*/
protected float calculateScreenY(final Hit hit) {
// Determine the x and y positions to draw the hit at.
// This code was taken from the gaug.es site


/**
* Name of stock
*/


/**
* Stock symbol
*/


/**
* Create stock
*
* @param symbol
* @param name
*/


/**
* @param layoutId
* @param inflater
* @param items
*/


/**
* Quote containing price and share amount
*/


/**
* Share price bought at
*/


/**
* Share price sold at
*/


/**
* Number of shares
*/


/**
* Create stock quote
*
* @param buyPrice
* @param sellPrice
* @param shares
*/


/**
* Get amount paid for shares
*
* @return purchase cost
*/


/**
* Get net process
*
* @return net amount
*/


/**
* Get return rate
*
* @return rate
*/


/**
* Create request
*
* @param symbol
* @param shares
* @param dollars
* @param buyDate
* @param sellDate
*/


/**
* @return exception
*/


/**
* Called after request completes and the net amount has been computed
*
* @param quote
*/


/**
* Called when request fails providing the cause of the failure
*
* @param cause
*/


/**
* Create stock list loader
*
* @param context
*/
} catch (IOException ignored) {
// Ignored


/**
* Handle to a {@link Quote}
*/


/**
* Handle to a {@link Stock}
*/


/**
* Unit tests of {@link StashListCommand}
*/


/**
* Command class to list the stashed commits in a repository.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Store to add loaded issues to
*/


/**
* Create issue pager
*
* @param store
*/


/**
* Dialog helper to display a list of possibly selected issue labels
*/


/**
* Create dialog helper to display labels
*
* @param activity
* @param requestCode
* @param repository
* @param service
*/


/**
* Show dialog with given labels selected
*
* @param selectedLabels
*/


/**
* Store of loaded issues
*/


/**
* Create issue store
*
* @param service
*/


/**
* Get issue
*
* @param repository
* @param number
* @return issue or null if not in store
*/


/**
* Add issue to store
*
* @param issue
* @return issue
*/


/**
* Add issue to store
*
* @param repository
* @param issue
* @return issue
*/


/**
* Refresh issue
*
* @param repository
* @param number
* @return refreshed issue
* @throws IOException
*/


/**
* Refresh issue
*
* @param repository
* @param issue
* @return edited issue
* @throws IOException
*/


/**
* Element factory for saving and restoring the state of a
* {@link CommitEditorInput} instance.
*/


/**
* Unit tests of {@link CommitEditorInputFactory}
*/


/**
* Replace with HEAD revision action handler
*/


/**
* Replace with Commit action
*/


/**
* Replace with commit action handler
*/


/**
* Replace with ref action handler
*/


/**
* Replace with HEAD revision action
*/


/**
* Replace with reference action
*/
10a10,12

/**
* Unit tests of client API
*/


/**
* Gist task editor page class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Gist task editor page factory class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Increases the hit rect of a view. This should be used when an icon is small and cannot be easily tapped on.
* Source: http://stackoverflow.com/a/1343796/5210
* @param amount The amount of dp's to be added to all four sides of the view hit purposes.
* @param delegate The view that needs to have its hit rect increased.
*/


/**
* Increases the hit rect of a view. This should be used when an icon is small and cannot be easily tapped on.
* Source: http://stackoverflow.com/a/1343796/5210
* @param top The amount of dp's to be added to the top for hit purposes.
* @param left The amount of dp's to be added to the left for hit purposes.
* @param bottom The amount of dp's to be added to the bottom for hit purposes.
* @param right The amount of dp's to be added to the right for hit purposes.
* @param delegate The view that needs to have its hit rect increased.
*/
parent.post(new Runnable() {
// Post in the parent's message queue to make sure the parent
// lays out its children before we call getHitRect()


/**
* Enforces that user is logged in before work on the background thread commences.
*
* @param <D>
*/


/**
* Activity using this loader
*/


/**
* Create loader for context
*
* @param context
*/


/**
* Load data
*
* @return data
*/


/**
* Enforces that user is logged in before work on the background thread commences.
*
* @param <ResultT>
*/


/**
* Create asynchronous task that ensures a valid account is present when executed
*
* @param context
*/


/**
* Create asynchronous task that ensures a valid account is present when executed
*
* @param context
* @param executor
*/


/**
* Execute task with an authenticated account
*
* @return result
* @throws Exception
*/


/**
* A class used to execute a submodule status command.
* 
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* Generator that visits all submodule entries found in the index tree
*/


/**
* Status class containing the type, path, and commit id of the submodule.
*/


/**
* Enumeration of different statuses that a submodule can be in
*/


/**
* Constants used for {@link Intent} and {@link Bundle} properties
*/
70a77,85

/**
* Get view being updated
*
* @return view
*/


/**
* 
*/


/**
* 
*/


/**
* NLS for Mylyn GitHub Core
*/


/**
* GitHub pull request attributes
*/


/**
* Pull request composite that includes commits
*/


/**
* GitHub pull request connector.
*/


/**
* Enumeration of task operations
*/


/**
* GitHub issue task data handler
*/


/**
* Pull request utilities
*/


/**
* Import repositories wizard class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Base HTTP-based task repository settings page
*/


/**
* Checkout pull request handler
*/


/**
* Task editor section to view commits attached to a pull request
*/


/**
* Handler class that fetches changes from a selected pull request
*/


/**
* NLS
*/


/**
* Pull request adapter
*/


/**
* Pull request commit adapter
*/


/**
* Pull request connector UI
*/


/**
* Adds the files from a pull request's commits to the context when it is
* activated.
*/


/**
* GitHub pull request repository query page class.
*/


/**
* Pull request task repository settings page.
*/


/**
* Editor page for GitHub pull requests.
*/


/**
* Pull request task editor page factory class.
*/


/**
* Holder for a issue minus the comments
*/


/**
* Create issue header view holder
*
* @param view
* @param imageGetter
* @param avatarHelper
* @param resources
*/


/**
* Create issue reference
*
* @param issue
* @param queue
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Credentials wizard page class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Activity to view and select a stock
*/


/**
* Command to apply the changes in a stashed commit to a repository
*/


/**
* Command to stash current changes in working directory and index
*/


/**
* Operation that creates a stashed commit for a repository
*/


/**
* Operation that applies a stashed commit in a repository
*/


/**
* Gist repository settings page class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/
6a7,9

/**
* Utilities for dealing with dates and times
*/


/**
* Get relative time for date
*
* @param date
* @return relative time
*/


/**
* Command to delete a tag
*/


/**
* Operation that deletes a tag
*/
//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//


/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/


/**
* Utilities for writing multiple HTTP requests
*/


/**
* Write part of a multipart request to the request body
*
* @param name
* @param filename
* @param type
* @param part
* @return this request
* @throws HttpRequestException
*/


/**
* Page link class to be used to determine the links to other pages of request
* responses encoded in the current response. These will be present if the
* result set size exceeds the per page limit.
*/


/**
* Pages request class that contains a collector for accept resources page by
* page.
* 
* @param <V>
*/


/**
* GitHub API response class.
*/


/**
* Unit tests of {@link MarkdownService}
*/


/**
* Service to request Markdown text to be rendered as HTML
*
* @see <a href="http://developer.github.com/v3/markdown/">GitHub Markdown API
*      documentation</a>
*/


/**
* Gist model with comments and starred status
*/


/** serialVersionUID */


/**
* Create gist with comments
*
* @param gist
* @param starred
* @param comments
*/


/**
* Create empty gist
*/


/**
* @return starred
*/


/**
* @return gist
*/


/**
* Get files in gist
*
* @return list of files
*/


/**
* Command class to list the stashed commits in a repository.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Unit tests of {@link StashListCommand}
*/


/**
* Unit tests of {@link CommitCommand}
*/


/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/


/**
* Show annotation action class.
*/


/**
* Show annotation action handler
*/


/**
* Simple wigdet class that can be enabled or disabled
*/


/**
* Unit tests of {@link Widget} class
*/


/**
* Unit tests of {@link Label}
*/


/**
* Helpers for dealing with system services
*/


/**
* Get default display
*
* @param context
* @return display
*/


/**
* Get default display
*
* @param view
* @return display
*/
0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
11a14,16

/**
* View holder for a repository displayed in a list
*/


/**
* Create repository view holder
*
* @param view
* @param user
* @param recentIds
*/


/**
* Item view for a comment
*/


/**
* Comment author text
*/


/**
* Comment date text
*/


/**
* Comment body text
*/


/**
* Comment author avatar image view
*/


/**
* @param view
*/


/**
* Adapter for a list of {@link Comment} objects
*/


/**
* Create list adapter
*
* @param inflater
* @param elements
* @param avatars
* @param imageGetter
*/


/**
* Create list adapter
*
* @param inflater
* @param avatars
* @param imageGetter
*/


/**
* Activity to create a comment on a {@link Gist} or {@link Issue}
*/


/**
* Create intent to create a comment
*
* @return intent
*/


/**
* Create intent to create a comment
*
* @param title
* @param subtitle
* @return intent
*/


/**
* Create intent to create a comment
*
* @param title
* @param subtitle
* @param user
* @return intent
*/


/**
* Class to hold settings used to search commits.
*/


/**
* Unit tests for {@link CommitEditorInput}
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Commit editor input class. This class wraps a {@link RepositoryCommit} to be
* viewed in an editor.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Encode HTML
*
* @param html
* @param imageGetter
* @return html
*/


/**
* Model class for the comparison of two commits
*/


/**
* Unit tests of {@link RepositoryCommitCompare}
*/


/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class also provides access to the {@link FileDiff} objects introduced by
* the commit.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link RepositoryCommit}
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Fragment to display a list of {@link Repository} instances
*/


/**
* @param callback
*/
public void onLoaderReset(Loader<List<Repository>> loader) {
// Intentionally left blank


/**
* Base GitHub service class.
*/


/**
* Implements "Open in Editor"
*/


/**
* Credentials wizard page class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Client data containing an authentication key
*/


/** serialVersionUID */


/**
* @return key
*/


/**
* @param key
*/


/**
* @return description
*/


/**
* @param description
*/


/**
* Base handler with helpers for working with selections
*/


/**
* Handler to cherry pick the commit onto the current branch
*/


/**
* Utilities for working with objects that implement {@link IAdaptable}
*/


/**
* Unit tests of {@link RequestException}
*/

// Remove leading newlines

// Remove trailing newlines


/**
* GitHub UI plug-in
*/


/**
* Handle to a {@link String} raw URL
*/


/**
* Utilities for working with {@link HttpRequest} objects
*/


/**
* Is the given request to a URL that can have github.com credentials
* included with the request?
*
* @param request
* @return true if secure, false otherwise
*/


/**
* Activity to display the contents of a file in a commit
*/


/**
* Create intent to show file in commit
*
* @param repository
* @param commit
* @param file
* @return intent
*/
156a162,167

/**
* Get the input stream for this request.
* <p>
* The streams returned by this method will always auto-uncompress any gzip'ed
* responses regardless of the setting of {@link #uncompress(boolean)}.
*/


/**
* Single code element inside a pre element
*/


/**
* Utilities for working with {@link Reference}s
*/


/**
* Is reference a branch?
*
* @param ref
* @return true if branch, false otherwise
*/


/**
* Is reference a tag?
*
* @param ref
* @return true if tag, false otherwise
*/


/**
* Get path of ref with leading 'refs/' segment removed if present
*
* @param ref
* @return full path
*/


/**
* Get short name for ref
*
* @param ref
* @return short name
*/


/**
* Should the given reference be included as valid?
* <p>
* This filters out pull request refs
*
* @param ref
* @return true if valid, false otherwise
*/


/**
* Main activity to compute the net gain/loss on a theoretical stock purchase of
* either a quantity of shares or dollar amount investment.
*/
44a45,95

/**
* Set current item and return whether the item changed
* <p>
* This method does not call {@link #setCurrentItem(int)} unless the item
* parameter differs from the current item
*
* @param item
* @return true if set, false if same
*/


/**
* Set current item, invoke the listener if changes, and return whether the
* item changed
* <p>
* This method does not call {@link #setCurrentItem(int)} unless the item
* parameter differs from the current item
*
* @param item
* @param listener
* @return true if set, false if same
*/


/**
* Schedule a call to {@link #setItem(int)} to occur on the UI-thread
*
* @param item
* @param listener
*/
54a60,65

/**
* Create Git change set using information in given lines
* 
* @param lines
* @param authorOrCommitter
*/

// Handle rename as two operations - a delete and an add
}
// Handle copy as an add


/**
* Command class to delete a stashed commit reference
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Utility for writing reflog entries
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Ref database that throwns the same exception on every call
*/


/**
* Repository that has a bad ref database
*/


/**
* Commit editor input class. This class wraps a {@link RepositoryCommit} to be
* viewed in an editor.
*/


/**
* Unit tests for {@link CommitEditorInput}
*/


/**
* Animation of a refresh menu item
*/


/**
* @param refreshItem
* @return this animation
*/


/**
* Start refresh animation
*
* @param activity
*/


/**
* Stop refresh animation
*/
243a271,274
// Don't allow options before issue loads


/**
* Class to load a list of gauges
*/


/**
* Creates a gauge list loader using the given {@link Context} and {@link GaugesServiceProvider}
*
* @param context
* @param serviceProvider
*/


/**
* Default {@link Gson} factory that uses the {@link GsonBuilder} default
* settings
*/


/**
* Default factory
*/


/**
* Serializable factory of a {@link Gson} instance
*/


/**
* Get {@link Gson} instance to be used for deserialization
*
* @return non-null {@link Gson} instance
*/


/**
* Collection names used
*/


/**
* Properties name used
*/


/**
* Simple id object
*/


/**
* MongoDB-backed chunk table
*/


/**
* MongoDB-backed Git database
*/


/**
* MongoDB-backed object index table
*/


/**
* MongoDB-backed ref table
*/


/**
* MongoDB-backed repository index table
*/


/**
* MongoDB-backed repository table
*/


/**
* MongoDB helpers
*/


/**
* MongoDB write buffer
*/


/**
* Unit tests of {@link EventRepository}
*/


/**
* Model class for repository information contained in an {@link Event}
*/


/**
* Unit tests of {@link OrCommitFilter}
*/


/**
* Append with base URL already containing a '?'
*/


/**
* Append with base URL already containing a '?'
*/


/**
* Append with base URL already containing a '?'
*/


/**
* Append with base URL already containing a '?'
*/
final StringBuilder result) {
// Add '?' if missing and add '&' if params already exist in base url


/**
* Type adapter with section indexing according to English alphabet
*/


/**
* @param activity
*/


/**
* @param context
*/


/**
* @param inflater
*/


/**
* Add items mapped to given letter
*
* @param sectionType
* @param section
* @param itemType
* @param items
* @return this adapter
*/


/**
* Base adapter
*/


/**
* Get text view with given id
*
* @param parentView
* @param childViewId
* @return text view
*/


/**
* Get image view with given id
*
* @param parentView
* @param childViewId
* @return image view
*/


/**
* Get view with given id
*
* @param parentView
* @param childViewId
* @return view
*/


/**
* Set text on text view with given id
*
* @param parentView
* @param childViewId
* @param text
* @return text view
*/


/**
* Create array with given base ids and additional ids
*
* @param base
* @param ids
* @return extended array
*/


/**
* Initialize view by binding indexed child views to tags on the root view
* <p>
* Sub-classes may override this method but must call super
*
* @param view
* @param children
* @return view
*/


/**
* Adapter for lists where only multiple view types are needed
*
*/


/**
* Create adapter
*
* @param activity
*/


/**
* Create adapter
*
* @param context
*/


/**
* Create adapter
*
* @param inflater
*/


/**
* Clear all items
*
* @return this adapter
*/


/**
* Add items to adapter registered as the given type
*
* @param type
* @param items
* @return this adapter
*/


/**
* Get layout id for type
*
* @param type
* @return layout id
*/


/**
* Get child view ids for type
*
* @param type
* @return array of view ids
*/


/**
* Set text on text view with given id
*
* @param parentView
* @param childViewId
* @param text
* @return text view
*/


/**
* Update view for item
*
* @param position
* @param view
* @param item
* @param type
*/


/**
* Section finder helper
*/


/**
* Clear all sections
*
* @return this finder
*/


/**
* Get section for item
* <p>
* The default behavior is to use the first character from the item's
* {@link #toString()} method
*
* @param item
* @return section
*/


/**
* Index items by section returned from {@link #getSection(Object)}
*
* @param items
* @return this finder
*/


/**
* Add items to given section
*
* @param section
* @param items
* @return this finder
*/


/**
* @param <V>
*/


/**
* @param activity
* @param layoutResourceId
*/


/**
* @param context
* @param layoutResourceId
*/


/**
* @param inflater
* @param layoutResourceId
*/


/**
* Unit tests of {@link BlobUtilsTest}
*/


/**
* Filter that tracks the cumulative amount of lines added, edited, and deleted
*/


/**
* Filter that tracks the cumulative amount of files added, edited, and deleted
*/


/**
* Fill this resource by parsing the next object in the reader
*
* @param reader
* @return this resource
* @throws IOException
*/


/**
* Contents of a path in a repository
*/


/**
* Service for accessing repository contents
*
* @see <a href="http://developer.github.com/v3/repos/contents">GitHub contents
*      API documentation</a>
*/


/**
* Unit tests of {@link ContentsService}
*/


/**
* Unit tests of {@link RepositoryContents}
*/


/**
* Mojo that uploads a built resource as a GitHub repository download
* 
* @author Kevin Sawicki (kevin@github.com)
* @goal upload
*/


/**
* Unit tests of {@link DownloadsMojo}
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Import repositories wizard class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Base repository query page
*/


/**
* {@link IDecoratableResource} implements for a {@link Repository} object
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Corrector used to adjust Y position
*/


/**
* Commit editor input class. This class wraps a {@link RepositoryCommit} to be
* viewed in an editor.
*/


/**
* Unit tests for {@link CommitEditorInput}
*/


/**
* Editor page class to display commit notes.
*/


/**
* Repository commit note class.
*/


/**
* Note details page that display the text content of a note in a
* {@link StyledText} widget.
*/


/**
* Notes master details block class.
*/


/**
* Unit tests of {@link AndCommitFilter}
*/


/**
* Unit tests of {@link LastCommitFilter}
*/


/**
* Date formatter for multiple date formats present in the GitHub v2 API.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* GitHub issue comment class.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* GitHub issue comments wrapper class.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Exception denoting no stock quote available for configured sell date
*/


/**
* Exception denoting no stock quote available for configured buy date
*/


/**
* Simple extensions of {@link DelegatingStyledCellLabelProvider} which uses a
* {@link WorkbenchLabelProvider} for use with objects that adapt to
* {@link IWorkbenchAdapter}.
*/
0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
* Copyright 2012 GitHub Inc.
8,10c4,15

* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/**
* 
*/


/**
* Image utilities
*/


/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/


/**
* Assert utilities that all throw {@link IllegalArgumentException} that will
* have a non-null/non-empty message.
*/


/**
* Git exception class.
*/


/**
* Composite filter that will always include every commit but still calls the
* {@link RevFilter#include(RevWalk, RevCommit)} method on each filter that has
* been added to this filter. Most often used when you want to ensure that a
* collection of filters are each always called on every commit in a
* {@link RevWalk}.
*/


/**
* Composite filter that only includes commits that are included by every child
* filter that has been added to this filter.
*/


/**
* Person filter that includes commits where a {@link PersonIdent} matches the
* name and e-mail address of a commit's author.
*/


/**
* Filter that collects author {@link PersonIdent} objects for each commit
* visited.
*/


/**
* Commit message pattern filter that includes commits that contain a valid
* Gerrit {@link #CHANGE_ID_REGEX}.
*/


/**
* Commit filter that increments a counter on each commit visited.
*/


/**
* Base commit filter class with utility methods to be used by sub-classes.
*/


/**
* Commit filter that adds each visited commit to a list that can be accessed.
*/


/**
* Base filter that includes commits where a pattern can be found in a commit's
* full message.
*/


/**
* Person filter that includes commits where a {@link PersonIdent} matches the
* name and e-mail address of the committer of a commit.
*/


/**
* Filter that collects committer {@link PersonIdent} objects for each commit
* visited.
*/


/**
* 
*/


/**
* Filter that stops including commits after a certain number of commits are
* considered. This class should be last in an {@link AndCommitFilter} if you
* want to only limit matched commits and not just all visited commits.
*/


/**
* Composite filter that only includes commits that are included by at least one
* child filter that has been added to this filter. This filter stops matching
* against child filters when the first child filter matches the current commit.
*/


/**
* Commit filter that includes commits that match the range of number of
* parents.
*/


/**
* Base commit filter class that includes commits where a configured pattern can
* be found.
*/


/**
* 
*/


/**
* Base commit filter that contains utility methods for matching the configured
* {@link PersonIdent}.
*/


/**
* Commit filter that stores a {@link TreeSet} of persons encountered while
* visiting commits.
*/


/**
* Commit message pattern filter that includes commit that have a Signed-off-by
* line for a person.
*/


/**
* Commit service class
*/


/**
* Base service class for working with a {@link Repository}
*/


/**
270a288,298
}


/**
* Set checked state of {@link CheckBox} with given view id
*
* @param childViewId
* @param checked
* @return check box
*/


/**
* Parent filter for adding child {@link CommitDiffEditFilter} filters
* <p>
* This is an optimization when using multiple {@link CommitDiffEditFilter}
* instances in a single {@link RevWalk} so the {@link TreeWalk} between the
* current commits and its parent(s) only has to be performed once per commit
* visited.
*/


/**
* Parent filter that invokes
* {@link #include(org.eclipse.jgit.revwalk.RevCommit, java.util.Collection)} on
* all child filters ignoring the return value
*/


/**
* Replace with HEAD revision action
*/


/**
*
*/
38a39,52

/**
* Factory to create campaign
*/


/**
* Create campaign for result
*
* @param syncResult
* @return campaign
*/
50a66,70

/**
* Create campaign for result
*
* @param syncResult
*/
83a104,106

/**
* Cancel campaign
*/


/**
* Content provider adapter that does nothing
*/


/**
* Sync adapter
*/


/**
* Create sync adapter for context
*
* @param context
*/


/**
* Sync adapter service
*/


/**
* Utilities for creating a share intent
*/


/**
* Create intent with subject and body
*
* @param subject
* @param body
* @return intent
*/


/**
* Verify 'Content-Type' header
*
* @throws Exception
*/


/**
* Verify 'Content-Type' header
*
* @throws Exception
*/


/**
* Represents the "Submodules" node
*/


/**
* Issue model with comments
*/


/** serialVersionUID */


/**
* Create wrapper for issue and comments
*
* @param issue
* @param comments
*/


/**
* Create empty wrapper
*/


/**
* @return issue
*/


/**
* Unit tests of {@link LockFile}
*/
6a7,9

/**
* Suggestions provider for recently searched for repository queries
*/


/**
* Save query to history
*
* @param context
* @param query
*/
14a26,30

/**
* Clear query history
*
* @param context
*/


/**
* Create suggestions provider for searched for repository queries
*/


/**
* Fragment to load a list of GitHub organizations
*/


/**
* View holder to display a user/organization
*/


/**
* Create org view holder
*
* @param view
* @param context
*/


/**
* Date formatter for multiple date formats present in the GitHub v2 API.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Get child view
*
* @param childViewIndex
* @param childViewClass
* @return child view
*/


/**
* Set child view as gone or visible
*
* @param childViewIndex
* @param gone
* @return child view
*/


/**
* Set the checked state of the {@link CompoundButton} with at index
*
* @param parentView
* @param childViewIndex
* @param checked
* @return check box
*/
14a14,16

/**
* Create account authenticator service
*/

// actionSuffix = e.g. "repos.VIEW"


/**
* Handler to blame a path on a selected commit
*/


/**
* Get client with description
*
* @param description
* @return client or null if none found matching description
* @throws IOException
*/


/**
* Container for all registered API clients
*/


/** serialVersionUID */


/**
* @return clients
*/


/**
* @param clients
*/


/**
* Commit editor input class. This class wraps a {@link RepositoryCommit} to be
* viewed in an editor.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests for {@link CommitEditorInput}
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Editor part for viewing an issue's labels.
*/


/**
* GitHub issue task editor attribute part that display labels and milestone
* attribute editors.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Test case utilities
*/


/**
* Show annotation action class.
*/


/**
* Show annotation action handler
*/


/**
* Unit tests of {@link LineHistoryCommand}
*/


/**
* Annotate command for building a {@link Revision} list for a file path.
*/


/**
* Line class that spans one or more continuous revisions.
*/


/**
* Class containing all the lines present in a file revision.
*/


/**
* Class to assemble the history of every line in every revision of a file.
*/


/**
* Determines when revision building should continue as each revision with line
* history is generated.
*/


/**
* Register a hit to this cache
*
* @return hit count
*/


/**
* Register a miss to this cache
*
* @return miss count
*/


/**
* @return hits
*/


/**
* @return misses
*/


/**
* Reset stats tracked for cache hits and misses
*
* @return this cache
*/


/**
* Verify cache stats reset
*
* @throws Exception
*/


/**
* Watch icon
*/


/**
* Team icon
*/


/**
* Code icon
*/


/**
* Commit icon
*/


/**
* Person icon
*/


/**
* Expand templated URI with values varargs
*/


/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class also provides access to the {@link FileDiff} objects introduced by
* the commit.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Commit editor input class. This class wraps a {@link RepositoryCommit} to be
* viewed in an editor.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Activity to view a file on a branch
*/


/**
* Create intent to show file in commit
*
* @param repository
* @param branch
* @param file
* @param blobSha
* @return intent
*/


/**
* Adapter to display a source code tree
*/


/**
* @param activity
*/


/**
* @param context
*/


/**
* Set root folder to display
*
* @param root
*/


/**
* Dialog to select a branch or tag
*/


/**
* Create dialog helper to display refs
*
* @param activity
* @param requestCode
* @param repository
* @param service
*/


/**
* Show dialog with given reference selected
*
* @param selectedRef
*/


/**
* Dialog fragment to select a branch or tag
*/


/**
* Get selected reference from results bundle
*
* @param arguments
* @return user
*/


/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param choices
* @param selectedChoice
*/


/**
* Utilities for working with {@link Reference}s
*/


/**
* Is reference a branch?
*
* @param ref
* @return true if branch, false otherwise
*/


/**
* Is reference a tag?
*
* @param ref
* @return true if tag, false otherwise
*/


/**
* Get path of ref with leading 'refs/' segment removed if present
*
* @param ref
* @return full path
*/


/**
* Get short name for ref
*
* @param ref
* @return short name
*/


/**
* Should the given reference be included as valid?
* <p>
* This filters out pull request refs
*
* @param ref
* @return true if valid, false otherwise
*/


/**
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Operation that updates a repository's submodules
*/


/**
* Operation that syncs a repository's submodule configurations
*/


/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/


/**
* Command to sync submodule configuration
*/


/**
* Command to update selected submodules
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Command class to stash changes in the working directory and index.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Dropdown list adapter to display orgs. and other context-related activity links
*/


/**
* Action for Gists
*/


/**
* Action for the issues dashboard
*/


/**
* Action for issues filter
*/


/**
* Create adapter with initial orgs
*
* @param context
* @param orgs
* @param avatarHelper
*/


/**
* Is the given position an org. selection position?
*
* @param position
* @return true if org., false otherwise
*/


/**
* Get action at given position
*
* @param position
* @return action id
*/


/**
* Set orgs to display
*
* @param orgs
* @return this adapter
*/


/**
* @param selected
* @return this adapter
*/


/**
* @return selected
*/


/**
* Helpers for common dates
*/


/**
* Request class for retrieving historical stock quotes from the Google Finance
* API
*/


/**
* Unit tests of {@link DateUtils}
*/


/**
* Unit tests of {@link StockQuoteRequest}
*/


/**
* Unit tests of {@link CommitCommand}
*/


/**
* Unit tests of {@link RequestError} class
*/


/**
* Source viewer to display one or more file differences using standard editor
* colors and fonts preferences.
*/


/**
* Service class for getting and list gists.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link MilestoneService}
*/


/**
* Represents the "Submodules" node
*/


/**
* Command class to stash changes in the working directory and index in a
* commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/


/**
* Unit tests of {@link StashCreateCommand}
*/


/**
* Import repositories wizard class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Base HTTP-based task repository settings page
*/


/**
* Checkout pull request handler
*/


/**
* Task editor section to view commits attached to a pull request
*/


/**
* Handler class that fetches changes from a selected pull request
*/


/**
* NLS
*/


/**
* Pull request adapter
*/


/**
* Pull request commit adapter
*/


/**
* Pull request connector UI
*/


/**
* Adds the files from a pull request's commits to the context when it is
* activated.
*/


/**
* GitHub pull request repository query page class.
*/


/**
* Pull request task repository settings page.
*/


/**
* Editor page for GitHub pull requests.
*/


/**
* Pull request task editor page factory class.
*/


/**
* NLS for Mylyn GitHub Core
*/


/**
* GitHub pull request attributes
*/


/**
* Pull request composite that includes commits
*/


/**
* GitHub pull request connector.
*/


/**
* Enumeration of task operations
*/


/**
* GitHub issue task data handler
*/


/**
* Pull request utilities
*/


/**
* Adapter for {@link android.text.TextWatcher} interface
*/


/**
* Helper to set an error message on a {@link EditText} when the field is empty and the view loses focus
*/

// Skip over code element

// Ignore if last character is a newline


/**
* Label comparator using case-insensitive name comparisons.
* 
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Unit tests of {@link BranchProjectTracker}
*/


/**
* Search unit test suite
*/


/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/


/**
* Base operation that supports adding pre/post tasks
*/


/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* Generator that visits all submodule entries found in the index tree
*/


/**
* Status class containing the type, path, and commit id of the submodule.
*/


/**
* Enumeration of different statuses that a submodule can be in
*/


/**
* Stores Avatars
*/


/**
* Diff editor page class.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/


/**
* GSON instance to use for all request
*/


/**
* Create gauges service
*
* @param username
* @param password
*/


/**
* Create gauges service
*
* @param apiKey
*/


/**
* Execute request
*
* @param request
* @return request
* @throws IOException
*/


/**
* Get all gauges
*
* @return non-null but possibly empty list of gauges
* @throws IOException
*/


/**
* Get content for gauge id
*
* @param gaugeId
* @return non-null but possibly empty list of page content information
* @throws IOException
*/


/**
* Get referrers for gauge id
*
* @param gaugeId
* @return non-null but possibly empty list of referrers
* @throws IOException
*/


/**
* Create client data with description
*
* @param description
* @return created client data
*/


/**
* Base handler with helpers for working with selections
*/


/**
* Handler to cherry pick the commit onto the current branch
*/


/**
* Utilities for working with objects that implement {@link IAdaptable}
*/


/**
* Diff editor page class.
*
* @author Kevin Sawicki (kevin@github.com)
*/


/**
* Parses a {@link RepositoryIssue} from a {@link Uri}
*/


/**
* Parse a {@link RepositoryIssue} from a non-null {@link Uri}
*
* @param uri
* @return {@link RepositoryIssue} or null if none found in given {@link Uri}
*/


/**
* Unit tests of {@link IssueUriMatcher}
*/


/**
168a187,193
}


/**
* @return ringBounds
*/


/**
* Transport protocol contributed via service provider
*/


/**
* Unit tests of {@link LongestAuthorNameFilter}
*/


/**
* Filter to track the commit(s) with the longest author name
*/


/**
* Create intent to browse issue filters
*
* @return intent
*/


/**
* Create exception from {@link JsonParseException}
*
* @param cause
*/


/**
* Unit tests for resolving reflog-based revisions
*/
0a1,352

/******************************************************************************
*  Copyright (c) 2011 GitHub Inc.
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*
*  Contributors:
*    Kevin Sawicki (GitHub Inc.) - initial API and implementation
*****************************************************************************/


/**
* Service for accessing, creating, and deleting repositories downloads.
* 
* @see <a href="http://developer.github.com/v3/repos/downloads">GitHub
*      downloads API documentation</a>
*/
0a1,733

/*******************************************************************************
*  Copyright (c) 2011 GitHub Inc.
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*
*  Contributors:
*    Kevin Sawicki (GitHub Inc.) - initial API and implementation
*******************************************************************************/


/**
* Issue service class for listing, searching, and fetching {@link Issue}
* objects using a {@link GitHubClient}.
* 
* @see <a href="http://developer.github.com/v3/issues">GitHub Issues API
*      documentation</a>
*/


/**
* Command class to stash changes in the working directory and index.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Unit tests of {@link StashCreateCommand}
*/



/**
* Unit tests of {@link BugSetFilter} and {@link BugFilter}
*/



/**
* Filter that matches bugs referenced in commit messages.
*/



/**
* Filter that collects all bugs referenced in commit messages.
*/



/**
* {@link IDecoratableResource} implements for a {@link Repository} object
*/



/**
* Diff editor page class for displaying a {@link DiffViewer}.
*/



/**
* Pull request merge status model class.
*/



/**
* Team model class.
*/



/**
* Service class for working with organization teams
*/



/**
* 
*/



/**
* Model class containing line differences introduced by a commit
*/



/**
*
*/

23a24,28

/**
* GitHub task attribute mapper class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Diff editor page class for displaying a {@link DiffViewer}.
*/



/**
* Milestone comparator using case-insensitive name comparisons.
*/



/**
* Section containing commit message, author, and committer controls.
*/



/**
* Configure list after view has been created
*
* @param activity
* @param listView
*/



/**
* Transport protocol contributed via service provider
*/



/**
* Unit tests of {@link RepositoryCommit}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class also provides access to the {@link FileDiff} objects introduced by
* the commit.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Operation to revert a commit
*/



/**
* Issue event model class
*/



/**
* Unit tests of {@link IssueEvent}
*/

96a67,81

/**
* Scale value used based on map image dimensions
*/



/**
* Correction value used to adjust scaled y position
*/



/**
* Correction value used to adjust scaled x position
*/



/******************************************************************************
10c10

*****************************************************************************/



/**
* GitHub Repository class.
*/



/**
* Repository id
*/



/**
* Interface to provide an ID for a repository. This refers to the unique
* identified of any GitHub repository. This is the owner and name of the
* repository joined by a '/'.
*/



/**
* 
*/



/**
* Activity to authenticate the user against gaug.es
*/



/**
* Matches a {@link User} in an {@link Event}
*/



/**
* Pair of users in an {@link Event}
*/



/**
* Actor in event
*/



/**
* User being acted upon
*/



/**
* Get {@link UserPair} from event
*
* @param event
* @return user or null if event doesn't apply
*/

68a73,77

/**
* Matcher for finding a {@link User} from an {@link Event}
*/



/**
* Start an activity to view the given {@link UserPair}
* <p>
* This method does nothing by default, subclasses should override
*
* @param users
*/



/**
* Unit tests of {@link RecentRepositories}
*/



/**
* Model class for the repositories recently selected under an organization
*/



/**
* Number of repositories retained per organization
*/



/**
* Create a recent repositories cache for the given organization
*
* @param context
* @param organization
*/



/**
* Add repository to recent list
*
* @param repo
* @return this recent list
*/



/**
* Add id to recent list
*
* @param repoId
* @return this recent list
*/



/**
* Persist recent list asynchronously on a background thread
*
* @return this recent list
*/



/**
* Persist recent list
*
* @return this recent list
*/



/**
* Is the given repository in the recent list?
*
* @param repository
* @return true if in recent list, false otherwise
*/



/**
* Is the given repository id in the recent list
*
* @param repositoryId
* @return true if in recent list, false otherwise
*/



/**
* List adapter for searched songs
*/



/**
* Task for search for songs
*/



/**
* Task to add one or more songs to the queue
*/



/**
* Suggestion provider for previous Play searches
*/



/**
* Activity to search for songs and add them to the queue
*/

14a15,17

/**
* Enumeration of task operations
*/


// Use default encoding if no img tags



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Toggles the "Display Latest Branch Commit" preference
*/



/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/



/**
* Base operation that supports adding pre/post tasks
*/



/**
* Unit tests of {@link BranchProjectTracker}
*/



/**
* Search unit test suite
*/



/**
* Helper class for showing more and more pages of issues
*/



/**
* Next page to request
*/



/**
* All issues retrieved
*/



/**
* Get issues
*
* @return issues
*/



/**
* Get the next page of issues
*
* @return true if more pages
*/



/**
* Create iterator to return given page and size
*
* @param page
* @param size
* @return iterator
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Unit tests of {@link SubmoduleWalk}
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Walker that visits all submodule entries found in a tree
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
* 
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
* 
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Sets the logo on the {@link ActionBar} to the user's avatar.
*
* @param actionBar
* @param user
*/



/**
* Commit editor input class. This class wraps a {@link RepositoryCommit} to be
* viewed in an editor.
*/



/**
* Unit tests for {@link CommitEditorInput}
*/



/**
* Compare with previous revision action handler.
*/



/**
* Compare with previous revision action.
*/



/**
* GitHub issue comment class.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* GitHub issue comments wrapper class.
*
* @author Kevin Sawicki (kevin@github.com)
*/

10a10,12

/**
* Unit tests of client API
*/



/**
161,162c183,184

protected BitmapDrawable fetchAvatar(final String url, final String userId) {
File rawAvatar = new File(avatarDir, userId + "-raw");
251c273

return fetchAvatar(avatarUrl, userId.toString());
276a299,320
private String getAvatarUrl(String id) {
if (!TextUtils.isEmpty(id))
return "https://secure.gravatar.com/avatar/" + id + "?d=404";
else
return null;
}

private String getAvatarUrl(User user) {
String avatarUrl = user.getAvatarUrl();
if (TextUtils.isEmpty(avatarUrl)) {
String gravatarId = user.getGravatarId();
if (TextUtils.isEmpty(gravatarId))
gravatarId = GravatarUtils.getHash(user.getEmail());
avatarUrl = getAvatarUrl(gravatarId);
}
return avatarUrl;
}

private String getAvatarUrl(CommitUser user) {
return getAvatarUrl(GravatarUtils.getHash(user.getEmail()));
}

288,294c332

String avatarUrl = getAvatarUrl(user);
299a338,391

BitmapDrawable loadedImage = loaded.get(userId);
if (loadedImage != null)
return setImage(loadedImage, view);

setImage(loadingAvatar, view, userId);

final String loadUrl = avatarUrl;
new FetchAvatarTask(context) {

@Override
public BitmapDrawable call() throws Exception {
if (!userId.equals(view.getTag(id.iv_avatar)))
return null;

final BitmapDrawable image = getImage(user);
if (image != null)
return image;
else
return fetchAvatar(loadUrl, userId.toString());
}

@Override
protected void onSuccess(final BitmapDrawable image)
throws Exception {
if (image == null)
return;
loaded.put(userId, image);
if (userId.equals(view.getTag(id.iv_avatar)))
setImage(image, view);
}

}.execute();

return this;
}


/**
* Bind view to image at URL
*
* @param view
* @param user
* @return this helper
*/



/**
* Helper to get a gravatar hash for an email
*/



/**
* Length of generated hash
*/



/**
* Algorithm used for hashing
*/



/**
* Charset used for hashing
*/



/**
* Get avatar hash for specified e-mail address
*
* @param email
* @return hash
*/



/**
* Get author of commit
* <p>
* This checks both the {@link RepositoryCommit} and the underlying
* {@link Commit} to retrieve a name
*
* @param commit
* @return author name or null if missing
*/



/**
* Get author date of commit
* <p>
* This checks both the {@link RepositoryCommit} and the underlying
* {@link Commit} to retrieve a name
*
* @param commit
* @return author name or null if missing
*/



/**
* Authentication constants
*/



/**
* Account type
*/



/**
* Account name
*/



/**
* Provider authority
*/



/**
* Activity to edit the title and description for an issue
*/



/**
* Create intent to edit an issue
*
* @param issue
* @return intent
*/



/**
* Id class.
*/



/**
* Pull request discussion model class.
*/



/**
* Loader of stock symbols
*/



/**
* Create {@link GitHubRepositoryName} from URL
* 
* @param url
*            must be non-null
* @return parsed {@link GitHubRepositoryName} or null if it cannot be
*         parsed from the specified URL
*/



/**
* Unit tests of {@link GitHubRepositoryName}
*/



/**
* Unit tests of {@link RepositoryCommit}
*/



/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class computes and provides access to the {@link FileDiff} objects
* introduced by the commit.
*/



/**
* Unit tests of {@link RenameBranchCommand}
*/



/**
* Unit tests of {@link DownloadService}
*/



/**
* Maximum width of decoded bitmap
*/



/**
* Maximum height of decoded bitmap
*/



/**
* Path to decoded bitmap from
*/



/**
* Pre untouched
*/



/**
* Pre space escaped
*/



/**
* Pre tab escaped
*/



/**
* Pre newline escaped
*/



/**
* Pre space, tab, and newline escaped
*/



/**
* Multiple pre elements escaped
*/



/**
* Set whether views should be indented
*
* @param indented
* @return this adapter
*/



/**
* Drag assistant for {@link FileNode} selections in the repositories view
*/

41a49,57

/**
* Create default builder
*
* @return builder
*/



/**
154a189,259
}


/**
* Get resource property as an integer
*
* @param name
* @return integer value or -1 if the property is missing or not a
*         {@link Number}
*/



/**
* Get link property as an integer
*
* @param name
* @return integer value or -1 if the property is missing or not a
*         {@link Number}
*/



/**
* Get link property as a long
*
* @param name
* @return long value or -1 if the property is missing or not a {@link Number}
*/



/**
* Get link property as a boolean
*
* @param name
* @return boolean value or false if the property is missing or not a
*         {@link Boolean}
*/



/**
* Get link property as a {@link String}
*
* @param name
* @return string value of property or null if the property is missing
*/



/**
* Get link property as a {@link Map}
*
* @param name
* @return map value of property of null if the property is missing or not a
*         {@link Map}
*/



/**
* Unit tests of links with additional properties
*/



/**
* Setup method
*
* @throws Exception
*/



/**
* Verify link with additional properties
*
* @throws Exception
*/



/**
* Unit tests of HTML conversions done when rendering markdown
*/



/**
* Single email toggle span is removed
*/



/**
* Multiple email toggle spans are removed
*/



/**
* Email div is transformed into block quote
*/



/**
* Email fragment div is removed and newlines are replaced with br tags
*/



/**
* Email fragment div is removed and newlines are replaced with br tags
*/



/**
* Email fragment div is removed and newlines are replaced with br tags
*/



/**
* Leading break is removed
*/



/**
* Trailing break is removed
*/



/**
* Leading & trailing breaks are removed
*/



/**
* Leading & trailing breaks are removed
*/



/**
* Leading whitespace is removed
*/



/**
* Trailing whitespace is removed
*/



/**
* Leading & trailing whitespace is removed
*/



/**
* Pre untouched
*/



/**
* Pre space escaped
*/



/**
* Pre tab escaped
*/



/**
* Pre newline escaped
*/



/**
* Pre space, tab, and newline escaped
*/



/**
* Multiple pre elements escaped
*/



/**
* HTML Utilities
*/



/**
* Get last span of given kind
*
* @param text
* @param kind
* @return span
*/



/**
* Encode HTML
*
* @param html
* @return html
*/



/**
* Encode HTML
*
* @param html
* @param imageGetter
* @return html
*/



/**
* Remove email fragment 'div' tag and replace newlines with 'br' tags
*
* @param input
* @return input
*/



/**
* Remove leading and trailing whitespace
*
* @param input
*/



/**
* Format given HTML string so it is ready to be presented in a text view
*
* @param html
* @return formatted HTML
*/


// Remove e-mail toggle link


// Remove signature


// Replace div with e-mail content with block quote


// Remove hidden div


// Replace paragraphs with breaks



/**
* Represents the "Submodules" node
*/



/**
* Base news fragment class with utilities for subclasses to built on
*/



/**
* Matcher for finding an {@link Issue} from an {@link Event}
*/



/**
* Helper to find an issue to open for an event
*/



/**
* Get issue from event
*
* @param event
* @return issue or null if event doesn't apply
*/



/**
* Unit tests of {@link CommitEditor}
*/



/**
* Client class for interacting with GitHub HTTP/JSON API.
*
* @author Kevin Sawicki (kevin@github.com)
*/


// Don't notify listeners or change pager if org hasn't changed



/**
* Fragment to display the members of an org.
*/

this.org = org;
// Only hard refresh if view already created and org is changing

33a51,77

/**
* This methods clears any fragments that may not apply to the newly selected org.
*
* @return this adapter
*/



/**
* Fragment to display a list of followers
*/



/**
* Holder for a user view that appears in a list
*/



/**
* Create user view holder
*
* @param view
* @param avatarHelper
*/



/**
* Unit tests of iterating over next resource links
*/



/**
* Setup method
*
* @throws Exception
*/



/**
* Get the next resource
*
* @throws Exception
*/



/**
* Does this resource have a link to the next resource?
*
* @return true if link exists for the next resource, false otherwise
*/



/**
* Load the next resource
*
* @return next resource
* @throws IOException
*/



/**
* Gist task data handler class.
*/



/**
* Number of unique pin/ring representations
*/



/**
* Utilities for writing multiple HTTP requests
*/

//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//



/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/



/**
* Utility adapter that supports adding headers and footers
*
* @param <E>
*/



/**
* Create header footer adapter
*
* @param view
* @param adapter
*/



/**
* Add header
*
* @param view
* @param data
* @param isSelectable
* @return this adapter
*/



/**
* Add header
*
* @param view
* @param data
* @param isSelectable
* @return this adapter
*/



/**
* Get serializable extra from activity's intent
*
* @param name
* @return extra
*/



/**
* Progress dialog in Holo Light theme
*/



/**
* Create progress dialog with given message
*
* @param context
* @param resId
*/



/**
* Create progress dialog with given message
*
* @param context
* @param message
*/

if (shown)
// List has already been shown so hide/show the empty view with
// no fade effect



/**
* Diff editor page class for displaying a {@link DiffViewer}.
*/



/**
* Helpers on top of {@link SpannableStringBuilder}
*/



/**
* Append text and span to end of this text
*
* @param text
* @param span
* @return this text
*/



/**
* Append text in bold
*
* @param text
* @return this text
*/



/**
* Append given date in relative time format
*
* @param date
* @return this text
*/



/**
* Alert dialog using the Holo Light theme
*/



/**
* Create alert dialog
*
* @param context
*/



/**
* Dialog fragment to present labels where one or more can be selected
*/



/**
* Arguments key for the selected items
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param choices
* @param selectedChoices
*/

75a87,96

/**
* Create view holder for a {@link Gist}
*
* @param v
* @param maxNumberCount
*/

46a49,64

/**
* Get the value of the key as a {@link String}
*
* @param data
* @param key
* @return value, may be null
* @throws JSONException
*/



/**
* Simple extensions of {@link DelegatingStyledCellLabelProvider} which uses a
* {@link WorkbenchLabelProvider} for use with objects that adapt to
* {@link IWorkbenchAdapter}.
*/



/**
* Unit tests of {@link CommitCommand}
*/



/**
* Task to load a commit by SHA-1 id
*/



/**
* @param context
* @param repository
* @param id
*/



/**
* Activity to display a commit
*/



/**
* Create intent for this activity
*
* @param repository
* @param id
* @return intent
*/



/**
* Fragment to display a list of commits being compared
*/



/**
* Styler for the file diffs introduced in a commit
*/



/**
* Create diff styler
*
* @param resources
*/



/**
* Set files to style
*
* @param files
* @return this styler
*/



/**
* Get styled text for file path
*
* @param file
* @return styled text
*/



/**
* Dialog to display when a revert fails
*/



/**
* Unit tests of {@link WatcherService}
*/



/**
* Service class for dealing with user's watching GitHub repositories.
* 
* @see <a href="http://developer.github.com/v3/repos/watching">GitHub watcher
*      API documentation</a>
*/



/**
* Link properties
*/



/**
* A URI that can be templated
*/



/**
* Language of the target resource
*/



/**
* Secondary key
*/



/**
* A URI that hints about the profile of the target resource
*/



/**
* True if the {@link #href} field is templated, false otherwise
*/



/**
* Human-readable label for the {@link #href}
*/



/**
* Media-type hint for the target resource
*/



/**
* Create link with values
*
* @param href
* @param hreflang
* @param name
* @param profile
* @param templated
* @param title
* @param type
*/



/**
* Resource class
*/



/**
* Create resource from URL
*
* @param url
* @throws IOException
*/

} catch (IOException ignored) {
// Ignored



/**
* Parse resources from current value
*
* @param gson
* @param reader
* @throws IOException
*/



/**
* Parse resource property
*
* @param gson
* @param reader
* @param name
* @throws IOException
*/



/**
* Parse links from current reader's next object value
*
* @param gson
* @param reader
*/



/**
* Get HTTP status code from response
*
* @return code
*/



/**
* Get URI to self
*
* @return URI to self or null if no self link exists
*/



/**
* Get URI to next resource
*
* @return URI to next resource or null if no next link exists
*/



/**
* Get URI of link with name
*
* @param name
* @return URI or null if no link with given name exists
*/



/**
* Get link with name
*
* @param name
* @return link or null if none for given name
*/



/**
* Get resource property as an integer
*
* @param name
* @return integer value or -1 if the property is missing or not a
*         {@link Number}
*/



/**
* Get resource property as a {@link String}
*
* @param name
* @return string value of property or null if the property is missing
*/



/**
* Get embedded resources with given name
*
* @param name
* @return list of resources
*/



/**
* Get all embedded resources
*
* @return iterator over all embedded resources
*/



/**
* Base test case that provides a running HTTP server
*/



/**
* Simplified handler
*/



/**
* Handle request
*
* @param request
* @param response
*/



/**
* Read content
*
* @return content
*/



/**
* Write value
*
* @param value
*/



/**
* Write line
*
* @param value
*/



/**
* Write resource file to response
*
* @param fileName
*/



/**
* Server
*/



/**
* Set up server with handler
*
* @param handler
* @return port
* @throws Exception
*/



/**
* Tear down server if created
*
* @throws Exception
*/



/**
* Unit tests of {@link Resource}
*/



/**
* Setup method
*
* @throws Exception
*/



/**
* Get status code of all resources
*
* @throws Exception
*/



/**
* Get self link href
*
* @throws Exception
*/



/**
* Get link to next resource
*
* @throws Exception
*/



/**
* Get link to find resource
*
* @throws Exception
*/



/**
* Get resource property as integer
*
* @throws Exception
*/



/**
* Get embedded resources
*
* @throws Exception
*/



/**
* Find the maximum number of digits in the given Gist ids
*
* @param gists
* @return max digits
*/


// Set number field to max number size



/**
* Show exception using {@link ErrorHelper#show(android.content.Context, Exception, int)}
* <p>
* This method ensures the {@link Toast} is displayed on the UI thread and so it may be called from any thread
*
* @param e
* @param defaultMessage
*/



/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class also provides access to the {@link FileDiff} objects introduced by
* the commit.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Commit editor input class. This class wraps a {@link RepositoryCommit} to be
* viewed in an editor.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Element factory for saving and restoring the state of a
* {@link CommitEditorInput} instance.
*/



/**
* Unit tests of {@link CommitEditorInputFactory}
*/



/**
* Unit tests of {@link UserUriMatcher}
*/



/**
* Unit tests of {@link RepositoryUriMatcher}
*/



/**
* Verify reading response body for empty 200
*
* @throws Exception
*/



/**
* Verify reading response body for empty 400
*
* @throws Exception
*/



/**
* Verify reading response body for non-empty 400
*
* @throws Exception
*/

} catch (IOException ignored) {
// Ignored



/**
* Pull request marker model class.
*/



/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/



/**
* Unit tests of {@link OAuthService}
*/



/**
* Unit tests of {@link Authorization}
*/



/**
* Unit tests of {@link Application}
*/



/**
* Authorization model class
*/



/**
* Authorized application model class
*/



/**
* Service for interacting with a user's OAUth authorizations
*
* @see <a href="http://developer.github.com/v3/oauth/">GitHub OAuth API
*      documentation</a>
*/



/**
* Styled label provider that wraps a {@link WorkbenchLabelProvider}
*/



/**
* Operation that creates a stashed commit for a repository
*/



/**
* Command to stash current changes in working directory and index
*/



/**
* Interface for container classes that can provide a collection of resources of
* the same type.
* 
* @param <V>
*/



/**
* {@link LinkedList} based resource collector
* 
* @param <V>
*/



/**
* Interface for accepting collections of resources page by page.
* 
* @param <V>
*/



/**
* GitHub API request class.
*/



/**
* Unit test of {@link OrganizationService}
*/



/**
* Unit tests of {@link CommitService}
*/



/**
* Unit tests of {@link DeployKeyService}
*/



/**
* Unit tests of {@link UserService}
*/



/**
* Unit tests of {@link DataService}
*/



/**
* Unit tests of {@link TeamService}
*/



/**
* Unit tests of {@link WatcherService}
*/



/**
* Unit tests of {@link CollaboratorService}
*/



/**
* Unit tests of {@link LineHistoryCommand}
*/



/**
* Annotate command for building a {@link Revision} list for a file path.
*/



/**
* Line class that spans one or more revisions.
*/



/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
*/



/**
* Class containing all the lines present in a file revision.
*/



/**
* Class to assemble the history of every line in every revision of a file.
*/



/**
* Determines when revision building should continue as each revision with line
* history is generated.
*/



/**
* Set drawable on child image view
*
* @param id
* @param drawable
* @return image view
*/



/**
* Get pixels from dps
*
* @param view
* @param dp
* @return pixels
*/



/**
* Get pixels from dps
*
* @param resources
* @param dp
* @return pixels
*/



/**
* Unit tests of {@link RequestException}
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Unit tests of {@link SubmoduleWalk}
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Walker that visits all submodule entries found in a tree
*/



/**
*
*/



/**
* Get the location with the later date
*
* @param location1
* @param location2
* @return location
*/



/**
* Get the latest location trying multiple providers
*
* @param context
* @return latest location set or null if none
*/



/**
* Object id converter. This is required for legacy support for originally
* serializing an ObjectId as a byte[]. The new format supports marshalling as a
* standard lower-case SHA1 hexadecimal string but unmarshalling both byte[] and
* String types.
*/



/**
* Create ObjectId converter
*/



/**
* Unit tests of {@link FetchOperation}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Operation that fetches from a {@link BuildRepository} configuration
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Adapter for a list of news events
*/



/**
* Can the given event be rendered by this view holder?
*
* @param event
* @return true if renderable, false otherwise
*/



/**
* Create list adapter
*
* @param inflater
* @param elements
* @param avatars
*/



/**
* Create list adapter
*
* @param inflater
* @param avatars
*/



/**
* View of a news item
*/



/**
* Avatar image view
*/



/**
* Event text view
*/



/**
* Event icon view
*/



/**
* Event date text view
*/



/**
* Create news events item view
*
* @param view
*/



/**
* Set list shown or progress bar show
*
* @param shown
* @param animate
* @return this fragment
*/

33a41,74

/**
* Create intent to create a comment
*
* @param title
* @param subtitle
* @return intent
*/



/**
* Create intent to create a comment
*
* @param title
* @param subtitle
* @param user
* @return intent
*/



/**
* Action bar subtitle
*/



/**
* Helper to show {@link Toast} notifications
*/



/**
* Show more issues while retaining the current {@link IssuePager} state
*/



/**
28a36,47
* Reset the next page to be requested and clear the current issues
*
* @return this pager
*/


// Set page to count value if first call after call to reset()



/**
* Show more issues while retaining the current {@link IssuePager} state
*/



/**
* Handler to blame a path on a selected commit
*/



/**
* Utilities for dealing with dates and times
*/



/**
* Get relative time for date
*
* @param date
* @return relative time
*/



/**
* Gist repository connector class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Download model class
*/



/**
* Extension of {@link Download} to represent the initiation of a download with
* metadata about where to put the actual content when uploading.
*/



/**
* Service for accessing, creating, and deleting repositories downloads.
*/



/**
* Filter that includes commits that add an empty blob.
* <p>
* The commits included will either add a new file that is empty or edit an
* existing file that was previously not empty but edited to be empty in the
* given commit.
*/



/**
* Filter that includes commits that remove an empty blob
* <p>
* The commits included will either delete an existing empty file or edit an
* existing file that was empty but edited to be no longer empty in the given
* commit.
*/



/**
* Unit tests of {@link EmptyBlobAddFilter} and {@link EmptyBlobRemoveFilter}
*/



/**
* Adapter for {@link android.text.TextWatcher} interface
*/



/**
* Helper to set an error message on a {@link EditText} when the field is empty and the view loses focus
*/



/**
* Unit tests of {@link GistUriMatcher}
*/



/**
* Verify empty uri
*/



/**
* Verify invalid Gist ids in URIs
*/



/**
* Verify public Gist id
*/



/**
* Verify public Gist id
*/



/**
* Unit tests of {@link StashListCommand}
*/



/**
* Command class to list the stashed commits in a repository.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Task to check user following status
*/



/**
* Create task for context and login
*
* @param context
* @param login
*/



/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class also provides access to the {@link FileDiff} objects introduced by
* the commit.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link RepositoryCommit}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Cache of repositories under a given organization
*/



/**
* Creation factory
*/



/**
* Get repositories under given organization
*
* @param org
* @return repositories
*/



/**
* Create repositories cache for a given organization
*
* @param orgs
* @param repos
* @param gitHubAccountProvider
*/



/**
* Helper class to create & upgrade database cache tables
*/



/**
* Version constant to increment when the database should be rebuilt
*/



/**
* Name of database file
*/



/**
* @param context
*/



/**
* Cache of organization under an account
*/



/**
* Create organizations cache with services to load from
*
* @param orgService
* @param userService
*/



/**
* Given a PersistableResource, this class will take support loading/storing it's data or requesting fresh data, as
* appropriate.
*/



/**
* Load or request given resources
*
* @param persistableResource
* @return resource
* @throws IOException
*/



/**
* Request and store given resources
*
* @param persistableResource
* @return resources
* @throws IOException
*/



/**
* Home screen activity
*/



/**
* @param objects
*/



/**
* Activity for browsing repositories associated with a user
*/



/**
* Create intent to show repositories for a user
*
* @param context
* @param user
* @return intent
*/



/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class also provides access to the {@link FileDiff} objects introduced by
* the commit.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link RepositoryCommit}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Get the HTTP method of this request
*
* @return method
*/



/**
* Activity to view a specific issue
*/



/**
* Create intent to show issue
*
* @param context
* @param repository
* @param issue
* @return intent
*/

2479a2480,2488

/**
* Write part header
*
* @param name
* @param filename
* @param type
* @return this request
* @throws IOException
*/

2581a2591,2600

/**
* Write part of a multipart request to the request body
*
* @param name
* @param filename
* @param type
* @param part
* @return this request
* @throws HttpRequestException
*/



/**
* Operation that wraps another operation and handles lock failures
*/



/**
* Unit tests of {@link Contributor}
*/



/**
* Repository contributor model class
*/



/**
* Unit tests for {@link DiffStyleRangeFormatter}
*/



/**
* Diff style range formatter class. This class builds up a list of
* {@link DiffStyleRange} instances as a {@link FileDiff} is being written to an
* {@link IDocument}.
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleWalk}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
* 
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
* 
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Walker that visits all submodule entries found in a tree
*/



/**
* Client class for interacting with GitHub HTTP/JSON API.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Task to comment on a {@link Gist}
*/



/**
* Create task to create a comment
*
* @param context
* @param gistId
* @param comment
*/



/**
* Execute the task and create the comment
*
* @return this task
*/



/**
* Base GitHub Mojo class to be extended.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Path utilities
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Repository utilities
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* String utilities
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link PathUtils}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link RepositoryUtils}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link StringUtils}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Add file to adapter
*
* @param file
*/



/**
* Add file to adapter
*
* @param file
*/



/**
* Add comment to adapter
*
* @param comment
*/



/**
* Style view for line
*
* @param line
* @param view
*/



/**
* Commit file with comments
*/



/**
* Create file
*
* @param file
*/



/**
* Get comments for line
*
* @param line
* @return comments
*/



/**
* Add comment to file
*
* @param comment
* @return this file
*/



/**
* @return file
*/



/**
* Get a bitmap from the image path
*
* @param imagePath
* @return bitmap or null if read fails
*/



/**
* Get a bitmap from the image path
*
* @param imagePath
* @param sampleSize
* @return bitmap or null if read fails
*/



/**
* Get size of image
*
* @param imagePath
* @return size
*/



/**
* Get bitmap with maximum height or width
*
* @param imagePath
* @param width
* @param height
* @return image
*/



/**
* Get bitmap with maximum height or width
*
* @param image
* @param width
* @param height
* @return image
*/



/**
* Get a bitmap from the image file
*
* @param image
* @return bitmap or null if read fails
*/



/**
* Load a {@link Bitmap} from the given path and set it on the given {@link ImageView}
*
* @param imagePath
* @param view
*/



/**
* Load a {@link Bitmap} from the given {@link File} and set it on the given {@link ImageView}
*
* @param image
* @param view
*/



/**
* Round the corners of a {@link Bitmap} using a radius of 10
*
* @param bitmap
* @return rounded corner bitmap
*/



/**
* Round the corners of a {@link Bitmap}
*
* @param bitmap
* @param radius
* @return rounded corner bitmap
*/



/**
* Round the corners of a {@link Bitmap}
*
* @param bitmap
* @param radiusX
* @param radiusY
* @return rounded corner bitmap
*/



/**
* Show annotation action handler
*/



/**
* Show annotation action class.
*/



/**
* Annotate operation
*/



/**
* Annotation information control
*/



/**
* Annotation information control creator
*/



/**
* Annotation revision
*/



/**
* Author colors
*/



/**
* Clone Gist handler class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Adapter for a list of searched for issues
*/



/**
* @param inflater
* @param elements
* @param avatars
*/



/**
* @param inflater
* @param avatars
*/



/**
* Suggestions provider for recently searched for issue queries
*/



/**
* Save query to history
*
* @param context
* @param query
*/



/**
* Clear query history
*
* @param context
*/



/**
* Create suggestions provider for searched for issue queries
*/



/**
* Fragment to display a list of {@link SearchIssue} instances
*/



/**
* @param query
* @return this fragment
*/



/**
* Activity to search issues
*/



/**
* Utilities for working with an {@link EditText}
*/



/**
* A {@link Runnable} that returns a boolean
*/



/**
* Runnable that returns true when run, false when not run
*
* @return true if run, false otherwise
*/



/**
* Bind given runnable to be invoked when the
*
* @param editText
* @param runnable
* @return edit text
*/



/**
* Client data containing an authentication key
*/



/** serialVersionUID */



/**
* @return key
*/



/**
* @param key
*/



/**
* @return description
*/



/**
* @param description
*/



/**
* Unit tests of {@link OAuthService}
*/



/**
* Unit tests of {@link Authorization}
*/



/**
* Unit tests of {@link Application}
*/



/**
* Authorization model class
*/



/**
* Authorized application model class
*/



/**
* Service for interacting with a user's OAUth authorizations
*
* @see <a href="http://developer.github.com/v3/oauth/">GitHub OAuth API
*      documentation</a>
*/



/**
* Viewer to display one or more file differences using standard editor colors
* and fonts preferences.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Task that runs with a progress dialog at the foreground
*
* @param <E>
*/



/**
* Progress dialog last displayed
*/



/**
* @param context
*/



/**
* @param context
* @param executor
*/



/**
* Sub-classes may override but should always call super to ensure the progress dialog is dismissed
*/



/**
* Sub-classes may override but should always call super to ensure the progress dialog is dismissed
*/



/**
* Verify data is send when receiving response headers without first calling
* {@link HttpRequest#code()}
*
* @throws Exception
*/



/**
* Comparator for commit files
*/



/**
* Task to load and store a {@link Gist}
*/



/**
* Create task to refresh the given {@link Gist}
*
* @param context
* @param gistId
*/



/**
* Main activity for Gists
*/



/**
* Verity URI with name
*/



/**
* Verity URI with name
*/

83a84,93

/**
* Get intent extra
*
* @param name
* @return char sequence array
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
* 
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Unit tests of {@link GitChangeLogParser}
*/



/**
* Test duplicate changes filtered from parsed change set list.
* 
* @throws Exception
*/



/**
* A <code>DecorationOverlayIcon</code> is an image descriptor that can be used
* to overlay decoration images on to the 4 corner quadrants of a base image
* descriptor. The four quadrants are {@link IDecoration#TOP_LEFT},
* {@link IDecoration#TOP_RIGHT}, {@link IDecoration#BOTTOM_LEFT} and
* {@link IDecoration#BOTTOM_RIGHT}. Additionally, the overlay can be used to
* provide an underlay corresponding to {@link IDecoration#UNDERLAY}.
*
* This class is modeled after {@link DecorationOverlayIcon} but supports using
* a base image descriptor instead of a base image.
*/



/**
* Unit tests of {@link RecentRepositories}
*/



/**
* Verify bad input
*/



/**
* Verify eviction
*/



/**
* Verify input/output to disk of {@link RecentRepositories} state
*/



/**
* Verify repositories are scoped to organization
*/



/**
* Unit tests of {@link RepositoryEventMatcher}
*/



/**
* Test fork event that has an incomplete forkee in the payload
*/



/**
* Tests of {@link RepositorySearchActivity}
*/



/**
* Create test
*/



/**
* Unit tests of {@link RepositoryUriMatcher}
*/



/**
* Verity empty uri
*/



/**
* Verify URI with no owner
*/



/**
* Verify URI with owner but no name
*/



/**
* Verify URI with owner but no name
*/



/**
* Verify URI with owner but no name
*/



/**
* Verify URI with white-listed owner
*/



/**
* Tests of {@link CreateCommentActivity}
*/



/**
* Create test
*/



/**
* Verify empty comment can't be created
*
* @throws Throwable
*/



/**
* Tests of {@link EditIssueActivity}
*/



/**
* Create test
*/



/**
* Verify save menu is properly enabled/disable depending on the issue have
* a non-empty title
*
* @throws Throwable
*/



/**
* Tests of {@link EditIssuesFilterActivity}
*/



/**
* Create test
*/



/**
* Unit tests of {@link IssueStore}
*/



/**
* Verify issue is updated when re-added
*/



/**
* Unit tests of {@link IssueUriMatcher}
*/



/**
* Verity empty uri
*/



/**
* Verity non-numeric issue number in uri
*/



/**
* Verify http uri
*/



/**
* Verify https uri
*/



/**
* Verify uri with comment fragment
*/



/**
* Tests of {@link LoginActivity}
*/



/**
* Create test for {@link LoginActivity}
*/



/**
* Verify authenticator is registered
*/



/**
* Verify activity was created successfully
*
* @throws Throwable
*/



/**
* Unit tests of {@link UserUriMatcher}
*/



/**
* Verity empty URI
*/



/**
* Verify no name
*/



/**
* Verity URI with name
*/



/**
* Verity URI with name
*/



/**
* Verity URI with name
*/



/**
* Verity URI with name
*/



/**
* Tests of {@link CreateCommentActivity}
*/



/**
* Create test
*/



/**
* Verify empty comment can't be created
*
* @throws Throwable
*/



/**
* Tests of {@link CreateGistActivity}
*/



/**
* Create test
*/



/**
* Create Gist with initial text
*/



/**
* Create Gist with no initial text
*
* @throws Throwable
*/



/**
* Tests of {@link GistFilesViewActivity}
*/



/**
* Create test
*/



/**
* Verify changing pages between gist files
*
* @throws Throwable
*/



/**
* Unit tests of {@link GistStore}
*/



/**
* Verify issue is updated when re-added
*/



/**
* Header text class to render selectable text instead of a label on the form
* heading.
*
* Portions of this code were lifted from the Mylyn TaskEditor class that
* applies a similar technique.
*/



/**
* Utilities for writing multiple HTTP requests
*/

//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//



/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/



/**
* Base service class for working with one or more {@link Repository} instances.
*/



/**
* Commit finder class
*/



/**
* Drawable bar graph
*/



/**
* Unit tests of {@link LsRemoteOperation}
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Operation that gets the latest commit remotely
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Task to remove a song from the queue
*/



/**
* Base class for commands that use a {@link Transport} during execution.
* <p>
* This class provides standard configuration of a transport for options such as
* a {@link CredentialsProvider}, a timeout, and a
* {@link TransportConfigCallback}.
*
* @param <C>
* @param <T>
*/



/**
* Command to delete a tag
*/



/**
* Operation that deletes a tag
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleGenerator}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
* 
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
* 
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Generator that visits all submodule entries found in a tree iterator
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Unit tests of {@link EarliestComparatorTest}
*/



/**
* Unit tests of {@link LatestComparatorTest}
*/



/**
* Import repositories wizard class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* GitHub UI plug-in
*/



/**
* NLS
*/



/**
* Credentials wizard page class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Stores Avatars
*/



/**
* Avatar label displaying an image and label for a avatar url.
*/



/**
* Repository selection wizard page.
*/



/**
* Pager adapter for a gauge
*/



/**
* Create pager adapter
*
* @param context
*
* @param gauge
* @param fragmentManager
*/



/**
* Request that uses a cache
*/



/**
* Start a 'GET' request to the given URL
*
* @param url
* @param cache
* @return request
* @throws HttpRequestException
*/



/**
* Start a 'GET' request to the given URL
*
* @param url
* @param cache
* @return request
* @throws HttpRequestException
*/



/**
* Create cache request
*
* @param url
* @param method
* @param cache
* @throws HttpRequestException
*/



/**
* Create cache request
*
* @param url
* @param method
* @param cache
* @throws HttpRequestException
*/

} catch (IOException ignored) {
// Ignored

protected HttpRequest closeOutput() throws IOException {
// Only attempt to add an etag once



/**
* Cache based solely on the ETag/If-None-Match request/response headers
*/



/**
* One megabyte
*/



/**
* Five megabytes
*/



/**
* Ten megabytes
*/



/**
* Create cache
*
* @param file
* @param size
* @return cache or null if creation failed
*/

} catch (IOException ignored) {
// Ignored

} catch (IOException ignored) {
// Ignored



/**
* Create cache
*
* @param file
* @param size
* @throws IOException
*/



/**
* Get cached etag for connection
*
* @param connection
* @return etag or null if not in cache or connection isn't cacheable
*/



/**
* Get cached stream
*
* @param connection
* @return cached stream or null if not in cache or connection isn't cacheable
*/



/**
* Create stream that will be cached after it is read
*
* @param connection
* @return input stream that will be cached, null if cannot be cached
*/

} catch (IOException ignored) {
// Ignored



/**
* Unit tests of {@link EtagCache}
*/



/**
* Verify request is inserted in cache and later retrievable
*
* @throws Exception
*/



/**
* Verify server that always ignores the If-None-Match header
*
* @throws Exception
*/



/**
* Base test case that provides a running HTTP server
*/



/**
* Simplified handler
*/



/**
* Handle request
* 
* @param request
* @param response
*/



/**
* Read content
* 
* @return content
*/



/**
* Write value
* 
* @param value
*/



/**
* Write line
* 
* @param value
*/



/**
* Server
*/



/**
* Set up server with handler
* 
* @param handler
* @return port
* @throws Exception
*/



/**
* Tear down server if created
* 
* @throws Exception
*/



/**
* Dialog helper to display a list of assignees to select one from
*/



/**
* Create dialog helper to display assignees
*
* @param activity
* @param requestCode
* @param repository
* @param service
*/



/**
* Show dialog with given assignee selected
*
* @param selectedAssignee
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Walker that visits all submodule entries found in a tree
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Unit tests of {@link SubmoduleWalk}
*/



/**
* Pager over Gists
*/



/**
* Node representing a stashed commit in a repository
*/



/**
* Represents the "Stash" node
*/



/**
* Append text in with custom foreground color
*
* @param text
* @param color
* @return this text
*/



/**
* Append text in with custom foreground color
*
* @param text
* @param color
* @return this text
*/



/**
* Operation to add a submodule to a repository
*/



/**
* Command to add a new submodule to a repository
*/



/**
* Wizard to configure a new submodule
*/



/**
* Wizard page to configure the path of a submodule
*/



/**
* Unit tests of {@link RequestError} class
*/



/**
* Represents array of any type as list of objects so we can easily iterate over it
* @param array of elements
* @return list with the same elements
*/

result = Arrays.asList((Object[]) array);
// Arrays of the primitive types can't be cast to array of Object, so this:



/**
* Append list parameter
*
* @throws Exception
*/



/**
* Tests of {@link EditIssueActivity}
*/



/**
* Create test
*/



/**
* Repository item view with a recent indicator
*/



/**
* Recently view label
*/



/**
* Create item view
*
* @param view
*/



/**
* Clone Gist handler class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Commit match class.
*/



/**
* Commit search dialog page class.
*/



/**
* Pattern constructor utilities to localize warnings from using internal
* {@link PatternConstructor} class.
*/



/**
* Repository match class.
*/



/**
* Open commit action
*/



/**
* Commit selection dialog
*/



/**
* Commit command handler
*/



/**
* Create branch handler
*/



/**
* Create tag handler
*/



/**
* Section containing commit message, author, and committer controls.
*/



/**
* Base handler for working with a {@link TaskData} selection
*/



/**
* Callback for resolving a repository
*/



/**
* Core task attribute mapper
*/



/**
* Base repository connector
*/



/**
* Core task data handler
*/



/**
* GitHub task attribute metadata
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Helper to set error text when {@link EditText} is blank
*/



/**
* Task to edit an issue's title and/or body
*/



/**
* Create task to edit a milestone
*
* @param activity
* @param repositoryId
* @param issueNumber
*/



/**
* Edit issue
*
* @param title
* @param body
* @return this task
*/



/**
* Editor part for viewing an issue's labels.
*/



/**
* Base commit name
*/



/**
* Append text in bold
*
* @param text
* @param color
* @return this text
*/



/**
* Fragment to display a list of commits being compared
*/



/**
* Activity to display a comparison between two commits
*/



/**
* Create intent for this activity
*
* @param repository
* @param base
* @param head
* @return intent
*/



/**
* Adapter to display a list of files changed in commits
*/



/**
* @param viewId
* @param inflater
*/



/**
*
*/



/**
* File name text
*/



/**
* Directory text
*/



/**
* Diff text
*/



/**
* @param view
*/

String login = id.substring(0, slash);
// Use actor if it matches login parsed from repository id



/**
* Task to compare two commits
*/



/**
* @param context
* @param repository
* @param base
* @param head
*/



/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/



/**
* Store of commits
*/



/**
* Create commit store
*
* @param service
*/



/**
* Get commit
*
* @param repo
* @param id
* @return commit or null if not in store
*/



/**
* Add commit to store
*
* @param repo
* @param commit
* @return commit
*/



/**
* Refresh commit
*
* @param repo
* @param id
* @return refreshed commit
* @throws IOException
*/



/**
* Pager over commits
*/



/**
* Create pager
*
* @param repository
* @param store
*/



/**
* Base operation that logs to a configured {@link TaskListener} instance
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/



/**
* GSON instance to use for all request
*/



/**
* Create gauges service
*
* @param username
* @param password
*/



/**
* Create gauges service
*
* @param apiKey
*/



/**
* Execute request
*
* @param request
* @return request
* @throws IOException
*/



/**
* Get all gauges
*
* @return non-null but possibly empty list of gauges
* @throws IOException
*/



/**
* Get content for gauge id
*
* @param gaugeId
* @return non-null but possibly empty list of page content information
* @throws IOException
*/



/**
* Get referrers for gauge id
*
* @param gaugeId
* @return non-null but possibly empty list of referrers
* @throws IOException
*/



/**
* Create client data with description
*
* @param description
* @return created client data
*/

23a24,26

/**
* GitHub task attribute mapper class.
*/



/**
* Contents of a path in a repository
*/



/**
* Service for accessing repository contents
*
* @see <a href="http://developer.github.com/v3/repos/contents">GitHub contents
*      API documentation</a>
*/



/**
* Unit tests of {@link ContentsService}
*/



/**
* Unit tests of {@link RepositoryContents}
*/



/**
* Raise {@link HttpRequestException} during request
*
* @throws Exception
*/



/**
* Filter to track the commit(s) with the longest author name
*/



/**
* Unit tests of {@link ShortestAuthorNameFilter}
*/

synchronized (UPDATE_COUNT) {
// Don't update the account if the account was successfully updated
// while the lock was being waited for



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Walker that visits all submodule entries found in a tree
*/



/**
* A class used to execute a submodule sync command.
* 
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Unit tests of {@link SubmoduleWalk}
*/



/**
* @return name
*/



/**
* @return content
*/



/**
* @return wrap
*/



/**
* Set whether lines should wrap
*
* @param wrap
* @return this editor
*/



/**
* Bind {@link Object#toString()} to given {@link WebView}
*
* @param name
* @param provider
* @return this editor
*/



/**
* Toggle line wrap
*
* @return this editor
*/

27a31,45

/**
* Preference to wrap lines of code
*/



/**
* Get code browsing preferences
*
* @param context
* @return preferences
*/



/**
* Report showing information between two releases
*/



/**
* Assignee area
*/



/**
41c51,66

* Filter state text view
*/



/**
* Filter labels text view
*/



/**
* Filter milestone text view
*/



/******************************************************************************
10c10

*****************************************************************************/



/**
* GitHub Repository class.
*/



/**
* Repository id
*/



/**
* Interface to provide an ID for a repository. This refers to the unique
* identified of any GitHub repository. This is the owner and name of the
* repository joined by a '/'.
*/



/**
* 
*/



/**
* Show indeterminate progress dialog with given message
*
* @param resId
*/



/**
* Task to create a {@link Gist}
*/



/**
* Create task that creates a {@link Gist}
*
* @param context
* @param description
* @param isPublic
* @param name
* @param content
*/



/**
* Create the {@link Gist} with the configured values
*/



/**
* Unit tests of {@link GistUrlMatcher}
*/



/**
* Verify issue URL matching provides accurate Gist ids
*/



/**
* Verify issue URL matching provides accurate Gist ids
*/



/**
* Unit tests of {@link IssueUrlMatcher}
*/



/**
* Verify issue URL matching provides accurate issue numbers
*/



/**
* Verify issue URL matching provides accurate issue numbers
*/



/**
* Base URL matcher with utilities for sub-classes to use
*/



/**
* Is given input URL a match?
* <p>
* This method ignores null and empty URLs and does not reset the matcher with them
*
* @param url
* @param matcher
* @return true if matcher matches, false otherwise
*/



/**
* Matcher for gist URLS that provides the Gist id matched
* <p>
* This class is not thread-safe
*/



/**
* Get Gist id from URL
*
* @param url
* @return gist id or null if the given URL is not to a Gist
*/



/**
* Matcher for issue URLS that provides the issue number matched
* <p>
* This class is not thread-safe
*/



/**
* Get issue number from URL
*
* @param url
* @return issue number of -1 if the given URL is not to an issue
*/



/**
* Represents the "Submodules" node
*/



/**
* GitHub issue task editor attribute part that display labels and milestone
* attribute editors.
*/



/**
* Programming languages
*/



/**
* URL utilities
*/

8a9,11

/**
* Utilities for displaying toast notifications
*/



/**
* Unit tests for resolving reflog-based revisions
*/



/**
* Base fragment capable of receiving dialog callbacks
*/



/**
* Is this fragment usable from the UI-thread
*
* @return true if usable, false otherwise
*/

public void onDialogResult(int requestCode, int resultCode, Bundle arguments) {
// Intentionally left blank


/*
* Copyright 2012 GitHub Inc.
8,10c4,15

* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/



/**
* Fragment to display list of recent traffic
*/



/**
* View holder for a {@link PageContent} item
*/



/**
* Fragment to display a list of {@link Referrer} instances
*/



/**
* Fragment to load page content information for a {@link Gauge}
*/



/**
* View holder for a traffic entry
*/



/**
* Activity to view a specific {@link Gauge}
*/



/**
* View holder for a {@link Referrer}
*/



/**
* Content entry for a {@link Gauge}
*/



/**
* Container for all {@link Gauge} contents
*/



/**
* Collection of {@link Gauge} referrers
*/



/**
* Referrer to a page on a {@link Gauge}
*/



/**
* Verify URI with white-listed owner
*/



/**
* Loader that support throwing an exception when loading in the background
*
* @param <D>
*/



/**
* Create loader for context and seeded with initial data
*
* @param context
* @param data
*/



/**
* @return exception
*/



/**
* Clear the stored exception and return it
*
* @return exception
*/



/**
* Load data
*
* @return data
* @throws Exception
*/

31a34,38

/**
* List items provided to {@link #onLoadFinished(Loader, List)}
*/



/**
* Set the list to be shown and stop the refresh animation
*/



/**
* Get exception from loader if it provides one by being a {@link ThrowableLoader}
*
* @param loader
* @return exception or null if none provided
*/

45a47,63

/**
* Measure the width of the given id field
*
* @param gists
* @param gistId
* @return id width
*/

69a75,84

/**
* Gist id field
*/



/**
* Width of id column of in Gist list
*/



/**
* Report showing information for a repository's complete history
*/



/**
* Verify save menu is properly enabled/disable depending on the issue have
* a non-empty title
* 
* @throws Throwable
*/



/**
* Simple extensions of {@link DelegatingStyledCellLabelProvider} which uses a
* {@link WorkbenchLabelProvider} for use with objects that adapt to
* {@link IWorkbenchAdapter}.
*/



/**
* Mojo which copies files to a GitHub repository branch. This directly uses the
* GitHub data API to upload blobs, make commits, and update references and so a
* local Git repository is not used.
* 
* @author Kevin Sawicki (kevin@github.com)
* @goal site
*/



/**
* Handler to blame a path on a selected commit
*/

54a162,167

/**
* Get adapter for gist list
*
* @param items
* @return list adapter
*/

37a37,50

/**
* Shows a toast to the user - can be called from any thread, toast will be displayed using the UI-thread.
* <p>
* The important thing about the delayed aspect of the UI-thread code used by this method is that it may actually
* run <em>after</em> the associated activity has been destroyed - so it can not keep a reference to the activity.
* Calling methods on a destroyed activity may throw exceptions, and keeping a reference to it is technically a
* short-term memory-leak: http://developer.android.com/resources/articles/avoiding-memory-leaks.html
*
* @param activity
* @param resId
*/

String message;
// A 401 is returned as an IOException with this message



/**
* Adapter to display a list of traffic items
*/



/**
* @param inflater
* @param items
* @param selectable
*/



/**
* @param inflater
* @param items
*/



/**
* Adapter to display a list of page contents
*/



/**
* @param inflater
* @param items
* @param selectable
*/



/**
* @param inflater
* @param items
*/



/**
* Adapter to display a list of gauges
*/



/**
* Create adapter to display a list of gauges
*
* @param inflater
* @param gauges
*/



/**
*
*/



/**
* @param inflater
* @param items
* @param selectable
*/



/**
* @param inflater
* @param items
*/



/**
* Utilities for working with objects that implement {@link IAdaptable}
*/



/**
* Base handler with helpers for working with selections
*/



/**
* Handler to cherry pick the commit onto the current branch
*/



/**
* Unit tests of {@link RepositoryCommit}
*/



/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class computes and provides access to the {@link FileDiff} objects
* introduced by the commit.
*/



/**
* Get authentication credentials for pusher subscription to socket and channel
*
* @param socketId
* @param channelName
* @return authentication credentials
* @throws IOException
*/



/**
* Pusher authentication URL
*/



/**
* Pusher that handles authentication for private channels
*/



/**
* Create pusher
*
* @param provider
*/

public GaugesPusher(GaugesServiceProvider provider) {
// Skip certificate validation on Froyo or below

}
// Socket id is required before authentication can begin so wait
// until it comes back on the connection_established event

}
// Terminate if connection drops



/**
* Dialog helper to display a list of assignees to select one from
*/



/**
* Create dialog helper to display assignees
*
* @param activity
* @param requestCode
* @param repository
* @param service
*/



/**
* Get collaborator with login
*
* @param login
* @return collaborator or null if none found with login
*/



/**
* Show dialog with given assignee selected
*
* @param selectedAssignee
*/



/**
* Dialog helper to display a list of milestones to select one from
*/



/**
* Create dialog helper to display milestones
*
* @param activity
* @param requestCode
* @param repository
* @param service
*/



/**
* Get milestones
*
* @return list of milestones
*/



/**
* Show dialog with given milestone selected
*
* @param selectedMilestone
*/



/**
* Get milestone number for title
*
* @param title
* @return number of -1 if not found
*/



/**
* Dialog helper to display a list of possibly selected issue labels
*/



/**
* Create dialog helper to display labels
*
* @param activity
* @param requestCode
* @param repository
* @param service
*/



/**
* Get label with name
*
* @param name
* @return label or null if none with name
*/



/**
* Show dialog with given labels selected
*
* @param selectedLabels
*/



/**
* Property page for elements that can adapt to a {@link Repository} object.
*/



/*******************************************************************************
*  Copyright (c) 2011 Kevin Sawicki
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*  
*******************************************************************************/

0a1,8

/*******************************************************************************
*  Copyright (c) 2011 Kevin Sawicki
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*  
*******************************************************************************/



/*******************************************************************************
*  Copyright (c) 2011 Kevin Sawicki
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*  
*******************************************************************************/



/*******************************************************************************
*  Copyright (c) 2011 Kevin Sawicki
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*  
*******************************************************************************/



/*******************************************************************************
*  Copyright (c) 2011 Kevin Sawicki
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*  
*******************************************************************************/



/*******************************************************************************
*  Copyright (c) 2011 Kevin Sawicki
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*  
*******************************************************************************/



/*******************************************************************************
*  Copyright (c) 2011 Kevin Sawicki
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*  
*******************************************************************************/



/*******************************************************************************
*  Copyright (c) 2011 Kevin Sawicki
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*  
*******************************************************************************/



/*******************************************************************************
*  Copyright (c) 2011 Kevin Sawicki
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*  
*******************************************************************************/



/*******************************************************************************
*  Copyright (c) 2011 Kevin Sawicki
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*  
*******************************************************************************/

protected float calculateScreenX(final Hit hit) {
// Determine the x positions to draw the hit at.


// Take absolute positions on actual map and scale to actual screen size since map image may have been
// scaled



/**
* Calculate the y location of the given hit on the map
*
* @param hit
* @return y coordinate
*/

protected float calculateScreenY(final Hit hit) {
// Determine the x and y positions to draw the hit at.
// This code was taken from the gaug.es site



/**
* Key model class.
*/



/**
*
*/



/**
* NLS for Mylyn GitHub Core
*/



/**
* Command class to list the stashed commits in a repository.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Unit tests of {@link StashListCommand}
*/



/**
* Mojo that uploads a built resource as a GitHub repository download
* 
* @author Kevin Sawicki (kevin@github.com)
* @goal upload
*/



/**
* Unit tests of {@link DownloadsMojo}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Resume the animated view
*/



/**
* Select previous file by scanning backwards from the current position
*
* @param position
* @param item
* @param parent
*/



/**
* Create intent to create a comment on a diff position
*
* @param repository
* @param commit
* @param path
* @param position
* @return intent
*/



/**
* Get file name for commit file
*
* @param file
* @return last segment of commit file path
*/



/**
* Editor page class to display commit notes.
*/



/**
* Repository commit note class.
*/



/**
* Note details page that display the text content of a note in a
* {@link StyledText} widget.
*/



/**
* Notes master details block class.
*/



/**
* Utilities for working with objects that implement {@link IAdaptable}
*/



/**
* Base handler with helpers for working with selections
*/



/**
* Handler to cherry pick the commit onto the current branch
*/



/**
* Editor part for viewing a issue's labels.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Credentials wizard page class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Unit tests of {@link SubmoduleGenerator}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Editor part for viewing a issue's labels.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Dialog to display when a revert failures
*/



/**
* Activity to create a persistent issues filter for a repository
*/



/**
* Create intent for creating an issue filter for the given repository
*
* @param repo
* @return intent
*/



/**
* Tree filter that counts all directories visited
*/



/**
* Unit tests of {@link DirectoryCountFilter}
*/



/**
* Operation that updates a repository's submodules
*/



/**
* Command to update selected submodules
*/



/**
* Unit tests of {@link CommitterDiffFilter}
*/



/**
* Filter that includes commits where the committer name/e-mail address is
* different than the author name/e-mail address.
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleGenerator}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will a
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
*
*/



/**
* Label service class for listing {@link Label} objects in use for a given user
* and repository.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link CommitCursorFilter}
*/



/**
* Cursor filter that retains the latest commit if not included by the wrapped
* filter. This can be useful for retaining the commit to start subsequent walks
* when walking commits in blocks.
*/



/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/



/**
* Resource properties
*/



/**
* Resource links
*/



/**
* Embedded resources
*/



/**
* Unit tests of {@link ChangeIdFilter}
*/



/**
* Header text class to render selectable text instead of a label on the form
* heading.
*
* Portions of this code were lifted from the Mylyn TaskEditor class that
* applies a similar technique.
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Viewer to display {@link FileDiff} objects in a table.
*/



/**
* Activity to share a text selection as a public or private Gist
*/



/**
* gaug.es constants
*/



/**
* Unit tests of {@link LockFile}
*/



/**
* Unit tests of {@link MilestoneService}
*/



/**
* Unit tests of URL encoding done by {@link HttpRequest}
*/



/**
* Activity to create a comment on a commit
*/



/**
* Create intent to create a comment
*
* @param repository
* @param commit
* @return intent
*/



/**
* Task to comment on a commit
*/



/**
* Create task to create a comment
*
* @param activity
* @param repository
* @param commit
* @param comment
*/



/**
* Execute the task and create the comment
*
* @return this task
*/



/**
* Simple extensions of {@link DelegatingStyledCellLabelProvider} which uses a
* {@link WorkbenchLabelProvider} for use with objects that adapt to
* {@link IWorkbenchAdapter}.
*/



/**
* Create graph view from context and attributes
*
* @param context
* @param attrs
*/



/**
* Get intent extra
*
* @param name
* @return boolean array
*/



/**
* Get string extra from activity's intent
*
* @param name
* @return extra
*/


// Add recent header if at least one recent repository


// Advance past all recent repositories


// Register header for first character


// Don't include separator for the last element of the previous
// character


// Don't include separator for last element



/**
* Filter to track the commit(s) with the longest message
*/



/**
* Unit tests of {@link LongestMessageFilter}
*/



/**
* Refresh the fragment's list
*/



/**
* Create adapter for list of items
*
* @param items
* @return list adapter
*/



/**
* Show message via a {@link Toast}
* <p>
* This method ensures the {@link Toast} is displayed on the UI thread and so it may be called from any thread
*
* @param message
*/

35a41,55

/**
* Show {@link Toast} and log given exception
*
* @param e
*/



/**
* An exception occurring when a file cannot be locked
*/



/**
* Get avatar for user
*
* @param user
* @param width
* @return drawable
*/



/**
* Get string from context resources
*
* @param resId
* @return string
*/



/**
* Task to comment on an issue in a repository
*/



/**
* Create task for creating a comment on the given issue in the given repository
*
* @param context
* @param repository
* @param issueNumber
*/



/**
* Create comment
*
* @param comment
* @return this task
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Diff style range formatter class that builds up a list of
* {@link DiffStyleRange} instances as each {@link FileDiff} is being written to
* an {@link IDocument}.
*/



/**
* Source viewer to display one or more file differences using standard editor
* colors and fonts preferences.
*/



/**
* Unit tests for {@link DiffStyleRangeFormatter}
*/



/**
* Unit tests of {@link StashCreateCommand}
*/



/**
* Command class to stash changes in the working directory and index.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Annotate command for building a {@link Revision} list for a file path.
*/



/**
* Line class that spans one or more revisions.
*/



/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
*/



/**
* Class containing all the lines present in a file revision.
*/



/**
* Class to assemble the history of every line in every revision of a file.
*/



/**
* Determines when revision building should continue as each revision with line
* history is generated.
*/



/**
* Unit tests of {@link LineHistoryCommand}
*/



/**
* Annotate command for building a {@link RevisionContainer} for a file path.
*/



/**
* Line class that spans one or more revisions.
*/



/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
*/



/**
* Class containing all the lines present at a file revision.
*/



/**
* Class to assemble the history of every line in every revision of a file.
*/



/**
* Container class for the line history of all revisions of a file.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link LineHistoryCommand}
*/



/**
* Get client with description
*
* @param description
* @return client or null if none found matching description
* @throws IOException
*/



/**
* Container for all registered API clients
*/



/** serialVersionUID */



/**
* @return clients
*/



/**
* @param clients
*/



/**
* Command class to list the stashed commits in a repository.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Unit tests of {@link StashListCommand}
*/



/**
* Utilities for working with {@link IRepositoryQuery} objects.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/



/**
* Unit tests for {@link DiffStyleRangeFormatter}
*/



/**
* Diff style range formatter class that builds up a list of
* {@link DiffStyleRange} instances as each {@link FileDiff} is being written to
* an {@link IDocument}.
*/



/**
* Try to append with wrong number of arguments
*/



/**
* Show annotation action class.
*/



/**
* Show annotation action handler
*/



/**
* Show annotation action class.
*/



/**
* Show annotation action handler
*/



/**
* Utilities for writing multiple HTTP requests
*/

//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//



/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/



/**
* Base HTTP client response with links to other resources
*/



/**
* Transport protocol contributed via service provider
*/



/**
* Unit tests of {@link RepositoryService}
*/



/**
* Html Utilities
*/



/**
* Encode HTML
*
* @param html
* @return html
*/

return html;
// These add extra padding that should be styled explicitly



/**
* Commit utilities
*/



/**
* Commit locator class
*/

for (int i = 0; i < dayCount; i++) {
// Reverse entry order since entries are in reverse chronological order but graph is drawn left to right



/**
* Unit tests of {@link StashCreateCommand}
*/



/**
* Command class to delete a stashed commit reference
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Utility for writing reflog entries
*/



/**
* Command class to stash changes in the working directory and index.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Unit tests of {@link StashCreateCommand}
*/



/**
* Adapter for {@link TextWatcher} interface
*/



/**
* Base client class for interacting with GitHub HTTP/JSON API.
*
* @param <C>
*/



/**
* Multi-part part that is a fixed size input stream
*/



/**
* Base HTTP client response with links to other resources
*/



/**
* Property page for elements that can adapt to a {@link Repository} object.
*/



/**
* Unit tests of {@link BranchProjectTracker}
*/



/**
* Search unit test suite
*/



/**
* Base operation that supports adding pre/post tasks
*/



/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/



/**
* Result codes
*/



/**
* Delete a Gist
*/



/**
* Activity to display an existing Gist
*/



/**
* Result if the Gist was deleted
*/



/**
* Async task to delete a Gist
*/



/**
* Create task
*
* @param context
* @param gistId
*/



/**
* Execute the task with a progress dialog displaying.
* <p>
* This method must be called from the main thread.
*/



/**
* Activity to display a collection of Gists in a pager
*/



/**
* Create an intent to show a single gist
*
* @param gist
* @return intent
*/



/**
* Create an intent to show gists with an initial selected filed
*
* @param gists
* @param position
* @return intent
*/

public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
// Intentionally left blank

public void onPageScrollStateChanged(int state) {
// Intentionally left blank



/**
* Pager adapter for different Gist queries
*/



/**
* Create pager adapter
*
* @param resources
* @param fragmentManager
*/



/**
* Editor page class to display commit notes.
*/



/**
* Repository commit note class.
*/



/**
* Note details page that display the text content of a note in a
* {@link StyledText} widget.
*/



/**
* Notes master details block class.
*/



/**
* Command to drop one or all stashed commits
*/



/**
* Operation to drop a stashed commit
*/



/**
* Unit tests of {@link IssueFilter}
*/



/**
* Verify {@link IssueFilter#equals(Object)}
*/



/**
* Label service class for listing {@link Label} objects in use for a given user
* and repository.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Holder for a Gist header view
*/



/**
* Create view holder
*
* @param view
* @param avatarHelper
*/



/**
* Unit tests of {@link CommitSearchPage}
*/



/**
* Base handler with helpers for working with selections
*/



/**
* Handler to cherry pick the commit onto the current branch
*/



/**
* Utilities for working with objects that implement {@link IAdaptable}
*/



/**
* Action prefix for all intents created
*/



/**
* View Gauge action
*/



/**
* Comparator that sorts by descending number of revisions
*/



/**
* Filter that generates a histogram of the modified files introduced by each
* commit visited.
*/



/**
* Activity container for file revisions
*/



/**
* File histogram storing the number of revisions of each file in a repository
*/



/**
* Repository item view with an optional header
*/



/**
* Header area
*/



/**
* Header text view
*/



/**
* Separator
*/



/**
* Create item view
*
* @param view
*/



/**
* Clear registered header values
*
* @return this adapter
*/



/**
* Register section header
*
* @param repository
* @param previous
* @param text
* @return this adapter
*/



/**
* Repository service class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Editor part for viewing an issue's labels.
*/

} catch (UnsupportedEncodingException ignored) {
// Ignored



/**
* Show message in {@link Toast} with {@link Toast#LENGTH_LONG} duration
*
* @param activity
* @param resId
*/



/**
* Show message in {@link Toast} with {@link Toast#LENGTH_SHORT} duration
*
* @param activity
* @param resId
*/



/**
* Show message in {@link Toast} with {@link Toast#LENGTH_LONG} duration
*
* @param activity
* @param message
*/



/**
* Show message in {@link Toast} with {@link Toast#LENGTH_SHORT} duration
*
* @param activity
* @param message
*/



/**
* Show message in {@link Toast} with {@link Toast#LENGTH_LONG} duration
*
* @param activity
* @param message
* @param args
*/



/**
* Show message in {@link Toast} with {@link Toast#LENGTH_SHORT} duration
*
* @param activity
* @param message
* @param args
*/



/**
* Show message in {@link Toast} with {@link Toast#LENGTH_LONG} duration
*
* @param activity
* @param resId
* @param args
*/



/**
* Show message in {@link Toast} with {@link Toast#LENGTH_SHORT} duration
*
* @param activity
* @param resId
* @param args
*/



/**
* Helper to display a confirmation dialog
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param bundle
*/



/**
* Activity that display dialogs
*/

public void onDialogResult(int requestCode, int resultCode, Bundle arguments) {
// Intentionally left blank



/**
* Base dialog fragment helper
*/



/**
* Dialog message
*/



/**
* Dialog message
*/



/**
* Request code
*/



/**
* Show dialog
*
* @param activity
* @param fragment
* @param arguments
* @param tag
*/



/**
* Create bundle with standard arguments
*
* @param title
* @param message
* @param requestCode
* @return bundle
*/



/**
* Call back to the activity with the dialog result
*
* @param resultCode
*/



/**
* Get title
*
* @return title
*/



/**
* Get message
*
* @return mesage
*/



/**
* Helper to display a single choice dialog
*/



/**
* Arguments key for the selected item
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param choices
* @param selectedChoice
*/



/**
* Adapter for {@link TextWatcher} interface
*/



/**
* Helper to display multiple choice dialogs
*/



/**
* Arguments key for the selected items
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param choices
* @param selectedChoices
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Class to hold settings used to search commits.
*/



/**
* Adapter to display a list of {@link Gist} objects
*/



/**
* Find the maximum number of digits in the given Gist ids
*
* @param gists
* @return max digits
*/



/**
* Measure the width of the given id field
*
* @param maxDigits
* @param gistId
* @return id width
*/



/**
* @param avatarHelper
* @param inflater
* @param elements
*/



/**
* @param avatarHelper
* @param inflater
*/



/**
* View of a {@link Gist} in a list
*/



/**
* Gist id text view
*/



/**
* Gist title text view
*/



/**
* Created date text view
*/



/**
* Number of comments text view
*/



/**
* Number of files text view
*/



/**
* Avatar image view
*/



/**
* Create view of a {@link Gist} in a list
*
* @param view
*/



/**
* Fragment to display a list of Gists
*/



/**
* Avatar helper
*/



/**
* Gist service
*/



/**
* Gist store
*/



/**
* Fragment to display a list of Gists
*/



/**
* Fragment to display a list of public Gists
*/



/**
* Fragment to display a list of Gists
*/



/**
* Unit tests of {@link RepositoryCheckoutOperation}
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Operation that checks out a collection of {@link BuildRepository} instances.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Filter that writes all commits visited to an underlying
* {@link CommitLogWriter}
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link BlameCommand}
*/



/**
* Unit tests of {@link BlameGenerator}
*/



/**
* Blame command for building a {@link Line} list for a file path.
*/



/**
* Generator of author information for lines based on when they were introduced
* into a file.
*/



/**
* Line class that spans one or more continuous revisions.
*/

44a46,51

/**
* Number formatter
*/

41a44,49

/**
* Number formatter
*/

45a47,52

/**
* Number formatter
*/



/**
* Gist task attribute enumeration.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Command to apply the changes in a stashed commit to a repository
*/



/**
* Command to stash current changes in working directory and index
*/



/**
* Operation that creates a stashed commit for a repository
*/



/**
* Operation that applies a stashed commit in a repository
*/



/**
* Programming languages
*/



/**
* URL utilities
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about sobmodule</a>
*/



/**
* Element factory for saving and restoring the state of a
* {@link CommitEditorInput} instance.
*/



/**
* Unit tests of {@link CommitEditorInputFactory}
*/



/**
* Gist model with comments
*/



/** serialVersionUID */



/**
* Create gist with comments
*
* @param gist
* @param comments
*/



/**
* @return gist
*/



/**
* @return comments
*/



/**
* Get files in gist
*
* @return list of files
*/



/**
* Fragment to display a Gist's files and comments
*/



/**
* @param loadListener
* @return this fragment
*/



/**
* @param id
* @return this fragment
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleGenerator}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Tests for {@link Repository}.
*/


/**
* List adapter that colors rows in alternating colors
*
* @param <V>
*/



/**
* @param resources
* @param items
* @param creator
* @param holderFactory
*/



/**
* @param primaryColor
* @param secondaryColor
* @param itemList
* @param c
* @param vhf
*/



/**
* Open commit action
*/



/**
* Commit selection dialog
*/



/**
* Commit command handler
*/



/**
* Create branch handler
*/



/**
* Create tag handler
*/



/**
* Commit search dialog page class.
*/



/**
* Pattern constructor utilities to localize warnings from using internal
* {@link PatternConstructor} class.
*/

if (SDK_INT >= 14)
// On ICS this equivalent to SYSTEM_UI_FLAG_LOW_PROFILE - the dimmed-menu-buttons mode



/**
* Open commit action
*/



/**
* Commit selection dialog
*/



/**
* Commit command handler
*/



/**
* Create branch handler
*/



/**
* Create tag handler
*/



/**
* Commit search dialog page class.
*/



/**
* Pattern constructor utilities to localize warnings from using internal
* {@link PatternConstructor} class.
*/



/**
* Styled label provider that wraps a {@link WorkbenchLabelProvider}
*/



/**
* Command class to delete a stashed commit reference
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Utility for writing reflog entries
*/



/**
* Unit tests of {@link StashCreateCommand}
*/



/**
* Resume the animated view
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Walker that visits all submodule entries found in a tree
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Unit tests of {@link SubmoduleWalk}
*/



/**
* Test of {@link FiltersViewActivity}
*/



/**
* Get resource property as a map
*
* @throws Exception
*/



/**
* Verify link equality
*/



/**
* Field error
*/



/**
* Operation that wraps another operation and handles lock failures
*/



/**
* Register repository to have no bottom separator
*
* @param repository
* @return this adapter
*/



/**
* Transport protocol contributed via service provider
*/



/**
* Commit search dialog page class.
*/



/**
* Pattern constructor utilities to localize warnings from using internal
* {@link PatternConstructor} class.
*/



/**
* Open commit action
*/



/**
* Commit selection dialog
*/



/**
* Commit command handler
*/



/**
* Create branch handler
*/



/**
* Create tag handler
*/

synchronized (UPDATE_COUNT) {
// Don't update the account if the account was successfully updated
// while the lock was being waited for

} catch (IOException e) {
// Retry task if authentication failure occurs and account is
// successfully updated



/**
* Set the text on the text view if it is non-empty and make the view gone if
* it is empty
*
* @param childViewIndex
* @param text
* @return text view
*/



/**
* Set the text on the text view if it is non-empty and make the view gone if
* it is empty
*
* @param parentView
*
* @param childViewIndex
* @param text
* @return text view
*/



/**
* Set relative time span on text view
*
* @param childViewIndex
* @param time
* @return text view
*/



/**
* Set relative time span on text view
*
* @param parentView
* @param childViewIndex
* @param time
* @return text view
*/



/**
* Format stats into {@link StyledText}
*
* @param files
* @return styled text
*/



/**
* Unit tests of {@link RepositoryContents}
*/



/**
* Unit tests of {@link ContentsService}
*/



/**
* Contents of a path in a repository
*/



/**
* Service for accessing repository contents
*
* @see <a href="http://developer.github.com/v3/repos/contents">GitHub contents
*      API documentation</a>
*/



/**
* Gist repository connector class.
*/



/**
* Commit proposal processor
*/



/**
* Preference page for the History view
*/



/** Preference page for views preferences */



/**
* Unit tests of {@link Contributor}
*/



/**
* Repository contributor model class
*/



/**
* Unit tests of {@link DuplicateTreeFilter}
*/



/**
* Container class for duplicates found in commit walks
*/



/**
* Filter that tracks any duplicate trees introduced in a visited commit.
*/



/**
* Commit search result class.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Line class that spans one or more revisions.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Class containing all the lines present at a file revision.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Class to assemble the history of every line in every revision of a file.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Container class for the line history of all revisions of a file.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Annotate command for building a {@link RevisionContainer} for a file path.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link LineHistoryCommand}
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Programming languages
*/



/**
* 
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
* 
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Tests of {@link CreateGistActivity}
*/



/**
* Create test
*/



/**
* Create Gist with initial text
*/



/**
* Create Gist with no initial text
* 
* @throws Throwable
*/



/**
* Class to load a list of gauges
*/



/**
* Creates a gauge list loader using the given {@link Context} and {@link GaugesServiceProvider}
*
* @param context
* @param serviceProvider
*/



/**
* Operation that updates a repository's submodules
*/



/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/



/**
* Command to update selected submodules
*/



/**
* Unit tests of {@link PagedRequest}
*/



/**
* Unit tests of {@link DateFormatter}
*/



/**
* Rebases pull request head onto tip of base
*/



/**
* Merges a pull request topic branch into the destination branch
*/



/**
* Class to hold settings used to search commits.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Annotate command for building a {@link RevisionContainer} for a file path.
*/



/**
* Line class that spans one or more revisions.
*/



/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
*/



/**
* Class containing all the lines present at a file revision.
*/



/**
* Class to assemble the history of every line in every revision of a file.
*/



/**
* Container class for the line history of all revisions of a file.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link LineHistoryCommand}
*/

38a41,43

/**
* Activity using this loader
*/



/**
* Create loader for context
*
* @param context
*/

60a73,77

/**
* Load data
*
* @return data
*/



/**
* Create asynchronous task that ensures a valid account is present when executed
*
* @param context
*/



/**
* Create asynchronous task that ensures a valid account is present when executed
*
* @param context
* @param executor
*/

65a79,84

/**
* Execute task with an authenticated account
*
* @return result
* @throws Exception
*/



/**
* Author colors
*/



/**
* Annotation information control
*/



/**
* Annotation information control creator
*/



/**
* Blame operation
*/



/**
* Annotation revision
*/



/**
* Show annotation action class.
*/



/**
* Show blame annotations action handler
*/



/**
* Unit tests of {@link StashCreateCommand}
*/



/**
* Command class to stash changes in the working directory and index in a
* commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Unit tests of {@link InitOperation}
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Operation that initializes a Git repository
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link PullRequestReviewCommentPayload}
*/



/**
* Payload for an event with type {@link Event#TYPE_PULL_REQUEST_REVIEW_COMMENT}
*/



/**
* Adapter for a list of news events
*/



/**
* Can the given event be rendered by this view holder?
*
* @param event
* @return true if renderable, false otherwise
*/



/**
* Create list adapter
*
* @param inflater
* @param elements
* @param avatars
*/



/**
* Create list adapter
*
* @param inflater
* @param avatars
*/



/**
* View of a news item
*/



/**
* Avatar image view
*/



/**
* Event text view
*/



/**
* Event details text view
*/



/**
* Event icon view
*/



/**
* Event date text view
*/



/**
* Create news events item view
*
* @param view
*/



/**
* Unit tests of HTML conversions done when rendering markdown
*/



/**
* Single email toggle span is removed
*/



/**
* Multiple email toggle spans are removed
*/



/**
* Email div is transformed into block quote
*/



/**
* Email fragment div is removed and newlines are replaced with br tags
*/



/**
* Email fragment div is removed and newlines are replaced with br tags
*/



/**
* Email fragment div is removed and newlines are replaced with br tags
*/



/**
* Leading break is removed
*/



/**
* Trailing break is removed
*/



/**
* Leading & trailing breaks are removed
*/



/**
* Leading & trailing breaks are removed
*/



/**
* Paragraph replaced with break
*/



/**
* em tags replaced with i tags
*/



/**
* strong tags replaced with b tags
*/



/**
* Leading whitespace is removed
*/



/**
* Trailing whitespace is removed
*/



/**
* Leading & trailing whitespace is removed
*/



/**
* Pre untouched
*/



/**
* Pre space escaped
*/



/**
* Pre tab escaped
*/



/**
* Pre newline escaped
*/



/**
* Pre space, tab, and newline escaped
*/



/**
* Multiple pre elements escaped
*/



/**
* Single code element inside a pre element
*/



/**
* Unit tests of {@link HttpRequestUtils}
*/



/**
* Test secure requests
*/



/**
* Test insecure requests
*/



/**
* Unit tests of {@link CommitUrlMatcher}
*/



/**
* Check non-matching URLs
*/



/**
* Verify issue URL matching provides commits
*/



/**
* Unit tests of {@link UserComparator}
*/



/**
* Test sorting of users that match login
*/



/**
* Test sorting of users that don't match login
*/



/**
* Unit tests of {@link GistUrlMatcher}
*/



/**
* Verify issue URL matching provides accurate Gist ids
*/



/**
* Verify issue URL matching provides accurate Gist ids
*/



/**
* Unit tests of {@link IssueUrlMatcher}
*/



/**
* Verify issue URL matching provides accurate issue numbers
*/



/**
* Verify issue URL matching provides accurate issue numbers
*/



/**
* Unit tests of {@link IssueFilter}
*/



/**
* Verify {@link IssueFilter#equals(Object)}
*/



/**
* Task to refresh a repository
*/



/**
* Create task for context and id provider
*
* @param context
* @param repo
*/


// Load avatar if single issue and user is currently unset of missing avatar URL



/**
* Annotate command for building a {@link Revision} list for a file path.
*/



/**
* Line class that spans one or more revisions.
*/



/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
*/



/**
* Class containing all the lines present in a file revision.
*/



/**
* Class to assemble the history of every line in every revision of a file.
*/



/**
* Determines when revision building should continue as each revision with line
* history is generated.
*/



/**
* Unit tests of {@link LineHistoryCommand}
*/



/**
* Filter that looks up the notes associated with each commit visited
*/



/**
* Unit tests of {@link CommitNotesFilter}
*/

29a33,37

/**
* Matcher for finding a {@link Repository} from an {@link Event}
*/



/**
* Helper to find a {@link RepositoryEventMatcher} to open for an event
*/



/**
* Get {@link Repository} from event
*
* @param event
* @return gist or null if event doesn't apply
*/



/**
* Pull request model class.
*/



/**
* Operation that deletes a tag
*/



/**
* Command to delete a tag
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* The activator class controls the plug-in life cycle
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Set negative button
*
137a148,157
}


/**
* Set negative button
*
* @param listener
* @return this dialog
*/



/**
* GitHub gist class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Gist file class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link CommitEditorInputFactory}
*/



/**
* Element factory for saving and restoring the state of a
* {@link CommitEditorInput} instance.
*/



/**
* Activity to page through the content of all the files in a Gist
*/



/**
* Create intent to show files with an initial selected filed
*
* @param gist
* @param position
* @return intent
*/



/**
* Fragment to display the content of a file in a Gist
*/



/**
* Pager adapter for all the files in a given gist
*/



/**
* @param fm
* @param gist
*/



/**
* Unit tests of {@link DataService}
*/



/**
* Model class for resources identified bya SHA-1
*/



/**
* Resource that has type and URL fields
*/



/**
* Blob model class
*/



/**
* Tag model class
*/



/**
* Reference model class
*/



/**
* Tree entry model class
*/



/**
* Date service class for low-level access to Git repository data.
*/



/**
* Utilities for working with commits
*/



/**
* Abbreviate commit sha to default length if longer
*
* @param commit
* @return abbreviated sha
*/



/**
* Abbreviate commit sha to default length if longer
*
* @param commit
* @return abbreviated sha
*/



/**
* Abbreviate sha to default length if longer
*
* @param sha
* @return abbreviated sha
*/



/**
* Activity to page through the content of all the files in a Gist
*/



/**
* Create intent to show files with an initial selected file
*
* @param gist
* @param position
* @return intent
*/



/**
* Activity to display a list of saved {@link IssueFilter} objects
*/



/**
* Create intent to browse issue filters
*
* @return intent
*/



/**
* Operation that resolves a file-based {@link Repository} for a
* {@link BuildRepository}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link FileRepositoryOperation}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/



/**
* Annotate command for building a {@link Revision} list for a file path.
*/



/**
* Line class that spans one or more revisions.
*/



/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
*/



/**
* Class containing all the lines present in a file revision.
*/



/**
* Class to assemble the history of every line in every revision of a file.
*/



/**
* Determines when revision building should continue as each revision with line
* history is generated.
*/



/**
* Unit tests of {@link LineHistoryCommand}
*/



/**
* Unit tests of {@link CommitCommand}
*/



/**
* Number formatter
*/



/**
* Update repository details
*
* @param view
* @param description
* @param language
* @param watchers
* @param forks
* @param isPrivate
* @param isFork
*/



/**
* Adapter for the default account's repositories
*/



/**
* Create list adapter for repositories
*
* @param inflater
* @param elements
* @param account
* @param recent
*/



/**
* Create list adapter for repositories
*
* @param inflater
* @param account
* @param recent
*/



/**
* Author colors
*/



/**
* Annotation information control
*/



/**
* Annotation information control creator
*/



/**
* Blame operation
*/



/**
* Annotation revision
*/



/**
* Show annotation action class.
*/



/**
* Show blame annotations action handler
*/



/**
* Commit model class.
*/



/**
* Pull request commit model class.
*/



/**
* Tree model class
*/



/**
* Commit file model class.
*/



/**
* 
*/



/**
* Gson utilities.
*/



/**
* Keyboard utilities
*/



/**
* Hide soft input method manager
*
* @param view
* @return view
*/



/**
* Request to create a gist
*/



/**
* Store the given collections of Gists and return the same collection but sorted using {@link #compare(Gist, Gist)}
*
* @param gists
* @return non-null but possibly empty list of sorted gists
*/



/**
* Gist id field
*/



/**
* Width of id column of in Gist list
*/

16a17,19

/**
* GitHub issue task attributes
*/



/**
* Base repository query page
*/

36a37,41

/**
* The maximum numbers of hits to retain
*/



/**
* Interface for linking to commits and other report entries
*/



/**
* Linker for GitHub URLs
*/



/**
282a292,328
helper.close();
}
}


/**
* Get avatar for login
*
* @param login
* @return avatar blob
*/



/**
* Set avatar for login
*
* @param login
* @param image
*/



/**
* Avatar utilities
*/



/**
* Create avatar helper
*
* @param cache
*/



/**
* Bind view to user
*
* @param view
* @param user
*/



/**
* Bind view to image at URL
*
* @param view
* @param login
* @param avatarUrl
*/



/**
* Convert {@link PullRequest} model {@link Issue} model
*
* @param pullRequest
* @return issue
*/



/**
* Commit editor input class. This class wraps a {@link RepositoryCommit} to be
* viewed in an editor.
*/



/**
* Unit tests for {@link CommitEditorInput}
*/



/**
* Unit tests of {@link TreeUtils}
*/



/**
* Utilities for dealing with trees
*/



/**
* Styled label provider that wraps a {@link WorkbenchLabelProvider}
*/



/**
* Live unit tests of {@link LabelService}
*/



/**
* Class to track all renames encountered during a {@link RevWalk}
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Walker that visits all submodule entries found in a tree
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Unit tests of {@link SubmoduleWalk}
*/



/**
* Create child resource
*
* @param parent
* @param gson
* @param reader
* @throws IOException
*/



/**
* Milestone service class for listing the {@link Milestone} objects in use by a
* repository and user accessed via a {@link GitHubClient}.
*/

//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//



/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/



/**
* Utilities for writing multiple HTTP requests
*/



/**
211a224,281
}


/**
* Register on checked change listener to child view with given id
*
* @param id
* @param listener
* @return view registered with listener
*/



/**
* Register runnable to be invoked when child view with given id is
* checked/unchecked
*
* @param id
* @param runnable
* @return view registered with runnable
*/



/**
* Register on checked change listener with all given child view ids
*
* @param ids
* @param listener
*/



/**
* Register runnable to be invoked when all given child view ids are
* checked/unchecked
*
* @param ids
* @param runnable
*/



/**
* Unit tests of {@link ViewFinder}
*/



/**
* Verify on check helpers
*/



/**
* Verify on check helpers
*/



/**
* Verify on check helpers
*/

if (TAG_ROOT.equalsIgnoreCase(tag) && !opening) {
// Remove leading whitespace


// Remove trailing whitespace



/**
* Node representing a stashed commit in a repository
*/



/**
* Represents the "Stash" node
*/



/**
* Unit test of {@link OrganizationService}
*/



/**
* Unit tests of {@link CommitService}
*/



/**
* Unit tests of {@link DeployKeyService}
*/



/**
* Unit tests of {@link UserService}
*/



/**
* Unit tests of {@link DataService}
*/



/**
* Unit tests of {@link TeamService}
*/



/**
* Unit tests of {@link WatcherService}
*/



/**
* Unit tests of {@link CollaboratorService}
*/



/**
* Filter that includes commits until all the tree paths in the first commit
* visited have been attributed to the last commit that edited the given tree
* path.
*/



/**
* Unit tests of {@link LastCommitDiffFilter}
*/



/**
* Annotate command for building a {@link RevisionContainer} for a file path.
*/



/**
* Line class that spans one or more revisions.
*/



/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
*/



/**
* Class containing all the lines present at a file revision.
*/



/**
* Class to assemble the history of every line in every revision of a file.
*/



/**
* Container class for the line history of all revisions of a file.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link LineHistoryCommand}
*/



/**
* Create test for {@link GaugeListActivity}
*/



/**
* Verify activity exists
*/



/**
* Repository search wizard
*/

6a8,10

/**
* Utility class for working with {@link SharedPreferences}
*/



/**
* Tests for {@link PullRequestDiscussion}
*/


/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Get stock at position
*
* @param position
* @return stock
*/



/**
* Loader for list of all stocks
*/



/**
* Create stock list loader
*
* @param context
*/



/**
* Stocks cached in SQLite populated initially from a file
*/



/**
* @param context
*/

} catch (IOException ignored) {
// Ignored



/**
* Get readable database
*
* @return readable database or null if it failed to create/open
*/

} catch (SQLiteException e1) {
// Make second attempt



/**
* Get cursor over all stocks
*
* @return cursor
*/



/**
* Get stocks filtered to given query
*
* @param query
* @return cursor
*/



/**
* Filter query provider over all stocks
*/



/**
* Create filter query provider
*
* @param context
*/

187a188,195

/**
* Get error message to display for exception
*
* @param exception
* @return string resource id
*/



/**
* Base class for commands that use a {@link Transport} during execution.
* <p>
* This class provides standard configuration of a transport for options such as
* a {@link CredentialsProvider}, a timeout, and a
* {@link TransportConfigCallback}.
*
* @param <C>
* @param <T>
*/



/**
* Verify HEAD with escaped query parameters
*
* @throws Exception
*/



/**
* Span that draws a {@link Label}
*/



/**
* Create drawable for labels
*
* @param resources
* @param textSize
* @param label
*/

p.setColor(resources.getColor(android.R.color.transparent));
// Measure with monospace to ensure they are all the same height



/**
* Create {@link CharSequence} with spans for each label
*
* @param view
* @param labels
* @return char sequence
*/



/**
* Create background span for label
*
* @param resources
* @param textSize
*
* @param label
*/



/**
* Request to update an issue's labels
*/



/**
* Request to update an issue's milestone
*/



/**
* Request to update an issue's assignee
*/



/**
* Request to close an issue
*/



/**
* Request to reopen an issue
*/



/**
* Request to edit an issue
*/



/**
* Request to create a comment
*/


// Intentionally left blank



/**
* Listener that dialogs results are delivered too
*/



/**
* Callback for a dialog finishing and delivering a result
*
* @param requestCode
* @param resultCode
*            result such as {@link Activity#RESULT_CANCELED} or {@link Activity#RESULT_OK}
* @param arguments
*/



/**
* Task to edit the assignee
*/



/**
* Create task to edit a milestone
*
* @param activity
* @param repositoryId
* @param issueNumber
*/



/**
* Prompt for assignee selection
*
* @param assignee
*            current assignee
* @return this task
*/



/**
* Edit issue to have given assignee
*
* @param user
* @return this task
*/



/**
* Sub-classes may override but should always call super to ensure the progress dialog is dismissed
*/



/**
* Sub-classes may override but should always call super to ensure the progress dialog is dismissed
*/



/**
* Task to edit labels
*/



/**
* Create task to edit labels
*
* @param activity
* @param repositoryId
* @param issueNumber
*/



/**
* Prompt for labels selection
*
* @param labels
*            current labels
* @return this task
*/



/**
* Edit issue to have given labels
*
* @param labels
* @return this task
*/



/**
* Sub-classes may override but should always call super to ensure the progress dialog is dismissed
*/



/**
* Sub-classes may override but should always call super to ensure the progress dialog is dismissed
*/



/**
* Task to edit a milestone
*/



/**
* Create task to edit a milestone
*
* @param activity
* @param repositoryId
* @param issueNumber
*/



/**
* Prompt for milestone selection
*
* @param milestone
*            current milestone
* @return this task
*/



/**
* Edit issue to have given milestone
*
* @param title
* @return this task
*/



/**
* Sub-classes may override but should always call super to ensure the progress dialog is dismissed
*/



/**
* Sub-classes may override but should always call super to ensure the progress dialog is dismissed
*/



/**
* Task to close or reopen an issue
*/



/**
* Create task to edit issue state
*
* @param activity
* @param repositoryId
* @param issueNumber
*/



/**
* Confirm action
*
* @param close
* @return this task
*/



/**
* Edit state of issue
*
* @param close
* @return this task
*/



/**
* Sub-classes may override but should always call super to ensure the progress dialog is dismissed
*/



/**
* Sub-classes may override but should always call super to ensure the progress dialog is dismissed
*/



/**
* Fragment to display an issue
*/



/**
* Adapter to page through an {@link Issue} array
*/



/**
* @param fm
* @param issues
*/



/**
* Deliver dialog result to fragment at given position
*
* @param position
* @param requestCode
* @param resultCode
* @param arguments
* @return this adapter
*/



/**
* Activity display a collection of issues in a pager
*/



/**
* Create an intent to show a single issue
*
* @param issue
* @return intent
*/



/**
* Create an intent to show issues with an initial selected issue
*
* @param issues
* @param position
* @return intent
*/

public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
// Intentionally left blank

public void onPageScrollStateChanged(int state) {
// Intentionally left blank

60a61,71

/**
* Create intent for creating an issue filter for the given repository
*
* @param repo
* @param filter
* @return intent
*/



/**
* Unit tests of {@link CommitSearchQuery}
*/



/**
* Service class for getting and list gists.
*/



/**
* Constants used for {@link Intent} and {@link Bundle} properties
*/



/**
* Comparators that sort issue's by created at date
*/



/**
* Descending order
*/



/**
* Ascending order
*/



/**
* Create comparator in descending order
*/



/**
* Create comparator
*
* @param direction
*/



/**
* Create filter
*/



/**
* Set all issues to be returned
*
* @return this filter
*/



/**
* Set only closed issues to be returned
*
* @return this filter
*/



/**
* Set only open issues to be returned
*
* @return this filter
*/



/**
* Get display {@link CharSequence} representing this filter
*
* @return display
*/

} catch (CloneNotSupportedException e) {
// This should never happen since this class implements Cloneable



/**
* Constants used in gist repositories query properties.
*/



/**
* Commit pipeline filter that includes commit that are included by each
* configured pipe.
*/



/**
* Unit tests of {@link StashApplyCommand}
*/



/**
* Command class to apply a stashed commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Getter for an image
*/



/**
* Create image getter for context
*
* @param context
*/



/**
* Tests of displaying the authenticator activity
*/



/**
* Create test for {@link GaugesAuthenticatorActivity}
*/



/**
* Verify activity exists
*/



/**
* Verify sign in button is initially disabled
*/



/**
* @return content
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will a
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleGenerator}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Wizard to configure a new submodule
*/



/**
* Wizard page to configure the path of a submodule
*/



/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/



/**
* Command to sync submodule configuration
*/



/**
* Command to update selected submodules
*/



/**
* Command to add a new submodule to a repository
*/



/**
* Operation to add a submodule to a repository
*/



/**
* Operation that updates a repository's submodules
*/



/**
* Operation that syncs a repository's submodule configurations
*/



/**
* Utilities for writing multiple HTTP requests
*/

//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//



/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/

109a108,120

/**
* Detach from list view.
*/



/**
* Viewer to display one or more file differences using standard editor colors
* and fonts preferences.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* GitHub issue comment class.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* GitHub issue milestone class.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Utilities for dealing with paths when looking for commits
*/



/**
* 
*/



/**
* Unit tests of path filtering
*/



/**
* Tests of displaying the authenticator activity
*/



/**
* Create test for {@link GaugesAuthenticatorActivity}
*/



/**
* Verify activity exists
*/



/**
* Verify sign in button is initially disabled
*/



/**
* Unit tests of {@link CommitEditorInputFactory}
*/



/**
* Element factory for saving and restoring the state of a
* {@link CommitEditorInput} instance.
*/



/**
* GitHub UI plug-in
*/



/**
* Tests of {@link DiffStyler}
*/



/**
* Test styler with empty files
*/



/**
* Test styler with empty patch
*/



/**
* Test styler for file with only single newline
*/



/**
* Test styler for file with an empty patch line with other valid lines
*/



/**
* Test styler for file with trailing empty line
*/



/**
* Test styler for file with only newlines
*/



/**
* Test styler for patch with no trailing newline after the second line
*/



/**
* Test styler for patch with no trailing newline
*/



/**
* Test styler for file with valid patch
*/



/**
* Unit tests of {@link TeamService}
*/



/**
* Unit test of {@link OrganizationService}
*/



/**
* Unit tests of {@link CommitService}
*/



/**
* Unit tests of {@link DeployKeyService}
*/



/**
* Unit tests of {@link DataService}
*/



/**
* Unit tests of {@link WatcherService}
*/



/**
* Unit tests of {@link CollaboratorService}
*/



/**
* Task to decode a bitmap and set it on an {@link ImageView}
*/



/**
* View being updated
*/



/**
* Create task to set bitmap at path on given image view
*
* @param maxWidth
* @param maxHeight
* @param path
* @param view
*/



/**
* Viewer to display one or more file differences using standard editor colors
* and fonts preferences.
*/



/**
* Source viewer to display one or more file differences using standard editor
* colors and fonts preferences.
*/



/**
* Pager over commits
*/



/**
* @param fm
* @param repository
* @param ids
*/



/**
* Create intent for this activity
*
* @param repository
* @param position
* @param commits
* @return intent
*/



/**
* Create intent for this activity
*
* @param repository
* @param position
* @param ids
* @return intent
*/

int positionOffsetPixels) {
// Intentionally left blank

public void onPageScrollStateChanged(int state) {
// Intentionally left blank

Repository repository = ((ForkPayload) payload).getForkee();
// Verify repository has valid name and owner



/**
* Unit tests of {@link RepositoryEventMatcher}
*/



/**
* Test fork event that has an incomplete forkee in the payload
*/



/**
* Verify custom connection factory
*/



/**
* Verify setting a null connection factory restores to the default one
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/



/**
* Editor part for viewing a issue's labels.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleGenerator}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Tree filter that only includes submodule entries
*/



/**
* List fragment to load homogeneous items
*
* @param <E>
*            item type
*/



/**
* List items provided to {@link #onLoadFinished(Loader, List)}
*/


// Start out with a progress indicator.


// Prepare the loader. Either re-connect with an existing one,
// or start a new one.



/**
* Refresh the fragment's list
*/



/**
* Set the list to be shown and stop the refresh animation
*/



/**
* Create adapter for list of items
*
* @param items
* @return list adapter
*/



/**
* Show exception using {@link ErrorHelper#show(android.content.Context, Exception, int)}
* <p>
* This method ensures the {@link Toast} is displayed on the UI thread and so it may be called from any thread
*
* @param e
* @param defaultMessage
*/



/**
* Get exception from loader if it provides one by being a {@link ThrowableLoader}
*
* @param loader
* @return exception or null if none provided
*/



/**
* Activity that displays a {@link ViewPager} and has workarounds for
* ActionBar/ViewPager bugs
*/



/**
* Get provider of the currently selected fragment
*
* @return fragment provider
*/



/**
* Get selected fragment
*
* @return fragment
*/

int positionOffsetPixels) {
// Intentionally left blank

public void onPageScrollStateChanged(int state) {
// Intentionally left blank



/**
* Provides a fragment
*/



/**
* Get selected fragment
*
* @return fragment
*/



/**
* Pager adapter that provides the current fragment
*/



/**
* @param activity
*/



/**
* Custom {@link ViewPager} extension
*/



/**
* @param context
*/



/**
* @param context
* @param attrs
*/



/**
* Set current item and return whether the item changed
* <p>
* This method does not call {@link #setCurrentItem(int)} unless the item
* parameter differs from the current item
*
* @param item
* @return true if set, false if same
*/



/**
* Set current item, invoke the listener if changes, and return whether the
* item changed
* <p>
* This method does not call {@link #setCurrentItem(int)} unless the item
* parameter differs from the current item
*
* @param item
* @param listener
* @return true if set, false if same
*/



/**
* Schedule a call to {@link #setItem(int)} to occur on the UI-thread
*
* @param item
* @param listener
*/



/**
* Schedule a call to {@link #setItem(int)} to occur on the UI-thread
*
* @param item
*/



/**
* Filter for including commits that introduced a configurable number of line
* differences
*/



/**
* Filter for including commits that introduced a configurable number of file
* differences
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Unit tests of {@link SubmoduleGenerator}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Helper to set error text when {@link EditText} is blank
*/



/**
* Interface that provides a client for a context
*/



/**
* Provide authenticated client using first account found in the
* {@link AccountManager}
*/

38a39,43

/**
* Index of commits page
*/



/**
* Is reference a tag?
*
* @param name
* @return true if tag, false otherwise
*/



/**
* Get short name for ref
*
* @param name
* @return short name
*/



/**
* Unit tests for {@link CommitEditorInput}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Commit editor input class. This class wraps a {@link RepositoryCommit} to be
* viewed in an editor.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Operation that wraps another operation and handles lock failures
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Date formatter for multiple date formats present in the GitHub v2 API.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Gist repository query page class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Activity to display an existing Gist
*/



/**
* Adapter for viewing the files in a Gist
*/



/**
* Create adapter for files
*
* @param files
* @param inflater
*/

} catch (IOException ignored) {
// Ignored



/**
* Unit tests of using a {@link WorkingTreeIterator} for a repository with
* submodules.
*/


/*	Copyright (C) 2011 Emory Myers 
* 
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*  
*  	http://www.apache.org/licenses/LICENSE-2.0
*  
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License. 
*/

AirTrafficEngine() {
// Create a Paint to draw the lines for our cube

mHandler.removeCallbacks(mDrawCube);
//            pusher.disconnect();

super.onSurfaceChanged(holder, format, width, height);
// store the center of the surface, so we can draw the cube in the right spot

if (c != null) {
// draw something

drawTraffic(c);
// drawTouchPoint(c);


// Reschedule the next redraw



/**
* Gauges application
*/



/**
* Create main application
*/

public GaugesApplication() {
// Disable http.keepAlive on Froyo and below



/**
* Create main application
*
* @param context
*/



/**
* Create main application
*
* @param instrumentation
*/



/**
* Provider for a {@link GaugesService} instance
*/



/**
* Get service for configured key provider
*
* @return gauges service
* @throws IOException
* @throws AccountsException
*/



/**
* Constants used for {@link Intent} and {@link Bundle} properties
*/



/**
* Authenticator service that returns a subclass of AbstractAccountAuthenticator in onBind()
*/



/**
* Create account authenticator service
*/



/**
* Bridge class that obtains a gaug.es API key for the currently configured account
*/



/**
* This call blocks, so shouldn't be called on the UI thread
*
* @return API key to be used for authorization with a {@link GaugesService} instance
* @throws AccountsException
* @throws IOException
*/



/**
* Constants for authenticating
*/



/**
* Account type id
*/



/**
* Account name
*/



/**
* Provider id
*/



/**
* Auth token type
*/


/*
* The user has requested to add a new account to the system. We return an intent that will launch our login screen
* if the user has not logged in yet, otherwise our activity will just pass the user's credentials on to the account
* manager.
*/

return bundle;
// Log.d(AccountAuthenticatorService.TAG, "addAccount " + accountType +
// " authTokenType=" + authTokenType);



/**
* Activity to authenticate the user against gaug.es
*/



/**
* PARAM_CONFIRMCREDENTIALS
*/



/**
* PARAM_PASSWORD
*/



/**
* PARAM_USERNAME
*/



/**
* PARAM_AUTHTOKEN_TYPE
*/



/**
* If set we are just checking that the user knows their credentials; this doesn't cause the user's password to be
* changed on the device.
*/



/**
* Was the original caller asking for an entirely new account?
*/



/**
* Handles onClick event on the Submit button. Sends username/password to the server for authentication.
* <p/>
* Specified by android:onClick="handleLogin" in the layout xml
*
* @param view
*/

String message;
// A 401 is returned as an IOException with this message



/**
* Called when response is received from the server for confirm credentials request. See onAuthenticationResult().
* Sets the AccountAuthenticatorResult which is sent back to the caller.
*
* @param result
*/



/**
* Called when response is received from the server for authentication request. See onAuthenticationResult(). Sets
* the AccountAuthenticatorResult which is sent back to the caller. Also sets the authToken in AccountManager for
* this account.
*/



/**
* Hide progress dialog
*/



/**
* Show progress dialog
*/



/**
* Called when the authentication process completes (see attemptLogin()).
*
* @param result
*/



/**
* Returns the message to be displayed at the top of the login dialog box.
*/



/**
* Set the result that is to be sent as the result of the request that caused this Activity to be launched. If
* result is null or this method is never called then the request will be canceled.
*
* @param result
*            this is returned as the result of the AbstractAccountAuthenticator request
*/



/**
* Sends the result or a Constants.ERROR_CODE_CANCELED error if a result isn't present.
*/

if (accountAuthenticatorResponse != null) {
// send the result bundle back if set, otherwise send an error.



/**
* Registered API client an authentication key
*/



/** serialVersionUID */



/**
* @return key
*/



/**
* @param key
*/



/**
* @return description
*/



/**
* @param description
*/



/**
* Dated view summary
*/



/**
* Gauge information
*/



/**
* Container for all {@link Gauge} contents
*/



/**
* Collection of {@link Gauge} referrers
*/



/**
* Collection of all gauges
*/



/**
* Container for all registered API clients
*/



/** serialVersionUID */



/**
* @return clients
*/



/**
* @param clients
*/



/**
* gaug.es constants
*/



/**
* Gauges API service
*/



/**
* GSON instance to use for all request
*/



/**
* Create gauges service
*
* @param username
* @param password
*/



/**
* Create gauges service
*
* @param apiKey
*/



/**
* Execute request
*
* @param request
* @return request
* @throws IOException
*/



/**
* Get all gauges
*
* @return non-null but possibly empty list of gauges
* @throws IOException
*/



/**
* Get content for gauge id
*
* @param gaugeId
* @return non-null but possibly empty list of page content information
* @throws IOException
*/



/**
* Get referrers for gauge id
*
* @param gaugeId
* @return non-null but possibly empty list of referrers
* @throws IOException
*/



/**
* Create API client with description
*
* @param description
* @return created client
* @throws IOException
*/



/**
* Get client with description
*
* @param description
* @return client or null if none found matching description
* @throws IOException
*/



/**
* Get gauge with id
*
* @param gaugeId
* @return gauge
* @throws IOException
*/



/**
* Content entry for a {@link Gauge}
*/



/**
* Referrer to a page on a {@link Gauge}
*/



/**
* View summary
*/



/**
* Loader which extends AsyncTaskLoaders and handles caveats as pointed out in
* http://code.google.com/p/android/issues/detail?id=14944.
* <p/>
* Based on CursorLoader.java in the Fragment compatibility package
* 
* @param <D>
*            data type
* @author Alexander Blom (me@alexanderblom.se)
*/



/**
* Drawable bar graph
*/



/**
* Fragment to load page content information for a {@link Gauge}
*/



/**
* Create content list fragment
*/



/**
* View holder for a {@link PageContent} item
*/



/**
* Activity to display list of gauge summaries
*/



/**
* Fragment to display a list of gauges
*/



/**
* Pager adapter for a gauge
*/



/**
* Create pager adapter
*
* @param context
*
* @param gauge
* @param fragmentManager
*/



/**
* Activity to view a specific {@link Gauge}'s traffic, content, and referrer information
*/



/**
* View holder for a {@link Gauge}
*/



/**
* Helper to set an error message on a {@link EditText} when the field is empty and the view loses focus
*/



/**
* List loading fragment for a specific type
*
* @param <E>
*/



/**
* Fragment to display a list of {@link Referrer} instances
*/



/**
* Create referrer list fragment
*/



/**
* View holder for a {@link Referrer}
*/



/**
* Adapter for {@link android.text.TextWatcher} interface
*/



/**
* Fragment to display list of recent traffic
*/

for (int i = 0; i < dayCount; i++) {
// Reverse entry order since entries are in reverse chronological order but graph is drawn left to right



/**
* View holder for a traffic entry
*/


/*
* 09/02/2011 - Emory Myers - 	added the isConnected method
*/


/*
* 09/02/2011 - Emory Myers - 	printing stacktraces for debugging purposes
* 								added some logging
* 								implemented isConnected method
* 								modified send method
*/

		// TODO see 4.1. step 41
//		else if (!headers.get("Sec-WebSocket-Location").equals(url.toASCIIString())) {
//			System.out.println("location: " + url.toASCIIString());
//		}
//		else if protocol


/*
* 09/02/2011 - Emory Myers - 	printing stacktrace on IO exception
*/



/**
* Unit tests of client API
*/



/**
* Constants for authenticating
*/



/**
* Account type id
*/



/**
* Account name
*/



/**
* Provider id
*/



/**
* Auth token type
*/



/**
* Unit tests of HTML conversions done when rendering markdown
*/



/**
* Single email toggle span is removed
*/



/**
* Multiple email toggle spans are removed
*/



/**
* Email div is transformed into block quote
*/



/**
* Email fragment div is removed and newlines are replaced with br tags
*/



/**
* Email fragment div is removed and newlines are replaced with br tags
*/



/**
* Email fragment div is removed and newlines are replaced with br tags
*/



/**
* Leading break is removed
*/



/**
* Trailing break is removed
*/



/**
* Leading & trailing breaks are removed
*/



/**
* Leading & trailing breaks are removed
*/



/**
* Leading whitespace is removed
*/



/**
* Trailing whitespace is removed
*/



/**
* Leading & trailing whitespace is removed
*/



/**
* Pre untouched
*/



/**
* Pre space escaped
*/



/**
* Pre tab escaped
*/



/**
* Pre newline escaped
*/



/**
* Pre space, tab, and newline escaped
*/



/**
* Multiple pre elements escaped
*/



/**
* Unit tests of {@link GistUrlMatcher}
*/



/**
* Verify issue URL matching provides accurate Gist ids
*/



/**
* Verify issue URL matching provides accurate Gist ids
*/



/**
* Unit tests of {@link IssueUrlMatcher}
*/



/**
* Verify issue URL matching provides accurate issue numbers
*/



/**
* Verify issue URL matching provides accurate issue numbers
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Unit tests of {@link SubmoduleWalk}
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Walker that visits all submodule entries found in a tree
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
* 
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
* 
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/

final StringBuilder result) {
// Add trailing slash if the base URL doesn't have any path segments.
//



/**
* Append text and span to end of this text
*
* @param text
* @param span
* @return this text
*/



/**
* Set text on view to be given label
*
* @param view
* @param label
*/



/**
* Create avatar helper
*
* @param context
*/



/**
* Sets the logo on the {@link ActionBar} to the user's avatar.
*
* @param actionBar
* @param user
* @return this helper
*/



/**
* Operation to drop a stashed commit
*/



/**
* Command to drop one or all stashed commits
*/



/**
* Request class to compute the gain/loss
*/



/**
* Main activity to compute the net gain/loss on a theoretical stock purchase of
* either a quantity of shares or dollar figure investment.
*/



/**
* Wizard to configure a new submodule
*/



/**
* Wizard page to configure the path of a submodule
*/



/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/



/**
* Command to sync submodule configuration
*/



/**
* Command to add a new submodule to a repository
*/



/**
* Command to update selected submodules
*/



/**
* Unit tests for adding submodules to a repository
*/



/**
* Unit tests of running a submodule sync
*/



/**
* Search unit test suite
*/



/**
* Unit tests for running a submodule update
*/



/**
* Operation to add a submodule to a repository
*/



/**
* Operation that updates a repository's submodules
*/



/**
* Operation that syncs a repository's submodule configurations
*/



/**
* Commit proposal processor
*/



/**
* Filter that wraps a {@link TreeFilter} and includes commits included by the
* tree filter.
*/



/**
* Unit tests of {@link CommitTreeFilter}
*/



/**
* Get body from intent
*
* @param intent
* @return body
*/



/**
* Get subject from intent
*
* @param intent
* @return subject
*/



/**
* Cherry pick operation
*/



/**
* GitHub user class.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* GitHub request error class
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Request exception class that wraps an {@link RequestError} object.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Activity to authenticate the user against gaug.es
*/



/**
* Diff editor page class that displays a {@link DiffViewer}.
*/



/**
* Matcher for user URLs that provides the login matched
* <p>
* This class is not thread-safe
*/



/**
* Get login from URL
*
* @param url
* @return login or null if the given URL is not to a user
*/



/**
* @param context
*/



/**
* Tests of {@link UserUrlMatcher}
*/



/**
* Verify empty url
*/



/**
* Verify no name
*/



/**
* Verify url with name
*/



/**
* Verify url with name
*/



/**
* Verify url with repository
*/



/**
* Verify blacklisted login
*/

27a28,32

/**
* Read and connect timeout in milliseconds
*/



/**
* GitHub issue task editor attribute part that display labels and milestone
* attribute editors.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
* Copyright 2012 GitHub Inc.
8,10c4,15

* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/



/**
* GitHub constants.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link CreateBranchPage}
*/


// Disable http.keepAlive on Froyo and below



/**
* Handler to blame a path on a selected commit
*/



/**
* Simple wigdet class that can be enabled or disabled
*/



/**
* Unit tests of {@link Widget} class
*/



/**
* Opens a {@link RevCommit} in the commit editor
*/

96a67,81

/**
* Scale value used based on map image dimensions
*/



/**
* Correction value used to adjust scaled y position
*/



/**
* Correction value used to adjust scaled x position
*/



/**
* Configure list after view has been created
*
* @param activity
* @param listView
*/



/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/



/**
* Command to sync submodule configuration
*/



/**
* Command to update selected submodules
*/



/**
* Operation that updates a repository's submodules
*/



/**
* Operation that syncs a repository's submodule configurations
*/



/**
* Tests of {@link Toaster} helper
*/



/**
* Setup tests
*/



/**
* Call Toaster with no activity
*/



/**
* Call Toaster with valid activity and message
*/

} catch (SQLiteException e1) {
// Make second attempt



/**
* Get readable database
*
* @param helper
* @return readable database or null if it failed to create/open
*/

} catch (SQLiteException e1) {
// Make second attempt



/**
* Utilities for dealing with {@link View} objects and their sub-classes
*/



/**
* Toggles the view's visibility between {@link View#VISIBLE} and
* {@link View#GONE} depending on the given gone flag
*
* @param view
* @param gone
*/



/**
* Utilities for working with {@link Issue} models
*/



/**
* Is the given issue a pull request?
*
* @param issue
* @return true if pull request, false otherwise
*/



/**
* Dismiss and clear progress dialog field
*/



/**
* Interface for container classes that can provide a collection of resources of
* the same type.
* 
* @param <V>
*/



/**
* Gson factory
*/



/**
* Host prefix
*/



/**
888a915,918
*
* @see #append(String, Map)
* @see #encode(CharSequence)
*
897a928,948
* Start a 'POST' request to the given URL along with the query params
*
* @param baseUrl
* @param encode
*          true to encode the full URL
* @param params
*          the name/value query parameter pairs to include as part of the
*          baseUrl
*
* @see #append(String, String...)
* @see #encode(CharSequence)
*
* @return request
*/



/**
936a988,1008
* Start a 'PUT' request to the given URL along with the query params
*
* @param baseUrl
* @param encode
*          true to encode the full URL
* @param params
*          the name/value query parameter pairs to include as part of the
*          baseUrl
*
* @see #append(String, String...)
* @see #encode(CharSequence)
*
* @return request
*/



/**
970a1043,1063
String url = append(baseUrl, params);
return HttpRequest.delete(encode ? encode(url) : url);
}


/**
* Start a 'DELETE' request to the given URL along with the query params
*
* @param baseUrl
* @param encode
*          true to encode the full URL
* @param params
*          the name/value query parameter pairs to include as part of the
*          baseUrl
*
* @see #append(String, String...)
* @see #encode(CharSequence)
*
* @return request
*/



/**
* Adapter for lists where only a single view type is used
*
* @param <V>
*/



/**
* Create adapter
*
* @param activity
* @param layoutResourceId
*/



/**
* Create adapter
*
* @param context
* @param layoutResourceId
*/



/**
* Create adapter
*
* @param inflater
* @param layoutResourceId
*/



/**
* Set items to display
*
* @param items
*/



/**
* Get child view
*
* @param parentView
* @param childViewId
* @param childViewClass
* @return child view
*/



/**
* Get text view with given id
*
* @param parentView
* @param childViewId
* @return text view
*/



/**
* Get image view with given id
*
* @param parentView
* @param childViewId
* @return image view
*/



/**
* Get view with given id
*
* @param parentView
* @param childViewId
* @return view
*/



/**
* Set text on text view with given id
*
* @param parentView
* @param childViewId
* @param text
* @return text view
*/



/**
* Create array with given base ids and additional ids
*
* @param base
* @param ids
* @return extended array
*/



/**
* Get child view ids to store
*
* @return ids
*/



/**
* Update view for item
*
* @param position
* @param view
* @param item
*/



/**
* Initialize view
*
* @param view
* @return view
*/



/**
* Utilities for working with the {@link View} class
*/



/**
* Set visibility of given view to be gone or visible
* <p>
* This method has no effect if the view visibility is currently invisible
*
* @param view
* @param gone
* @return view
*/



/**
* Set visibility of given view to be invisible or visible
* <p>
* This method has no effect if the view visibility is currently gone
*
* @param view
* @param invisible
* @return view
*/



/**
* Unit tests of {@link CommitUtils}
*/



/**
* 
* Issue service class for listing, searching, and fetching {@link Issue}
* objects using a {@link GitHubClient}.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Avatar label displaying an image and label for a avatar url.
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleGenerator}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will a
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Broadcast icon
*/



/**
* Client that uses {@link HttpRequest} instances to make requests
*/



/**
* Response that uses a configured {@link HttpRequest}
*/



/**
* Unit tests of {@link BranchProjectTracker}
*/



/**
* Search unit test suite
*/



/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/



/**
* Base operation that supports adding pre/post tasks
*/



/** serialVersionUID */



/**
* @return views
*/



/**
* @param views
* @return this content
*/



/**
* @return path
*/



/**
* @param path
* @return this content
*/



/**
* @return title
*/



/**
* @param title
* @return this content
*/



/**
* @return url
*/



/**
* @param url
* @return this content
*/



/** serialVersionUID */



/**
* @param recentDays
* @return this gauge
*/



/**
* @return recentDays
*/



/**
* @return today
*/



/**
* @param today
* @return this gauge
*/



/**
* @return id
*/



/**
* @param id
*/



/**
* @return title
*/



/**
* @param title
* @return this gauge
*/



/** serialVersionUID */



/**
* @return views
*/



/**
* @param views
* @return this referrer
*/



/**
* @return host
*/



/**
* @param host
* @return this referrer
*/



/**
* @return path
*/



/**
* @param path
* @return this referrer
*/



/**
* @return url
*/



/**
* @param url
* @return this referrer
*/



/**
* Iterator for getting paged responses
* 
* @param <V>
*/



/**
* Exception class to be thrown when iterating over pages fails
*/



/**
* Replace with HEAD revision action handler
*/



/**
* Replace with HEAD revision action
*/



/**
* Commit proposal processor
*/


// Setup authorization for app if others didn't exist.


// If couldn't get authToken


// Assemble and return bundle


// Clear password from account



/**
* Class to track all renames encountered during a {@link RevWalk}
*/



/**
* Command to delete a tag
*/



/**
* Operation that deletes a tag
*/



/**
* Bridge class that obtains a gaug.es API key for the currently configured account
*/



/**
* Gist repository connector user interface class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Operation that wraps another operation and handles lock failures
*/



/**
* Unit tests of {@link CommitComment}
*/



/**
* Unit tests of {@link PullRequestMarker}
*/



/**
* Unit tests of {@link TreeEntry}
*/



/**
* Unit tests of {@link Reference}
*/



/**
* Unit tests of {@link Team}
*/



/**
* Unit tests of {@link Tag}
*/



/**
* Unit tests of {@link Commit}
*/



/**
* Unit tests of {@link Language}
*/



/**
* Unit tests of {@link Download}
*/



/**
* Unit tests of {@link TypedResource}
*/



/**
* Unit tests of {@link RepositoryCommit}
*/



/**
* Unit tests of {@link FieldError}
*/



/**
* Unit tests of {@link CommitUser}
*/



/**
* Unit tests of {@link CommitFile}
*/



/**
* Unit tests of {@link SearchRepository}
*/


/**
* Unit tests of {@link DownloadResource}
*/



/**
* Unit tests of {@link UserPlan}
*/



/**
* Unit tests of {@link Id}
*/



/**
* Unit tests of {@link RepositoryId}
*/



/**
* Unit tests of {@link Key}
*/



/**
* Unit tests of {@link Tree}
*/



/******************************************************************************
*  Copyright (c) 2011 GitHub Inc.
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*
*  Contributors:
*    Kevin Sawicki (GitHub Inc.) - initial API and implementation
*****************************************************************************/



/**
* Unit tests of {@link Repository}
*/



/**
* Unit tests of {@link User}
*/



/**
* Unit tests of {@link MergeStatus}
*/



/**
* Unit tests of {@link ShaResource}
*/



/**
* Unit tests of {@link Blob} class
*/



/**
* Instrumented test, which will execute on an Android device.
*
* @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
*/

public void useAppContext() throws Exception {
// Context of the app under test.

public void onClick(View v){
//Toast.setGravity(Gravity.TOP, 0, 0);

public void onClick(View view) {
//toast.setGravity(Gravity.TOP, 0, 0);



/**
* Example local unit test, which will execute on the development machine (host).
*
* @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
*/



/**
* Create iterator starting at the current resource and advancing down the
* chain of next links.
* <p>
* This returned iterator will return this resource on the first call to
* {@link Iterator#next()} followed by requesting and parsing the resource
* defined at this resource's {@link #nextUri()}
*/



/**
* Iterator over resources using the next link
*/



/**
* Create iterator starting at given resource
*
* @param resource
*/



/**
79a90,108
}


/**
* Use an {@link Iterable} to traverse the resources
*
* @throws Exception
*/



/**
* Issue model with comments
*/



/** serialVersionUID */



/**
* Create wrapper for issue and comments
*
* @param issue
* @param comments
*/



/**
* @return issue
*/



/**
* @return comments
*/



/**
* Fragment to display a issue's description and comments
*/



/**
* @param id
* @return this fragment
*/



/**
* @param repository
* @return this fragment
*/



/**
* @param loadListener
* @return this fragment
*/



/**
* Unit tests of working with branches
*/



/**
* Unit tests of working with tags
*/



/**
* This class implements a {@link CredentialsProvider} for EGit. The provider
* tries to retrieve the credentials (user, password) for a given URI from the
* secure store. A login popup is shown if no credentials are available.
*/



/**
* This class implements a login dialog asking for user and password for a given
* URI.
*/



/**
* This class implements services for interactive login and changing stored
* credentials.
*/



/**
* Resolves Git related information so launchers can use them
*/



/**
* Commit match class.
*/



/**
* Commit search dialog page class.
*/



/**
* Pattern constructor utilities to localize warnings from using internal
* {@link PatternConstructor} class.
*/



/**
* Repository match class.
*/



/**
* Open commit action
*/



/**
* Commit selection dialog
*/



/**
* Commit command handler
*/



/**
* Create branch handler
*/



/**
* Create tag handler
*/



/**
* Get pixels from dps
*
* @param view
* @param dp
* @return pixels
*/



/**
* Get pixels from dps
*
* @param resources
* @param dp
* @return pixels
*/



/**
* Make a post of form data
*
* @throws Exception
*/



/**
* Unit tests of {@link LineHistoryCommand}
*/



/**
* Annotate command for building a {@link Revision} list for a file path.
*/



/**
* Line class that spans one or more revisions.
*/



/**
* Line comparator that orders overlapping lines by finding their location at a
* common revision and comparing line numbers.
*/



/**
* Class containing all the lines present in a file revision.
*/



/**
* Class to assemble the history of every line in every revision of a file.
*/



/**
* Determines when revision building should continue as each revision with line
* history is generated.
*/



/**
* Commit match class.
*/



/**
* Commit search dialog page class.
*/



/**
* Pattern constructor utilities to localize warnings from using internal
* {@link PatternConstructor} class.
*/



/**
* Repository match class.
*/



/**
* Open commit action
*/



/**
* Commit selection dialog
*/



/**
* Commit command handler
*/



/**
* Create branch handler
*/



/**
* Create tag handler
*/



/**
* Base class for commands that use a {@link Transport} during execution.
* <p>
* This class provides standard configuration of a transport for options such as
* a {@link CredentialsProvider}, a timeout, and a
* {@link TransportConfigCallback}.
*
* @param <C>
* @param <T>
*/



/**
* Call {@link #closeOutput()} and re-throw a caught {@link IOException}s as
* an {@link HttpRequestException}
*
* @return this request
* @throws HttpRequestException
*/



/**
* Transport protocol contributed via service provider
*/



/**
* Assert utilities that all throw {@link IllegalArgumentException} that will
* have a non-null/non-empty message.
*/



/**
* Git exception class.
*/



/**
* Composite filter that will always include every commit but still calls the
* {@link RevFilter#include(RevWalk, RevCommit)} method on each filter that has
* been added to this filter. Most often used when you want to ensure that a
* collection of filters are each always called on every commit in a
* {@link RevWalk}.
*/



/**
* Composite filter that only includes commits that are included by every child
* filter that has been added to this filter.
*/



/**
* Person filter that includes commits where a {@link PersonIdent} matches the
* name and e-mail address of a commit's author.
*/



/**
* Filter that collects author {@link PersonIdent} objects for each commit
* visited.
*/



/**
* Commit message pattern filter that includes commits that contain a valid
* Gerrit {@link #CHANGE_ID_REGEX}.
*/



/**
* Commit filter that increments a counter on each commit visited.
*/



/**
* Base commit filter class with utility methods to be used by sub-classes.
*/



/**
* Commit filter that adds each visited commit to a list that can be accessed.
*/



/**
* Base filter that includes commits where a pattern can be found in a commit's
* full message.
*/



/**
* Person filter that includes commits where a {@link PersonIdent} matches the
* name and e-mail address of the committer of a commit.
*/



/**
* Filter that collects committer {@link PersonIdent} objects for each commit
* visited.
*/



/**
* 
*/



/**
* Filter that stops including commits after a certain number of commits are
* considered. This class should be last in an {@link AndCommitFilter} if you
* want to only limit matched commits and not just all visited commits.
*/



/**
* Composite filter that only includes commits that are included by at least one
* child filter that has been added to this filter. This filter stops matching
* against child filters when the first child filter matches the current commit.
*/



/**
* Commit filter that includes commits that match the range of number of
* parents.
*/



/**
* Base commit filter class that includes commits where a configured pattern can
* be found.
*/



/**
* 
*/



/**
* Base commit filter that contains utility methods for matching the configured
* {@link PersonIdent}.
*/



/**
* Commit filter that stores a {@link TreeSet} of persons encountered while
* visiting commits.
*/



/**
* Commit message pattern filter that includes commit that have a Signed-off-by
* line for a person.
*/



/**
* Commit service class
*/



/**
* Base service class for working with a {@link Repository}
*/



/**
* Wizard to configure a new submodule
*/



/**
* Wizard page to configure the path of a submodule
*/



/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/



/**
* Command to sync submodule configuration
*/



/**
* Command to update selected submodules
*/



/**
* Command to add a new submodule to a repository
*/



/**
* Operation to add a submodule to a repository
*/



/**
* Operation that updates a repository's submodules
*/



/**
* Operation that syncs a repository's submodule configurations
*/



/**
* Get comment count
*
* @param commit
* @return count
*/

private static boolean pathMissing(final String url) {
// The following test is checking for the last slash not being part of
// the protocol to host separator: '://'.



/**
* Append given name/value pairs as query parameters to the base URL
* <p>
* The params argument is interpreted as a sequence of name/value pairs so the
* given number of params must be divisible by 2.
*
* @param url
* @param params
*          name/value pairs
* @return URL with appended query params
*/


// Add trailing slash if the base URL doesn't have any path segments.



/**
* Append with base URL with no path
*
* @throws Exception
*/



/**
2318c2340

public void appendMultipleParams1() throws Exception {
2326a2349,2359
* Append multiple params
*
* @throws Exception
*/



/**
2332c2365

public void appendNullParams1() throws Exception {
2334c2367,2378

HttpRequest.append("http://test.com/1", (Map<?, ?>) null));
}


/**
* Append null params
*
* @throws Exception
*/



/**
2356c2411

public void appendWithNullValues1() throws Exception {
2361a2417,2427
}


/**
* Append params with null values
*
* @throws Exception
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Unit tests of {@link LockFile}
*/



/**
* List adapter that colors rows in alternating colors
*
* @param <V>
*/



/**
* @param resources
* @param items
* @param creator
* @param holderFactory
*/



/**
* @param primaryColor
* @param secondaryColor
* @param itemList
* @param c
* @param vhf
*/



/**
* Gist repository settings page class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link PagedRequest}
*/



/**
* Unit tests of {@link DateFormatter}
*/



/**
* Unit tests for resolving reflog-based revisions
*/



/**
* Get path being decoded
*
* @return path
*/



/**
* Utilities for working with {@link IRepositoryQuery} objects.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Is this fragment still part of an activity and usable from the UI-thread?
*
* @return true if usable on the UI-thread, false otherwise
*/



/**
* Handler to blame a path on a selected commit
*/



/**
* {@link ViewPager} extension with support for horizontally scrolling an
* embedded {@link WebView}
*/



/**
* @param context
*/



/**
* @param context
* @param attrs
*/



/**
* Web view extension with scrolling fixes
*/



/**
* @param context
* @param attrs
* @param defStyle
* @param privateBrowsing
*/



/**
* @param context
* @param attrs
* @param defStyle
*/



/**
* @param context
* @param attrs
*/



/**
* @param context
*/



/**
* Item filter
*
* @param <V>
*/



/**
* Create item filter
*
* @param adapter
*/



/**
* Does the value contain the filter text?
*
* @param filter
* @param value
* @return true if contains, false otherwise
*/



/**
* Is item match for prefix?
*
* @param prefix
* @param upperCasePrefix
* @param item
* @return true if match, false otherwise
*/



/**
* @return initialItems
*/



/**
* OAuth2 authorization scheme. Sets an authorization header with a value of the
* space-separate user principal name and password from credentials.
*/



/**
* Load URL selected taking into account links that can be opened internally in the app
*
* @param context
* @param url
*/



/**
* Class to hold settings used to search commits.
*/



/**
* Base class for activity tests
* 
* @param <T>
*/



/**
* Tests of {@link LoginActivity}
*/



/**
* Status of a commit in a repository
*/



/**
* Repository search wizard
*/



/**
* Property page for elements that can adapt to a {@link Repository} object.
*/



/**
* Unit tests of {@link StashCreateCommand}
*/



/**
* Command class to stash changes in the working directory and index in a
* commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Unit tests of {@link CommitFinder}
*/



/**
* Toggles the "Display Latest Branch Commit" preference
*/



/**
* Create icon
*/



/**
* Delete icon
*/



/**
* Push icon
*/



/**
* Wiki icon
*/



/**
* Upload icon
*/



/**
* Gist icon
*/



/**
* Add member icon
*/



/**
* Follow icon
*/



/**
* Watch icon
*/



/**
* Pull request icon
*/



/**
* Issue open icon
*/



/**
* Issue reopen icon
*/



/**
* Issue close icon
*/



/**
* Issue comment icon
*/



/**
* Comment icon
*/



/**
* Preference page for the History view
*/



/** Preference page for views preferences */



/**
* GitHub user class.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* GitHub request error class
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Request exception class that wraps an {@link RequestError} object.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Tree filter that counts all files visited
*/



/**
* Unit tests of {@link FileCountFilter}
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Filter that tracks the impact of commits measure in terms of files changed
*/



/**
* Filter that tracks the impact of commits measure in terms of lines changed
*/



/**
* Class that tracks the impact of a specific commit
*/



/**
* 
*/



/**
* OAuth2 constants
*/



/**
* NLS messages
*/



/**
* Dialog to display authorization page for an OAuth2 request
*/



/**
* OAuth2 client class.
*/



/**
* Plug-in class
*/



/**
* Action to get an OAuth2 access token for a client
*/



/**
* OAuth2 utilities.
*/



/**
* Utilities for dealing with Markdown files
*/



/**
* Is the the given file name a Markdown file?
*
* @param name
* @return true if the name has a markdown extension, false otherwise
*/



/**
* Helper for creating intents
*/



/**
* Prefix for all intents created
*/



/**
* Prefix for all extra data added to intents
*/



/**
* Repository handle
*/



/**
* Repository ids collection handle
*/



/**
* Repository name
*/



/**
* Repository owner
*/



/**
* Issue number
*/



/**
* Issue handle
*/



/**
* Issue number collection handle
*/



/**
* Gist id
*/



/**
* List of Gist ids
*/



/**
* Gist handle
*/



/**
* Gist file handle
*/



/**
* User handle
*/



/**
* Issue filter handle
*/



/**
* Comment body
*/



/**
* Comments handle
*/



/**
* Integer position
*/



/**
* Action bar title
*/



/**
* Action bar subtitle
*/



/**
* Resolve the {@link RepositoryId} referenced by the given intent
*
* @param intent
* @return repository id
*/



/**
* Builder for generating an intent configured with extra data such as an issue, repository, or gist
*/



/**
* Create builder with suffix
*
* @param actionSuffix
*/



/**
* Add repository id to intent being built up
*
* @param repositoryId
* @return this builder
*/



/**
* Add repository to intent being built up
*
* @param repository
* @return this builder
*/



/**
* Add issue to intent being built up
*
* @param issue
* @return this builder
*/



/**
* Add gist to intent being built up
*
* @param gist
* @return this builder
*/



/**
* Add gist id to intent being built up
*
* @param gist
* @return this builder
*/



/**
* Add gist file to intent being built up
*
* @param file
* @return this builder
*/



/**
* Add user to intent being built up
*
* @param user
* @return this builder;
*/



/**
* Add extra field data value to intent being built up
*
* @param fieldName
* @param value
* @return this builder
*/



/**
* Add extra field data value to intent being built up
*
* @param fieldName
* @param value
* @return this builder
*/



/**
* Add extra field data value to intent being built up
*
* @param fieldName
* @param value
* @return this builder
*/



/**
* Get built intent
*
* @return intent
*/



/**
* Operation that wraps another operation and handles lock failures
*/



/**
* Unit tests of {@link StashApplyCommand}
*/



/**
* Command class to apply a stashed commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Issue filter containing at least one valid query
*/



/** serialVersionUID */



/**
* Create filter
*
* @param repository
*/



/**
* Set only open issues to be returned
*
* @param open
*            true for open issues, false for closed issues
* @return this filter
*/



/**
* Add label to filter
*
* @param label
* @return this filter
*/



/**
* @param labels
* @return this filter
*/



/**
* @return labels
*/



/**
* @return repository
*/



/**
* @param milestone
* @return this filter
*/



/**
* @return milestone
*/



/**
* @param assignee
* @return this filter
*/



/**
* Are only open issues returned?
*
* @return true if open only, false if closed only
*/



/**
* @return assignee
*/



/**
* Create a map of all the request parameters represented by this filter
*
* @return non-null map of filter request parameters
*/



/**
* Get display {@link CharSequence} representing this filter
*
* @return display
*/

} catch (CloneNotSupportedException e) {
// This should never happen since this class implements Cloneable



/**
* Adapter to display a list of {@link IssueFilter} objects
*/



/**
* Create {@link IssueFilter} list adapter
*
* @param inflater
* @param elements
* @param avatars
*/



/**
* Create {@link IssueFilter} list adapter
*
* @param inflater
* @param avatars
*/



/**
* View of an issue filter
*/



/**
* Avatar image view
*/



/**
* Repository text view
*/



/**
* Filter label text view
*/



/**
* Create holder for view
*
* @param view
*/



/**
* Fragment to display a list of {@link IssueFilter} objects
*/



/**
* Activity to display a list of saved {@link IssueFilter} objects
*/



/**
* Create intent to browse issue filters
*
* @return intent
*/



/**
* Get quote for single day
*
* @throws Exception
*/



/**
* Verify year start helper
*/



/**
* Verify year end helper
*/



/**
* Get date of stock quote
*
* @see #next()
* @return date
*/



/**
* Get open price of stock quote
*
* @see #next()
* @return open
*/



/**
* Get close price of stock quote
*
* @see #next()
* @return close
*/



/**
* Get high price of stock quote
*
* @see #next()
* @return high
*/



/**
* Get low price of stock quote
*
* @see #next()
* @return low
*/



/**
* Get volume of stock quote
*
* @see #next()
* @return volume
*/



/**
* Set symbol of request
*
* @param symbol
* @return this request
*/



/**
* Set start date of request
*
* @param startDate
* @return this request
*/



/**
* Set start date of request
*
* @param startDate
* @return this request
*/



/**
* Set end date of request
*
* @param endDate
* @return this request
*/



/**
* Set end date of request
*
* @param endDate
* @return this request
*/



/**
* Release the resources held by this request
*
* @return this request
*/

} catch (IOException ignored) {
// Ignored



/**
* Create request to uri
* <p>
* Sub-classes may override this method
*
* @param uri
* @return request
* @throws IOException
*/



/**
* Open reader to configured request parameters
*
* @return reader
* @throws IOException
*/

}
// Skip first line that contains column names



/**
* Advance to next stock quote in response
* <p>
* This method will open a new request on the first call and will update the
* fields for open, close, high, low, and volume each time it is called.
*
* @return true if another quote was parsed, false if no more quotes exist to
*         read
* @throws IOException
*/



/**
* Get today's date
*
* @return date
*/



/**
* Get yesterday's date
*
* @return date
*/



/**
* Add the given number of days to the given date
*
* @param days
* @param from
* @return date
*/



/**
* Add the given number of days to the given date
*
* @param days
* @param from
* @return date
*/



/**
* Add the given number of days to the given date
*
* @param days
* @param from
* @return date
*/



/**
* Add the given number of months to the given date
*
* @param months
* @param from
* @return date
*/



/**
* Add the given number of months to the given date
*
* @param months
* @param from
* @return date
*/



/**
* Add the given number of months to the given date
*
* @param months
* @param from
* @return date
*/



/**
* Add the given number of years to the given date
*
* @param years
* @param from
* @return date
*/



/**
* Add the given number of years to the given date
*
* @param years
* @param from
* @return date
*/



/**
* Add the given number of years to the given date
*
* @param years
* @param from
* @return date
*/



/**
* Add the given number of weeks to the given date
*
* @param weeks
* @param from
* @return date
*/



/**
* Add the given number of weeks to the given date
*
* @param weeks
* @param from
* @return date
*/



/**
* Add the given number of weeks to the given date
*
* @param weeks
* @param from
* @return date
*/



/**
* Get the date of the first day of the current year
*
* @return date
*/



/**
* Get the date of the last day of the current year
*
* @return date
*/



/**
* Test case utilities
*/



/**
* Show annotation action class.
*/



/**
* Show annotation action handler
*/



/**
* Unit tests of {@link GitHubClient}
*/

18a19,21

/**
* All headless unit tests of GitHub Java API
*/



/**
* Interface for container classes that can provide a collection of resources of
* the same type.
* 
* @param <V>
*/



/**
* Log
*/



/**
* 
* Class to wrap an {@link IAvatarCallback} instance and run it as a runnable on
* the UI-thread.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
31a39,43


/**
* View Air Traffic action
*/



/**
* Exception class to be thrown when iterating over pages fails
*/



/**
* Iterator for getting paged responses
* 
* @param <V>
*/



/**
* Interface facade to searching repositories
*/



/**
* Search for repositories matching query
*
* @param query
* @return list of repositories matching query
* @throws IOException
*/



/**
* Activity to search repositories
*/



/**
* Refresh the fragment's list
*/



/**
* Create adapter for list of items
*
* @param items
* @return list adapter
*/



/**
* Show message via a {@link Toast}
* <p>
* This method ensures the {@link Toast} is displayed on the UI thread and so it may be called from any thread
*
* @param message
*/

35a41,55

/**
* Show {@link Toast} and log given exception
*
* @param e
*/



/**
* Item view for a repository issue
*/



/**
* Issue number text
*/



/**
* Issue title text
*/



/**
* Issue opener avatar
*/



/**
* Issue opener login
*/



/**
* Issue creation date text
*/



/**
* Number of issue comments
*/



/**
* Icon for pull requests
*/



/**
* Initial paint flags of {@link #number}
*/



/**
* @param view
*/



/**
* Adapter for a list of {@link Issue} objects
*/



/**
* @param inflater
* @param elements
* @param avatars
*/



/**
* @param inflater
* @param avatars
*/



/**
* {@link ArrayList} handle of {@link User} objects
*/



/**
* Sets the logo on the {@link ActionBar} to the user's avatar.
*
* @param actionBar
* @param userReference
* @return this helper
*/



/**
* Unit tests of {@link SearchIssue}
*/



/**
* GitHub v2 issue model class.
*/



/**
* Number of forks
*/



/**
* Dropdown list adapter to display orgs. and other context-related activity links
*/



/**
* Action for Gists
*/



/**
* Action for the issues dashboard
*/



/**
* Action for issues filter
*/



/**
* Create adapter with initial orgs
*
* @param context
* @param orgs
* @param avatarHelper
*/



/**
* Is the given position an org. selection position?
*
* @param position
* @return true if org., false otherwise
*/



/**
* Get action at given position
*
* @param position
* @return action id
*/



/**
* Set orgs to display
*
* @param orgs
* @return this adapter
*/



/**
* @param selected
* @return this adapter
*/



/**
* @return selected
*/



/**
* Filter that collects the occurrence count of every file extension of each
* tree visited.
*/



/**
* Class representing the occurrences of a file extension
*/



/**
* Unit tests of {@link ExtensionOccurrenceFilter}
*/



/**
* Live unit tests of {@link LabelService}
*/



/**
* Dynamically builds the "Switch to..." sub-menu
*/



/**
* Activity to display a collection of Gists in a pager
*/



/**
* Create an intent to show a single gist
*
* @param gist
* @return intent
*/



/**
* Create an intent to show gists with an initial selected Gist
*
* @param gists
* @param position
* @return intent
*/


// Support opening this activity with a single Gist that may be present in the intent but not currently present
// in the store

public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
// Intentionally left blank

public void onPageScrollStateChanged(int state) {
// Intentionally left blank

} catch (IOException ignored) {
// Ignored



/**
* Unit tests of {@link RepositoryService}
*/



/**
* Default client used to communicate with GitHub API
*/

public void checkClientTrusted(X509Certificate[] chain, String authType) {
// Intentionally left blank



/**
* Create client
*/



/**
* Create client
*
* @param hostname
* @param port
* @param scheme
*/



/**
* Create client
*
* @param hostname
*/



/**
* {@link GitHubClient} extensions that integrates with the Android account manager to provide request credentials
*/



/**
* Create account-aware client
*
* @param accountProvider
*/



/**
* Create account-aware client
*
* @param hostname
* @param accountProvider
*/


// Credentials setting must come before super call



/**
* Model class for the comparison of two commits
*/



/**
* Unit tests of {@link RepositoryCommitCompare}
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Set whether or not the underlying connection should follow redirects in
* the response.
*
* @param followRedirects - true fo follow redirects, false to not.
*/



/**
* Unit tests of {@link LineHistoryCommand}
*/



/**
* Annotate command for building a {@link Revision} list for a file path.
*/



/**
* Line class that spans one or more continuous revisions.
*/



/**
* Class containing all the lines present in a file revision.
*/



/**
* Class to assemble the history of every line in every revision of a file.
*/



/**
* Determines when revision building should continue as each revision with line
* history is generated.
*/



/**
* Commit editor input class. This class wraps a {@link RepositoryCommit} to be
* viewed in an editor.
*/



/**
* Unit tests for {@link CommitEditorInput}
*/



/**
* Unit tests of {@link LockFile}
*/

0a1,21
/*
* Copyright (c) 2011 Kevin Sawicki <kevinsawicki@gmail.com>
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/



/**
* Unit tests of {@link MilestoneService}
*/

206a195,248

/**
* Format given HTML string so it is ready to be presented in a text view
*
* @param html
* @return formatted HTML
*/


// Remove e-mail toggle link


// Remove signature


// Replace div with e-mail content with block quote


// Remove hidden div


// Replace paragraphs with breaks



/**
* Get last span of given kind
*
* @param text
* @param kind
* @return span
*/



/**
* Label comparator using case-insensitive name comparisons.
*/



/**
* Editor class to view a commit in a form editor.
*/



/**
* Represents array of any type as list of objects so we can easily iterate over it
* @param array of elements
* @return list with the same elements
*/

List<Object> result = new ArrayList<Object>();
// Arrays of the primitive types can't be cast to array of Object, so this:



/**
* Operation that generates {@link SCMRevisionState} state for a collection of
* {@link BuildRepository} instances
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link RepositoryStateOperation}
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link StashListCommand}
*/



/**
* Command class to list the stashed commits in a repository.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Generator that visits all submodule entries found in the index tree
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule add command.
*
* This will a
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleGenerator}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Unit tests of {@link CommitComment}
*/



/**
* Unit tests of {@link PullRequestMarker}
*/



/**
* Unit tests of {@link TreeEntry}
*/



/**
* Unit tests of {@link Reference}
*/



/**
* Unit tests of {@link Team}
*/



/**
* Unit tests of {@link Tag}
*/



/**
* Unit tests of {@link Commit}
*/



/**
* Unit tests of {@link Language}
*/



/**
* Unit tests of {@link Download}
*/



/**
* Unit tests of {@link TypedResource}
*/



/**
* Unit tests of {@link RepositoryCommit}
*/



/**
* Unit tests of {@link FieldError}
*/



/**
* Unit tests of {@link CommitUser}
*/



/**
* Unit tests of {@link CommitFile}
*/



/**
* Unit tests of {@link SearchRepository}
*/


/**
* Unit tests of {@link DownloadResource}
*/



/**
* Unit tests of {@link UserPlan}
*/



/**
* Unit tests of {@link Id}
*/



/**
* Unit tests of {@link RepositoryId}
*/



/**
* Unit tests of {@link Key}
*/



/**
* Unit tests of {@link Tree}
*/



/******************************************************************************
*  Copyright (c) 2011 GitHub Inc.
*  All rights reserved. This program and the accompanying materials
*  are made available under the terms of the Eclipse Public License v1.0
*  which accompanies this distribution, and is available at
*  http://www.eclipse.org/legal/epl-v10.html
*
*  Contributors:
*    Kevin Sawicki (GitHub Inc.) - initial API and implementation
*****************************************************************************/



/**
* Unit tests of {@link Repository}
*/



/**
* Unit tests of {@link User}
*/



/**
* Unit tests of {@link MergeStatus}
*/



/**
* Unit tests of {@link ShaResource}
*/



/**
* Unit tests of {@link Blob} class
*/



/**
* Request to update the current reference
*/



/**
* Deliver dialog result to fragment at given position
*
* @param position
* @param requestCode
* @param resultCode
* @param arguments
* @return this adapter
*/



/**
* Utilities for working with {@link Reference}s
*/



/**
* Is reference a branch?
*
* @param ref
* @return true if branch, false otherwise
*/



/**
* Is reference a tag?
*
* @param ref
* @return true if tag, false otherwise
*/



/**
* Get path of ref with leading 'refs/' segment removed if present
*
* @param ref
* @return full path
*/



/**
* Get short name for ref
*
* @param ref
* @return short name
*/



/**
* Should the given reference be included as valid?
* <p>
* This filters out pull request refs
*
* @param ref
* @return true if valid, false otherwise
*/



/**
* Dialog to select a branch or tag
*/



/**
* Create dialog helper to display refs
*
* @param activity
* @param requestCode
* @param repository
* @param service
*/



/**
* Show dialog with given reference selected
*
* @param selectedRef
*/



/**
* Dialog fragment to select a branch or tag
*/



/**
* Get selected reference from results bundle
*
* @param arguments
* @return user
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param choices
* @param selectedChoice
*/



/**
* Unit tests of {@link GsonUtils}
*/



/**
* Unit tests of {@link BranchProjectTracker}
*/



/**
* Search unit test suite
*/



/**
* Base operation that supports adding pre/post tasks
*/



/**
* Class to track which projects are imported for each branch.
* <p>
* A unique preference is set for each repository/branch combination that is
* persisted that includes information to be able to restore projects when the
* branch is later checked out.
*
* <p>
* The workflow is as follows:
* <p>
* 1. Call {@link #snapshot()} to get the current projects for the currently
* checked out branch
* <p>
* 2. Call {@link #save(IMemento)} after the new branch has been successfully
* checked out with the memento returned from step 1
* <p>
* 3. Call {@link #restore(IProgressMonitor)} to restore the projects for the
* newly checked out branch
*
*/



/**
* Verify data is send when receiving response integer header without first
* calling {@link HttpRequest#code()}
*
* @throws Exception
*/



/**
* Request an image using the contents API if the source URI is a path to a
* file already in the repository
*
* @param source
* @return
* @throws IOException
*/

String prefix = segments.get(2);
// Two types of urls supported:
// github.com/github/android/raw/master/app/res/drawable-xhdpi/app_icon.png
// github.com/github/android/blob/master/app/res/drawable-xhdpi/app_icon.png?raw=true

} catch (Exception e) {
// Ignore and attempt request over regular HTTP request



/**
* Get scale for image of size and max height/width
*
* @param size
* @param width
* @param height
* @return scale
*/



/**
111a147,159
* Get size of image
*
* @param image
* @return size
*/



/**
121,129c169,170

return getBitmap(imagePath, getScale(size, width, height));
}
131c172,182


/**
* Get bitmap with maximum height or width
*
* @param image
* @param width
* @param height
* @return image
*/



/**
* Cherry pick operation
*/



/**
* Verify responses read from separate instance when flush to disk is enabled
* on first request
*
* @throws Exception
*/

} catch (IOException ignored) {
// Ignored



/**
* Create stream that will be cached after it is read
*
* @param connection
* @param flushCacheOnClose
*          true to flush the cache when the returned response is closed
* @return input stream that will be cached, null if cannot be cached
*/



/**
* Fragment to display a list of {@link Repository} instances
*/



/**
* @param query
* @return this fragment
*/



/**
* Unit tests of {@link BuildRepositoryState}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Repository state class that stores an {@link ObjectId} representing the state
* of a {@link BuildRepository}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Commit calendar class
*/



/**
* Commit histogram class
*/



/**
* Filter that generates a histogram of commits
*/



/**
* Comparator that sorts by most user activity first
*/



/**
* Comparator that sorts by earliest user activity first
*/



/**
* Comparator that sorts by latest user activity first
*/



/**
* Months with number of days and indices
*/



/**
* Commit user activity class
*/



/**
* Commit activity in a given year
*/



/**
* Unit test of {@link Month} enum
*/



/**
* Unit tests of {@link CommitHistogramFilter}
*/



/**
* Unit tests of {@link CommitCalendar}
*/



/**
* Task to refresh a repository
*/



/**
* Create task for context and id provider
*
* @param context
* @param repo
*/



/**
* Parses a {@link Repository} from a {@link Uri}
*/



/**
* Attempt to parse a {@link Repository} from the given {@link Uri}
*
* @param uri
* @return {@link Repository} or null if unparseable
*/



/**
* Activity to launch other activities based on the intent's data {@link URI}
*/



/**
* Contents of a path in a repository
*/



/**
* Service for accessing repository contents
*
* @see <a href="http://developer.github.com/v3/repos/contents">GitHub contents
*      API documentation</a>
*/



/**
* Unit tests of {@link ContentsService}
*/



/**
* Unit tests of {@link RepositoryContents}
*/



/**
* Author colors
*/



/**
* Annotation information control
*/



/**
* Annotation information control creator
*/



/**
* Blame operation
*/



/**
* Annotation revision
*/



/**
* Show annotation action class.
*/



/**
* Show blame annotations action handler
*/



/**
* Base submodule command with helpers for finding the selected submodule paths
* and parent repositories
*
* @param <V>
*/



/**
* Command to update selected submodules
*/



/**
* Operation that updates a repository's submodules
*/



/**
* Helper to display a single choice dialog
*/



/**
* Arguments key for the selected item
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param choices
* @param selectedChoice
*/



/**
* Helper to display multiple choice dialogs
*/



/**
* Arguments key for the selected items
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param choices
* @param selectedChoices
*/



/**
* Base dialog fragment helper
*/



/**
* Dialog message
*/



/**
* Dialog message
*/



/**
* Request code
*/



/**
* Show dialog
*
* @param activity
* @param fragment
* @param arguments
* @param tag
*/



/**
* Create bundle with standard arguments
*
* @param title
* @param message
* @param requestCode
* @return bundle
*/



/**
* Call back to the activity with the dialog result
*
* @param resultCode
*/



/**
* Get title
*
* @return title
*/



/**
* Get message
*
* @return mesage
*/



/**
* Dialog helper to display a list of milestones to select one from
*/



/**
* Create dialog helper to display milestones
*
* @param activity
* @param requestCode
* @param repository
* @param service
*/



/**
* Show dialog with given milestone selected
*
* @param selectedMilestone
*/



/**
* Get milestone number for title
*
* @param title
* @return number of -1 if not found
*/



/**
* Unit tests of {@link CommitListFilter}
*/

11a12,17

/**
* List fragment to load homogeneous items
*
* @param <E>
*            item type
*/



/**
* This class implements a {@link CredentialsProvider} for EGit. The provider
* tries to retrieve the credentials (user, password) for a given URI from the
* secure store. A login popup is shown if no credentials are available.
*/



/**
* This class implements a login dialog asking for user and password for a given
* URI.
*/



/**
* This class implements services for interactive login and changing stored
* credentials.
*/



/**
* Resolves Git related information so launchers can use them
*/



/**
* Unit tests of {@link CommitUrlMatcher}
*/



/**
* Check non-matching URLs
*/



/**
* Verify issue URL matching provides commits
*/



/**
* Matcher for commit URLs
* <p>
* This class is not thread-safe
*/



/**
* Match for a commit in a repository
*/



/**
* Repository of commit
*/



/**
* SHA-1 of commit
*/



/**
* Get commit match from URL
*
* @param url
* @return commit match or null if the given URL wasn't a match
*/



/**
* Repository search wizard
*/



/**
333a344,353
}


/**
* Load this resource using the self URI
*
* @return resource loaded from {@link #selfUri()} value
* @throws IOException
*/



/**
* Unit tests of {@link Resource#load()}
*/



/**
* Setup server
*
* @throws Exception
*/



/**
* Add pages
*/



/**
* Get the loaded self resource resource
*
* @throws Exception
*/


// Restart loader if default account doesn't match currently loaded
// account

146a147,166

/**
* Get default account where password can be retrieved
*
* @param context
* @return password accessible account or null if none
*/

225a224,235
// Finish task if valid account exists



/**
* Class to track all renames encountered during a {@link RevWalk}
*/



/**
* Operation that creates and clones a {@link Repository} using a
* {@link BuildRepository}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link CloneOperation}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Generic weak store of ids to items
*/



/**
* Create item reference
*
* @param item
* @param id
* @param queue
*/



/**
* Generic reference store
*
* @param <V>
*/



/**
* Create reference store
*/



/**
* Get item with id from store
*
* @param id
* @return item
*/



/**
* Insert item with id into store
*
* @param id
* @param item
*/



/**
* Store of loaded issues
*/



/**
* Create issue store
*
* @param service
*/



/**
* Get issue
*
* @param repository
* @param number
* @return issue or null if not in store
*/



/**
* Add issue to store
*
* @param issue
* @return issue
*/



/**
* Add issue to store
*
* @param repository
* @param issue
* @return issue
*/



/**
* Refresh issue
*
* @param repository
* @param number
* @return refreshed issue
* @throws IOException
*/



/**
* Edit issue
*
* @param repository
* @param issue
* @return edited issue
* @throws IOException
*/



/**
* Store of Gists
*/



/**
* Create gist store
*
* @param service
*/



/**
* Get gist
*
* @param id
* @return gist or null if not in store
*/



/**
* Add gist to store
*
* @param gist
* @return gist
*/



/**
* Refresh gist
*
* @param id
* @return refreshed gist
* @throws IOException
*/



/**
* Edit gist
*
* @param gist
* @return edited gist
* @throws IOException
*/



/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/



/**
* Set octocons typeface on given text view
*
* @param textView
* @return text view
*/



/**
* Dialog to display when a revert fails
*/

17a17,19

/**
* Main GitHub application
*/



/**
* Section containing commit message, author, and committer controls.
*/



/**
* An exception occurring when a file cannot be locked
*/



/**
* Gist repository connector user interface class.
*/



/**
* Viewer to display {@link FileDiff} objects in a table.
*/



/**
* Command class to delete a stashed commit reference
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Utility for writing reflog entries
*/



/**
* Unit tests of {@link StashCreateCommand}
*/

46a49,64

/**
* Get the value of the key as a {@link String}
*
* @param data
* @param key
* @return value, may be null
* @throws JSONException
*/



/**
* Unit tests of {@link Label}
*/



/**
* Operation that checks out a specific commit
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link TreeCheckoutOperation}
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Request to view a repository
*/



/**
* Result codes
*/



/**
* Resource being viewed was modified
*/



/**
* 
*/



/**
* Loader which extends AsyncTaskLoaders and handles caveats as pointed out in
* http://code.google.com/p/android/issues/detail?id=14944.
* <p/>
* Based on CursorLoader.java in the Fragment compatibility package
* 
* @param <D>
*            data type
* @author Alexander Blom (me@alexanderblom.se)
*/



/**
* Activity to display list of gauge summaries
*/



/**
* Fragment to display a list of gauges
*/



/**
* View holder for a {@link Gauge}
*/



/**
* List loading fragment for a specific type
* 
* @param <E>
*/



/**
* Dated view summary
*/



/**
* Gauge information
*/



/**
* Collection of all gauges
*/



/**
* Gauges API service
*/



/**
* View summary
*/



/**
* Unit tests of {@link LockFile}
*/



/**
* Command to add a new submodule to a repository
*/



/**
* Wizard to configure a new submodule
*/



/**
* Wizard page to configure the path of a submodule
*/



/**
* Operation to add a submodule to a repository
*/



/**
* Unit tests of {@link UrlUtils}
*/



/**
* Unit tests of {@link LabelComparator}
*/



/**
* Unit tests of {@link EncodingUtils}
*/



/**
* Unit tests of {@link DateUtils}
*/



/**
* Unit tests of {@link MilestoneComparator}
*/



/**
* Test of {@link CommitUtils}
*/



/**
* Test commit SHA-1 abbreviation
*/



/**
* Test commit name parsing from path
*/



/**
* Test commit SHA-1 evaluation
*/



/**
* Test parsing author from commit
*/



/**
* Test parsing committer from commit
*/



/**
* Test parsing author date from commit
*/



/**
* Test parsing committer date from commit
*/

38a39,43

/**
* Length of used for abbreviations
*/



/**
* Get file name for path
*
* @param path
* @return last segment of path
*/



/**
* Create request with malformed URL
*/



/**
* Create request with malformed URL
*/



/**
* Set request buffer size to negative value
*/



/**
* Make a GET request with an empty body response
*
* @throws Exception
*/



/**
* Make a GET request with an empty body response
*
* @throws Exception
*/



/**
* Make a GET request with a URL that needs encoding
*
* @throws Exception
*/



/**
* Make a GET request with a URL that needs encoding
*
* @throws Exception
*/



/**
* Make a GET request with a URL that needs encoding
*
* @throws Exception
*/



/**
* Make a DELETE request with an empty body response
*
* @throws Exception
*/



/**
* Make a DELETE request with an empty body response
*
* @throws Exception
*/



/**
* Make an OPTIONS request with an empty body response
*
* @throws Exception
*/



/**
* Make an OPTIONS request with an empty body response
*
* @throws Exception
*/



/**
* Make a HEAD request with an empty body response
*
* @throws Exception
*/



/**
* Make a HEAD request with an empty body response
*
* @throws Exception
*/



/**
* Make a PUT request with an empty body response
*
* @throws Exception
*/



/**
* Make a PUT request with an empty body response
*
* @throws Exception
*/



/**
* Make a PUT request with an empty body response
*
* @throws Exception
*/



/**
* Make a TRACE request with an empty body response
*
* @throws Exception
*/



/**
* Make a POST request with an empty request body
*
* @throws Exception
*/



/**
* Make a POST request with an empty request body
*
* @throws Exception
*/



/**
* Make a POST request with a non-empty request body
*
* @throws Exception
*/



/**
* Make a POST request with a non-empty request body
*
* @throws Exception
*/



/**
* Make a POST request with multiple files in the body
*
* @throws Exception
*/



/**
* Make a POST request with a non-empty request body
*
* @throws Exception
*/



/**
* Make a POST request with a non-empty request body
*
* @throws Exception
*/



/**
* Make a post with an explicit set of the content length
*
* @throws Exception
*/



/**
* Make a post of form data
*
* @throws Exception
*/



/**
* Make a post with an empty form data map
*
* @throws Exception
*/



/**
* Make a post in chunked mode
*
* @throws Exception
*/



/**
* Make a GET request for a non-empty response body
*
* @throws Exception
*/



/**
* Make a GET request with a response that includes a charset parameter
*
* @throws Exception
*/



/**
* Make a GET request with a response that includes a charset parameter
*
* @throws Exception
*/



/**
* Make a GET request with basic authentication specified
*
* @throws Exception
*/



/**
* Make a GET and get response as a input stream reader
*
* @throws Exception
*/



/**
* Make a POST and send request using a writer
*
* @throws Exception
*/



/**
* Make a GET and get response as a buffered reader
*
* @throws Exception
*/



/**
* Make a GET and get response as a input stream reader
*
* @throws Exception
*/



/**
* Make a GET and get response body as byte array
*
* @throws Exception
*/



/**
* Make a GET request that returns an error string
*
* @throws Exception
*/



/**
* Make a GET request that returns an empty error string
*
* @throws Exception
*/



/**
* Verify 'Server' header
*
* @throws Exception
*/



/**
* Verify 'Expires' header
*
* @throws Exception
*/



/**
* Verify 'Last-Modified' header
*
* @throws Exception
*/



/**
* Verify 'Date' header
*
* @throws Exception
*/



/**
* Verify 'ETag' header
*
* @throws Exception
*/



/**
* Verify 'Location' header
*
* @throws Exception
*/



/**
* Verify 'Content-Encoding' header
*
* @throws Exception
*/



/**
* Verify 'Content-Type' header
*
* @throws Exception
*/



/**
* Verify 'Cache-Control' header
*
* @throws Exception
*/



/**
* Verify setting headers
*
* @throws Exception
*/



/**
* Verify getting all headers
*
* @throws Exception
*/



/**
* Verify setting number header
*
* @throws Exception
*/



/**
* Verify 'User-Agent' request header
*
* @throws Exception
*/



/**
* Verify 'Accept' request header
*
* @throws Exception
*/



/**
* Verify 'Accept' request header when calling
* {@link HttpRequest#acceptJson()}
*
* @throws Exception
*/



/**
* Verify 'If-None-Match' request header
*
* @throws Exception
*/



/**
* Verify 'Accept-Charset' request header
*
* @throws Exception
*/



/**
* Verify 'Accept-Encoding' request header
*
* @throws Exception
*/



/**
* Verify 'If-Modified-Since' request header
*
* @throws Exception
*/



/**
* Verify multipart with file, stream, number, and string parameters
*
* @throws Exception
*/



/**
* Verify response in {@link Appendable}
*
* @throws Exception
*/



/**
* Verify response in {@link Writer}
*
* @throws Exception
*/



/**
* Verify response via a {@link PrintStream}
*
* @throws Exception
*/



/**
* Verify response in {@link File}
*
* @throws Exception
*/



/**
* Verify certificate and host helpers on HTTPS connection
*
* @throws Exception
*/



/**
* Verify certificate and host helpers ignore non-HTTPS connection
*
* @throws Exception
*/



/**
* Send a stream that throws an exception when read from
*
* @throws Exception
*/



/**
* Send a stream that throws an exception when read from
*
* @throws Exception
*/



/**
* Make a GET request and get the code using an {@link AtomicInteger}
*
* @throws Exception
*/



/**
* Make a GET request that should be compressed
*
* @throws Exception
*/

} catch (IOException ignored) {
// Ignored



/**
* Get header with multiple response values
*
* @throws Exception
*/



/**
* Get header values when not set in response
*
* @throws Exception
*/



/**
* Get header parameter value
*
* @throws Exception
*/



/**
* Get header parameter value
*
* @throws Exception
*/



/**
* Get header parameter value
*
* @throws Exception
*/



/**
* Get header parameter value
*
* @throws Exception
*/



/**
* Get header parameter value
*
* @throws Exception
*/



/**
* Get header parameter value
*
* @throws Exception
*/



/**
* Get header parameter value
*
* @throws Exception
*/



/**
* Get header parameter value
*
* @throws Exception
*/



/**
* Get header parameter values
*
* @throws Exception
*/



/**
* Get header parameter values
*
* @throws Exception
*/



/**
* Get header parameter values
*
* @throws Exception
*/



/**
* Verify getting date header with default value
*
* @throws Exception
*/



/**
* Verify getting date header with default value
*
* @throws Exception
*/



/**
* Verify getting int header with default value
*
* @throws Exception
*/



/**
* Verify getting int header with default value
*
* @throws Exception
*/



/**
* Verify sending form data as a sequence of {@link Entry} objects
*
* @throws Exception
*/



/**
* Verify sending form data where entry value is null
*
* @throws Exception
*/



/**
* Verify POST with query parameters
*
* @throws Exception
*/



/**
* Verify POST with escaped query parameters
*
* @throws Exception
*/



/**
* Verify GET with query parameters
*
* @throws Exception
*/



/**
* Verify GET with escaped query parameters
*
* @throws Exception
*/



/**
* Verify DELETE with query parameters
*
* @throws Exception
*/



/**
* Verify DELETE with escaped query parameters
*
* @throws Exception
*/



/**
* Verify PUT with query parameters
*
* @throws Exception
*/



/**
* Verify PUT with escaped query parameters
*
* @throws Exception
*/



/**
* Append with base URL with no path
*
* @throws Exception
*/



/**
* Append with base URL with path
*
* @throws Exception
*/



/**
* Append multiple params
*
* @throws Exception
*/



/**
* Append null params
*
* @throws Exception
*/



/**
* Append empty params
*
* @throws Exception
*/



/**
* Append params with null values
*
* @throws Exception
*/



/**
* Simplified handler
*/



/**
* Handle request
*
* @param request
* @param response
*/



/**
* Read content
*
* @return content
*/



/**
* Write value
*
* @param value
*/



/**
* Write line
*
* @param value
*/



/**
* Server
*/



/**
* Set up server with handler
*
* @param handler
* @return port
* @throws Exception
*/



/**
* Tear down server if created
*
* @throws Exception
*/



/**
* Verify encoding of URLs
*/



/**
* Encoding malformed URI
*/



/**
* 'UTF-8' charset name
*/



/**
* 'Accept' header name
*/



/**
* 'Accept-Charset' header name
*/



/**
* 'Accept-Encoding' header name
*/



/**
* 'Authorization' header name
*/



/**
* 'Cache-Control' header name
*/



/**
* 'Content-Encoding' header name
*/



/**
* 'Content-Length' header name
*/



/**
* 'Content-Type' header name
*/



/**
* 'Date' header name
*/



/**
* 'ETag' header name
*/



/**
* 'Expires' header name
*/



/**
* 'If-None-Match' header name
*/



/**
* 'Last-Modified' header name
*/



/**
* 'Location' header name
*/



/**
* 'Server' header name
*/



/**
* 'User-Agent' header name
*/



/**
* 'DELETE' request method
*/



/**
* 'GET' request method
*/



/**
* 'HEAD' request method
*/



/**
* 'OPTIONS' options method
*/



/**
* 'POST' request method
*/



/**
* 'PUT' request method
*/



/**
* 'TRACE' request method
*/



/**
* 'charset' header value parameter
*/



/**
* <p>
* Encodes and decodes to and from Base64 notation.
* </p>
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.3.7
*/



/** The equals sign (=) as a byte. */



/** Preferred encoding. */



/** The 64 valid Base64 values. */



/** Defeats instantiation. */



/**
* <p>
* Encodes up to three bytes of the array <var>source</var> and writes the
* resulting four Base64 bytes to <var>destination</var>. The source and
* destination arrays can be manipulated anywhere along their length by
* specifying <var>srcOffset</var> and <var>destOffset</var>. This method
* does not check to make sure your arrays are large enough to accomodate
* <var>srcOffset</var> + 3 for the <var>source</var> array or
* <var>destOffset</var> + 4 for the <var>destination</var> array. The
* actual number of significant bytes in your array is given by
* <var>numSigBytes</var>.
* </p>
* <p>
* This is the lowest level of the encoding methods with all possible
* parameters.
* </p>
*
* @param source
*          the array to convert
* @param srcOffset
*          the index where conversion begins
* @param numSigBytes
*          the number of significant bytes in your array
* @param destination
*          the array to hold the conversion
* @param destOffset
*          the index where output will be put
* @return the <var>destination</var> array
* @since 1.3
*/



/**
* Encode string as a byte array in Base64 annotation.
*
* @param string
* @return The Base64-encoded data as a string
*/



/**
* Encodes a byte array into Base64 notation.
*
* @param source
*          The data to convert
* @return The Base64-encoded data as a String
* @throws NullPointerException
*           if source array is null
* @throws IllegalArgumentException
*           if source array, offset, or length are invalid
* @since 2.0
*/



/**
* Encodes a byte array into Base64 notation.
*
* @param source
*          The data to convert
* @param off
*          Offset in array where conversion should begin
* @param len
*          Length of data to convert
* @return The Base64-encoded data as a String
* @throws NullPointerException
*           if source array is null
* @throws IllegalArgumentException
*           if source array, offset, or length are invalid
* @since 2.0
*/



/**
* Similar to {@link #encodeBytes(byte[], int, int)} but returns a byte
* array instead of instantiating a String. This is more efficient if you're
* working with I/O streams and have large data sets to encode.
*
*
* @param source
*          The data to convert
* @param off
*          Offset in array where conversion should begin
* @param len
*          Length of data to convert
* @return The Base64-encoded data as a String if there is an error
* @throws NullPointerException
*           if source array is null
* @throws IllegalArgumentException
*           if source array, offset, or length are invalid
* @since 2.3.1
*/


// Bytes needed for actual encoding



/**
* HTTP request exception whose cause is always an {@link IOException}
*/



/**
* @param cause
*/



/**
* Get {@link IOException} that triggered this request exception
*
* @return {@link IOException} cause
*/



/**
* Operation that handles executing a callback once complete and handling
* nested exceptions
*
* @param <V>
*/



/**
* Run operation
*
* @return result
* @throws HttpRequestException
* @throws IOException
*/



/**
* Operation complete callback
*
* @throws IOException
*/



/**
* Class that ensures a {@link Closeable} gets closed with proper exception
* handling.
*
* @param <V>
*/



/**
* Create closer for operation
*
* @param closeable
* @param ignoreCloseExceptions
*/

} catch (IOException e) {
// Ignored



/**
* Class that and ensures a {@link Flushable} gets flushed with proper
* exception handling.
*
* @param <V>
*/



/**
* Create flush operation
*
* @param flushable
*/



/**
* Request output stream
*/



/**
* Create request output stream
*
* @param stream
* @param charset
* @param bufferSize
*/



/**
* Write string to stream
*
* @param value
* @return this stream
* @throws IOException
*/



/**
* Encode the given URL as an ASCII {@link String}
* <p>
* This method ensures the path and query segments of the URL are properly
* encoded such as ' ' characters being encoded to '%20' or any UTF-8
* characters that are non-ASCII. No encoding of URLs is done by default by
* the {@link HttpRequest} constructors and so if URL encoding is needed this
* method should be called before calling the {@link HttpRequest} constructor.
*
* @param url
* @return encoded URL
* @throws HttpRequestException
*/



/**
* Append given map as query parameters to the base URL
* <p>
* Each map entry's key will be a parameter name and the value's
* {@link Object#toString()} will be the parameter value.
*
* @param url
* @param params
* @return URL with appended query params
*/


// Add trailing slash if the base URL doesn't have any path segments.
// The following test is checking for the last slash not being part of
// the protocol to host separator '://'.



/**
* Start a 'GET' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start a 'GET' request to the given URL along with the query params
*
* @param baseUrl
* @param params
*          The query parameters to include as part of the baseUrl
* @param encode
*          True if the params need to be encoded, otherwise false
* @return request
*/



/**
* Start a 'GET' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start a 'POST' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start a 'POST' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start a 'POST' request to the given URL along with the query params
*
* @param baseUrl
* @param params
*          The query parameters to include as part of the baseUrl
* @param encode
*          True if the params need to be encoded, otherwise false
* @return request
*/



/**
* Start a 'PUT' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start a 'PUT' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start a 'PUT' request to the given URL along with the query params
*
* @param baseUrl
* @param params
*          The query parameters to include as part of the baseUrl
* @param encode
*          True if the params need to be encoded, otherwise false
* @return request
*/



/**
* Start a 'DELETE' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start a 'DELETE' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start a 'DELETE' request to the given URL along with the query params
*
* @param baseUrl
* @param params
*          The query parameters to include as part of the baseUrl
* @param encode
*          True if the params need to be encoded, otherwise false
* @return request
*/



/**
* Start a 'HEAD' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start a 'HEAD' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start an 'OPTIONS' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start an 'OPTIONS' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start a 'TRACE' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Start a 'TRACE' request to the given URL
*
* @param url
* @return request
* @throws HttpRequestException
*/



/**
* Set the 'http.keepAlive' property to the given value.
* <p>
* This setting will apply to requests.
*
* @param keepAlive
*/



/**
* Set the 'http.proxyHost' & 'https.proxyHost' properties to the given host
* value.
* <p>
* This setting will apply to requests.
*
* @param host
*/



/**
* Set the 'http.proxyPort' & 'https.proxyPort' properties to the given port
* number.
* <p>
* This setting will apply to requests.
*
* @param port
*/



/**
* Set the 'http.nonProxyHosts' properties to the given host values. Hosts
* will be separated by a '|' character.
* <p>
* This setting will apply to requests.
*
* @param hosts
*/



/**
* Set property to given value.
* <p>
* Specifying a null value will cause the property to be cleared
*
* @param name
* @param value
* @return previous value
*/



/**
* Create HTTP connection wrapper
*
* @param url
* @param method
* @throws HttpRequestException
*/



/**
* Create HTTP connection wrapper
*
* @param url
* @param method
* @throws HttpRequestException
*/



/**
* Get underlying connection
*
* @return connection
*/



/**
* Set whether or not to ignore exceptions that occur from calling
* {@link Closeable#close()}
* <p>
* The default value of this setting is <code>true</code>
*
* @param ignore
* @return this request
*/



/**
* Get whether or not exceptions thrown by {@link Closeable#close()} are
* ignored
*
* @return true if ignoring, false if throwing
*/



/**
* Get the status code of the response
*
* @return the response code
* @throws HttpRequestException
*/



/**
* Set the value of the given {@link AtomicInteger} to the status code of the
* response
*
* @param output
* @return this request
* @throws HttpRequestException
*/



/**
* Is the response code a 200 OK?
*
* @return true if 200, false otherwise
* @throws HttpRequestException
*/



/**
* Is the response code a 201 Created?
*
* @return true if 201, false otherwise
* @throws HttpRequestException
*/



/**
* Is the response code a 500 Internal Server Error?
*
* @return true if 500, false otherwise
* @throws HttpRequestException
*/



/**
* Is the response code a 400 Bad Request?
*
* @return true if 400, false otherwise
* @throws HttpRequestException
*/



/**
* Is the response code a 404 Not Found?
*
* @return true if 404, false otherwise
* @throws HttpRequestException
*/



/**
* Is the response code a 304 Not Modified?
*
* @return true if 304, false otherwise
* @throws HttpRequestException
*/



/**
* Get status message of the response
*
* @return message
* @throws HttpRequestException
*/



/**
* Disconnect the connection
*
* @return this request
*/



/**
* Set chunked streaming mode to the given size
*
* @param size
* @return this request
*/



/**
* Set the size used when buffering and copying between streams
* <p>
* This size is also used for send and receive buffers created for both char
* and byte arrays
* <p>
* The default buffer size is 8,192 bytes
*
* @param size
* @return this request
*/



/**
* Get the configured buffer size
* <p>
* The default buffer size is 8,192 bytes
*
* @return buffer size
*/



/**
* Set whether or not the response body should be automatically uncompressed
* when read from.
* <p>
* This will only affect requests that have the 'Content-Encoding' response
* header set to 'gzip'.
* <p>
* This causes all receive methods to use a {@link GZIPInputStream} when
* applicable so that higher level streams and readers can read the data
* uncompressed.
* <p>
* Setting this option does not cause any request headers to be set
* automatically so {@link #acceptGzipEncoding()} should be used in
* conjunction with this setting to tell the server to gzip the response.
*
* @param uncompress
* @return this request
*/



/**
* Create byte array output stream
*
* @return stream
*/



/**
* Get response as {@link String} in given character set
* <p>
* This will fall back to using the UTF-8 character set if the given charset
* is null
*
* @param charset
* @return string
* @throws HttpRequestException
*/



/**
* Get response as {@link String} using character set returned from
* {@link #charset()}
*
* @return string
* @throws HttpRequestException
*/



/**
* Get response as byte array
*
* @return byte array
* @throws HttpRequestException
*/



/**
* Get response in a buffered stream
*
* @see #bufferSize(int)
* @return stream
* @throws HttpRequestException
*/



/**
* Get stream to response body
*
* @return stream
* @throws HttpRequestException
*/



/**
* Get reader to response body using given character set.
* <p>
* This will fall back to using the UTF-8 character set if the given charset
* is null
*
* @param charset
* @return reader
* @throws HttpRequestException
*/



/**
* Get reader to response body using the character set returned from
* {@link #charset()}
*
* @return reader
* @throws HttpRequestException
*/



/**
* Get buffered reader to response body using the given character set r and
* the configured buffer size
*
*
* @see #bufferSize(int)
* @param charset
* @return reader
* @throws HttpRequestException
*/



/**
* Get buffered reader to response body using the character set returned from
* {@link #charset()} and the configured buffer size
*
* @see #bufferSize(int)
* @return reader
* @throws HttpRequestException
*/



/**
* Stream response body to file
*
* @param file
* @return this request
* @throws HttpRequestException
*/



/**
* Stream response to given output stream
*
* @param output
* @return this request
* @throws HttpRequestException
*/



/**
* Stream response to given print stream
*
* @param output
* @return this request
* @throws HttpRequestException
*/



/**
* Receive response into the given appendable
*
* @param appendable
* @return this request
* @throws HttpRequestException
*/



/**
* Receive response into the given writer
*
* @param writer
* @return this request
* @throws HttpRequestException
*/



/**
* Set read timeout on connection to given value
*
* @param timeout
* @return this request
*/



/**
* Set connect timeout on connection to given value
*
* @param timeout
* @return this request
*/



/**
* Set header name to given value
*
* @param name
* @param value
* @return this request
*/



/**
* Set header name to given value
*
* @param name
* @param value
* @return this request
*/



/**
* Set all headers found in given map where the keys are the header names and
* the values are the header values
*
* @param headers
* @return this request
*/



/**
* Set header to have given entry's key as the name and value as the value
*
* @param header
* @return this request
*/



/**
* Get a response header
*
* @param name
* @return response header
*/



/**
* Get all the response headers
*
* @return map of response header names to their value(s)
*/



/**
* Get a date header from the response falling back to returning -1 if the
* header is missing or parsing fails
*
* @param name
* @return date, -1 on failures
*/



/**
* Get a date header from the response falling back to returning the given
* default value if the header is missing or parsing fails
*
* @param name
* @param defaultValue
* @return date, -1 on failures
*/



/**
* Get an integer header from the response falling back to returning -1 if the
* header is missing or parsing fails
*
* @param name
* @return header value as an integer, -1 when missing or parsing fails
*/



/**
* Get an integer header value from the response falling back to the given
* default value if the header is missing or if parsing fails
*
* @param name
* @param defaultValue
* @return header value as an integer, default value when missing or parsing
*         fails
*/



/**
* Get all values of the given header from the response
*
* @param name
* @return non-null but possibly empty array of {@link String} header values
*/



/**
* Get parameter with given name from header value in response
*
* @param headerName
* @param paramName
* @return parameter value or null if missing
*/



/**
* Get all parameters from header value in response
* <p>
* This will be all key=value pairs after the first ';' that are separated by
* a ';'
*
* @param headerName
* @return non-null but possibly empty map of parameter headers
*/



/**
* Get parameter values from header value
*
* @param header
* @return parameter value or null if none
*/



/**
* Get parameter value from header value
*
* @param value
* @param paramName
* @return parameter value or null if none
*/



/**
* Get 'charset' parameter from 'Content-Type' response header
*
* @return charset or null if none
*/



/**
* Set the 'User-Agent' header to given value
*
* @param value
* @return this request
*/



/**
* Set value of {@link HttpURLConnection#setUseCaches(boolean)}
*
* @param useCaches
* @return this request
*/



/**
* Set the 'Accept-Encoding' header to given value
*
* @param value
* @return this request
*/



/**
* Set the 'Accept-Encoding' header to 'gzip'
*
* @see #uncompress(boolean)
* @return this request
*/



/**
* Set the 'Accept-Charset' header to given value
*
* @param value
* @return this request
*/



/**
* Get the 'Content-Encoding' header from the response
*
* @return this request
*/



/**
* Get the 'Server' header from the response
*
* @return server
*/



/**
* Get the 'Date' header from the response
*
* @return date value, -1 on failures
*/



/**
* Get the 'Cache-Control' header from the response
*
* @return cache control
*/



/**
* Get the 'ETag' header from the response
*
* @return entity tag
*/



/**
* Get the 'Expires' header from the response
*
* @return expires value, -1 on failures
*/



/**
* Get the 'Last-Modified' header from the response
*
* @return last modified value, -1 on failures
*/



/**
* Get the 'Location' header from the response
*
* @return location
*/



/**
* Set the 'Authorization' header to given value
*
* @param value
* @return this request
*/



/**
* Set the 'Authorization' header to given values in Basic authentication
* format
*
* @param name
* @param password
* @return this request
*/



/**
* Set the 'If-Modified-Since' request header to the given value
*
* @param value
* @return this request
*/



/**
* Set the 'If-None-Match' request header to the given value
*
* @param value
* @return this request
*/



/**
* Set the 'Content-Type' request header to the given value
*
* @param value
* @return this request
*/



/**
* Set the 'Content-Type' request header to the given value and charset
*
* @param value
* @param charset
* @return this request
*/



/**
* Get the 'Content-Type' header from the response
*
* @return response header value
*/



/**
* Get the 'Content-Type' header from the response
*
* @return response header value
*/



/**
* Set the 'Content-Length' request header to the given value
*
* @param value
* @return this request
*/



/**
* Set the 'Content-Length' request header to the given value
*
* @param value
* @return this request
*/



/**
* Set the 'Accept' header to given value
*
* @param value
* @return this request
*/



/**
* Set the 'Accept' header to 'application/json'
*
* @return this request
*/



/**
* Copy from input stream to output stream
*
* @param input
* @param output
* @return this request
* @throws IOException
*/



/**
* Copy from reader to writer
*
* @param input
* @param output
* @return this request
* @throws IOException
*/



/**
* Close output stream
*
* @return this request
* @throws HttpRequestException
* @throws IOException
*/

} catch (IOException ignored) {
// Ignored



/**
* Open output stream
*
* @return this request
* @throws IOException
*/



/**
* Start part of a multipart
*
* @return this request
* @throws IOException
*/



/**
* Write part header
*
* @param name
* @param filename
* @return this request
* @throws IOException
*/



/**
* Write part of a multipart request to the request body
*
* @param name
* @param part
* @return this request
*/



/**
* Write part of a multipart request to the request body
*
* @param name
* @param filename
* @param part
* @return this request
* @throws HttpRequestException
*/



/**
* Write part of a multipart request to the request body
*
* @param name
* @param part
* @return this request
* @throws HttpRequestException
*/



/**
* Write part of a multipart request to the request body
*
* @param name
* @param filename
* @param part
* @return this request
* @throws HttpRequestException
*/



/**
* Write part of a multipart request to the request body
*
* @param name
* @param part
* @return this request
* @throws HttpRequestException
*/



/**
* Write part of a multipart request to the request body
*
* @param name
* @param filename
* @param part
* @return this request
* @throws HttpRequestException
*/



/**
* Write part of a multipart request to the request body
*
* @param name
* @param part
* @return this request
* @throws HttpRequestException
*/



/**
* Write part of a multipart request to the request body
*
* @param name
* @param filename
* @param part
* @return this request
* @throws HttpRequestException
*/



/**
* Write a multipart header to the response body
*
* @param name
* @param value
* @return this request
* @throws HttpRequestException
*/



/**
* Write contents of file to request body
*
* @param input
* @return this request
* @throws HttpRequestException
*/



/**
* Write byte array to request body
*
* @param input
* @return this request
* @throws HttpRequestException
*/



/**
* Write stream to request body
* <p>
* The given stream will be closed once sending completes
*
* @param input
* @return this request
* @throws HttpRequestException
*/



/**
* Write reader to request body
* <p>
* The given reader will be closed once sending completes
*
* @param input
* @return this request
* @throws HttpRequestException
*/



/**
* Write char sequence to request body
* <p>
* The charset configured via {@link #contentType(String)} will be used and
* UTF-8 will be used if it is unset.
*
* @param value
* @return this request
* @throws HttpRequestException
*/



/**
* Create writer to request output stream
*
* @return writer
* @throws HttpRequestException
*/



/**
* Write the values in the map as form data to the request body
* <p>
* The pairs specified will be URL-encoded in UTF-8 and sent with the
* 'application/x-www-form-urlencoded' content-type
*
* @param values
* @return this request
* @throws HttpRequestException
*/



/**
* Write the key and value in the entry as form data to the request body
* <p>
* The pair specified will be URL-encoded in UTF-8 and sent with the
* 'application/x-www-form-urlencoded' content-type
*
* @param entry
* @return this request
* @throws HttpRequestException
*/



/**
* Write the key and value in the entry as form data to the request body
* <p>
* The pair specified will be URL-encoded and sent with the
* 'application/x-www-form-urlencoded' content-type
*
* @param entry
* @param charset
* @return this request
* @throws HttpRequestException
*/



/**
* Write the name/value pair as form data to the request body
* <p>
* The pair specified will be URL-encoded in UTF-8 and sent with the
* 'application/x-www-form-urlencoded' content-type
*
* @param name
* @param value
* @return this request
* @throws HttpRequestException
*/



/**
* Write the name/value pair as form data to the request body
* <p>
* The values specified will be URL-encoded and sent with the
* 'application/x-www-form-urlencoded' content-type
*
* @param name
* @param value
* @param charset
* @return this request
* @throws HttpRequestException
*/



/**
* Write the values in the map as encoded form data to the request body
*
* @param values
* @param charset
* @return this request
* @throws HttpRequestException
*/



/**
* Configure HTTPS connection to trust all certificates
* <p>
* This method does nothing if the current request is not a HTTPS request
*
* @return this request
* @throws HttpRequestException
*/

public void checkClientTrusted(X509Certificate[] chain, String authType) {
// Intentionally left blank

public void checkServerTrusted(X509Certificate[] chain, String authType) {
// Intentionally left blank



/**
* Configure HTTPS connection to trust all hosts using a custom
* {@link HostnameVerifier} that always returns <code>true</code> for each
* host verified
* <p>
* This method does nothing if the current request is not a HTTPS request
*
* @return this request
*/


// Only hard refresh if view already created and org is changing


// Only hard refresh if view already created and org is changing



/**
* Helpers to display errors to the user
*/



/**
* Default duration to show {@link Toast}
*/



/**
* Show {@link Toast} for exception
* <p>
* This given default message will be used if an message can not be derived from the given {@link Exception}
* <p>
* This method shows the {@link Toast} for 5 seconds
*
* @see #show(Context, Exception, int, int)
* @param context
* @param e
* @param defaultMessage
*/



/**
* Show {@link Toast} for exception
* <p>
* This given default message will be used if an message can not be derived from the given {@link Exception}
*
* @param context
* @param e
* @param defaultMessage
* @param duration
*/



/**
* Utilities for working with {@link IRepositoryQuery} objects.
*/



/**
* The user has requested to add a new account to the system. We return an intent that will launch our login screen
* if the user has not logged in yet, otherwise our activity will just pass the user's credentials on to the account
* manager.
*/



/**
* Authenticator service that returns a subclass of AbstractAccountAuthenticator in onBind()
*/



/**
* {@link GitHubClient} extensions that integrates with the Android account manager to provide request credentials
*/



/**
* Create account-aware client
*
* @param accountProvider
*/



/**
* Create account-aware client
*
* @param hostname
* @param accountProvider
*/


// Credentials setting must come before super call



/**
* Helpers for accessing {@link AccountManager}
*/



/**
* Get login name of configured account
*
* @param context
* @return login name or null if none configure
*/



/**
* Get account used for authentication
*
* @param manager
* @param activity
* @return account
*/



/**
* Activity to login
*/



/**
* Auth token type parameter
*/



/**
* If set we are just checking that the user knows their credentials; this doesn't cause the user's password to be
* changed on the device.
*/



/**
* Was the original caller asking for an entirely new account?
*/



/**
* Handles onClick event on the Submit button. Sends username/password to the server for authentication.
* <p/>
* Specified by android:onClick="handleLogin" in the layout xml
*
* @param view
*/



/**
* Called when response is received from the server for confirm credentials request. See onAuthenticationResult().
* Sets the AccountAuthenticatorResult which is sent back to the caller.
*
* @param result
*/



/**
* Called when response is received from the server for authentication request. See onAuthenticationResult(). Sets
* the AccountAuthenticatorResult which is sent back to the caller. Also sets the authToken in AccountManager for
* this account.
*/



/**
* Called when the authentication process completes (see attemptLogin()).
*
* @param result
*/



/**
* Returns the message to be displayed at the top of the login dialog box.
*/



/**
* Authentication constants
*/



/**
* Account type
*/



/**
* Acccount name
*/



/**
* Provider authority
*/



/**
* Auth token type
*/



/**
* GitHub account model
*/



/**
* Account username
*/



/**
* Account password
*/



/**
* Create account with username and password
*
* @param username
* @param password
*/



/**
* Custom Guice-scope that makes an authenticated GitHub account available,
* by enforcing that the user is logged in before proceeding.
*/



/**
* Enters scope once we've ensured the user has a valid account.
*/



/**
* Enters scope using a GitHubAccount derived from the supplied account
*/



/**
* Returns a provider that always throws an exception complaining that the
* object in question must be seeded before it can be injected.
*
* @return typed provider
*/



/**
* Commit search result class.
*/

59a73,87

/**
* List view
*/



/**
* Empty view
*/



/**
* Progress bar
*/



/**
* Get {@link ListView}
*
* @return listView
*/



/**
* Get list adapter
*
* @return list adapter
*/



/**
* Set list adapter to use on list view
*
* @param adapter
* @return this fragment
*/



/**
* Set list shown or progress bar show
*
* @param shown
* @return this fragment
*/



/**
* Set empty text on list fragment
*
* @param message
* @return this fragment
*/



/**
* Set empty text on list fragment
*
* @param resId
* @return this fragment
*/



/**
* Callback when a list view item is clicked
*
* @param l
* @param v
* @param position
* @param id
*/



/**
* Generic resource pager for elements with an id that can be paged
*
* @param <E>
*/



/**
* Next page to request
*/



/**
* Number of pages to request
*/



/**
* All resources retrieved
*/



/**
* Are more pages available?
*/



/**
* Reset the next page to be requested and clear the current resources
*
* @return this pager
*/



/**
* Get number of resources loaded into this pager
*
* @return number of resources
*/



/**
* Get resources
*
* @return resources
*/



/**
* Get the next page of issues
*
* @return true if more pages
* @throws IOException
*/


// Set page to count value if first call after call to reset()



/**
* Are more pages available to request?
*
* @return true if the last call to {@link #next()} returned true, false otherwise
*/



/**
* Callback to register a fetched resource before it is stored in this pager
* <p>
* Sub-classes may override
*
* @param resource
* @return resource
*/



/**
* Get id for resource
*
* @param resource
* @return id
*/



/**
* Create iterator to return given page and size
*
* @param page
* @param size
* @return iterator
*/



/**
* Helper for showing more items are being loaded at the bottom of a list via a custom footer view
*/



/**
* Create indicator using given inflater
*
* @param context
* @param loadingResId
*            string resource id to show when loading
*/



/**
* Set the list view that this indicator should be added as a footer to
*
* @param listView
* @return this indicator
*/



/**
* Set visibility of entire indicator view
*
* @param visible
* @return this indicator
*/



/**
* Show the indicator as loading state
*
* @return this indicator
*/



/**
* Unit tests of {@link LongestAuthorEmailFilter}
*/



/**
* Filter to track the commit(s) with the longest author email address
*/

181a184,186

/**
* Repository list with recent ones at the beginning
*/



/**
* Set of recent repository ids
*/

184a194,199

/**
* Create recent repos container
*
* @param fullRepoListHeadedByTopRecents
* @param topRecentRepoIds
*/

23a24,26

/**
* Base scope class
*/

61a62,67

/**
* Get scoped object map
*
* @param key
* @return map
*/



/**
* Unit tests of {@link StashApplyCommand}
*/



/**
* Command class to apply a stashed commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Repository hook response model class
*/



/**
* Repository hook model class
*/



/**
* Unit tests of {@link RepositoryHookResponse}
*/



/**
* Unit test of {@link RepositoryHook}
*/



/**
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Core task attribute mapper
*/



/**
* GitHub task attribute metadata
*/



/**
* Core task data handler
*/



/**
* Base repository connector
*/



/**
* Base handler for working with a {@link TaskData} selection
*/



/**
* Adapter for {@link TextWatcher} interface
*/



/**
* Helper to display a single choice dialog
*/



/**
* Arguments key for the selected item
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param choices
* @param selectedChoice
*/



/**
* Helper to display a confirmation dialog
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param bundle
*/



/**
* Dropdown list adapter to display orgs. and other context-related activity links
*/



/**
* Action for Gists
*/



/**
* Action for the issues dashboard
*/



/**
* Action for issues filter
*/



/**
* Create adapter with initial orgs
*
* @param context
* @param orgs
* @param avatarHelper
*/



/**
* Is the given position an org. selection position?
*
* @param position
* @return true if org., false otherwise
*/



/**
* Get action at given position
*
* @param position
* @return action id
*/



/**
* Set orgs to display
*
* @param orgs
* @return this adapter
*/



/**
* @param selected
* @return this adapter
*/



/**
* @return selected
*/



/**
* Loader that support throwing an exception when loading in the background
*
* @param <D>
*/



/**
* Create loader for context and seeded with initial data
*
* @param context
* @param data
*/



/**
* @return exception
*/



/**
* Clear the stored exception and return it
*
* @return exception
*/



/**
* Load data
*
* @return data
* @throws Exception
*/



/**
* Generic resource pager for elements with an id that can be paged
*
* @param <E>
*/



/**
* Next page to request
*/



/**
* Number of pages to request
*/



/**
* All resources retrieved
*/



/**
* Are more pages available?
*/



/**
* Reset the number of the next page to be requested from {@link #next()} and clear all stored state
*
* @return this pager
*/



/**
* Clear all stored resources and have the next call to {@link #next()} load all previously loaded pages
*
* @return this pager
*/



/**
* Get number of resources loaded into this pager
*
* @return number of resources
*/



/**
* Get resources
*
* @return resources
*/



/**
* Get the next page of issues
*
* @return true if more pages
* @throws IOException
*/

}
// Set page to count value if first call after call to reset()



/**
* Are more pages available to request?
*
* @return true if the last call to {@link #next()} returned true, false otherwise
*/



/**
* Callback to register a fetched resource before it is stored in this pager
* <p>
* Sub-classes may override
*
* @param resource
* @return resource
*/



/**
* Get id for resource
*
* @param resource
* @return id
*/



/**
* Create iterator to return given page and size
*
* @param page
* @param size
* @return iterator
*/



/**
* Activity that display dialogs
*/

public void onDialogResult(int requestCode, int resultCode, Bundle arguments) {
// Intentionally left blank



/**
* Home screen activity
*/



/**
* Create intent for this activity
*
* @param org
* @return intent
*/


// Don't notify listeners or change pager if org hasn't changed



/**
* Request writer
*/



/**
* Create a request writer that writes to the given file
*
* @param file
* @param formatVersion
*/



/**
* Write request to file
*
* @param request
* @return request
*/



/**
* Animation of a refresh menu item
*/



/**
* @param refreshItem
* @return this animation
*/



/**
* Start refresh animation
*
* @param activity
*/



/**
* Stop refresh animation
*/



/**
* Main module provide services and clients
*/



/**
* Provide GitHub-API related services
*/



/**
* Loader which extends AsyncTaskLoaders and handles caveats as pointed out in
* http://code.google.com/p/android/issues/detail?id=14944.
* <p/>
* Based on CursorLoader.java in the Fragment compatibility package
*
* @param <D>
*            data type
* @author Alexander Blom (me@alexanderblom.se)
*/



/**
* Create async loader
*
* @param context
*/

if (isReset())
// An async query came in while the loader is stopped

protected void onStopLoading() {
// Attempt to cancel the current load task if possible.


// Ensure the loader is stopped



/**
* Reader of previously fetched request data
*/



/**
* Create request reader
*
* @param file
* @param formatVersion
*/



/**
* Read request data
*
* @return read data
*/



/**
* Interface facade to searching repositories
*/



/**
* Search for repositories matching query
*
* @param query
* @return list of repositories matching query
* @throws IOException
*/



/**
* Request future delivering a response
*
* @param <V>
*            type of response data
*/



/**
* Callback that response for request was successfully obtained
*
* @param response
*/



/**
* Base dialog fragment helper
*/



/**
* Dialog message
*/



/**
* Dialog message
*/



/**
* Request code
*/



/**
* Show dialog
*
* @param activity
* @param fragment
* @param arguments
* @param tag
*/



/**
* Create bundle with standard arguments
*
* @param title
* @param message
* @param requestCode
* @return bundle
*/



/**
* Call back to the activity with the dialog result
*
* @param resultCode
*/



/**
* Get title
*
* @return title
*/



/**
* Get message
*
* @return mesage
*/



/**
* Helper to display multiple choice dialogs
*/



/**
* Arguments key for the selected items
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param choices
* @param selectedChoices
*/



/**
* Request codes
*/



/**
* Request to view a Gist
*/



/**
* Request to view an issue
*/



/**
* Request to edit an issue filter
*/



/**
* Request to create a new issue
*/



/**
* Request to update an issue's labels
*/



/**
* Request to update an issue's milestone
*/



/**
* Request to update an issue's assignee
*/



/**
* Request to close an issue
*/



/**
* Request to reopen an issue
*/



/**
* Request to edit an issue
*/



/**
* Request to create a comment
*/



/**
* Request to create a gist
*/



/**
* Generic weak store of ids to items
*/



/**
* Create item reference
*
* @param item
* @param id
* @param queue
*/



/**
* Generic reference store
*
* @param <V>
*/



/**
* Create reference store
*/



/**
* Get item with id from store
*
* @param id
* @return item
*/



/**
* Insert item with id into store
*
* @param id
* @param item
*/



/**
* Listener that dialogs results are delivered too
*/



/**
* Callback for a dialog finishing and delivering a result
*
* @param requestCode
* @param resultCode
*            result such as {@link Activity#RESULT_CANCELED} or {@link Activity#RESULT_OK}
* @param arguments
*/



/**
* List adapter for items of a specific type
*
* @param <I>
* @param <V>
*/



/**
* Create empty adapter
*
* @param viewId
* @param inflater
*/



/**
* Create adapter
*
* @param viewId
* @param inflater
* @param elements
*/



/**
* @return items
*/



/**
* Set items
*
* @param items
* @return items
*/



/**
* Update view to display item
*
* @param view
* @param item
*/



/**
* Create empty item view
*
* @param view
* @return item
*/



/**
* Base fragment for displaying a list of items that loads with a progress bar visible
*
* @param <E>
*/



/**
* List items provided to {@link #onLoadFinished(Loader, List)}
*/


// Start out with a progress bar


// Prepare the loader. Either re-connect with an existing one,
// or start a new one.



/**
* If the user explicitly hits the reload key, they don't want to see cached data. Calling this method means the
* loader will be passed a 'force-reload' parameter to indicate cached data shouldn't be used and a fresh request
* should be made.
*/



/**
* @param args
*            the args bundle passed to the loader by the LoaderManager
* @return true if the bundle indicates the user requested a forced reload of data
*/



/**
* Refresh the fragment's list
*/



/**
* Create adapter to display items
*
* @param items
* @return adapter
*/



/**
* Set the list to be shown and stop the refresh animation
*/

public void onLoaderReset(Loader<List<E>> loader) {
// Intentionally left blank



/**
* Show exception in a {@link Toast}
*
* @param e
* @param defaultMessage
*/



/**
* Get exception from loader if it provides one by being a {@link ThrowableLoader}
*
* @param loader
* @return exception or null if none provided
*/



/**
* Refresh the list with the progress bar showing
*/



/**
* Class that stores references to children of a view that get updated when the item in the view changes
*/



/**
* Create item view storing references to children of given view to be accessed when the view is ready to display an
* item
*
* @param view
*/

public ItemView(View view) {
// Intentionally left blank



/**
* List fragment to load homogeneous items
*
* @param <E>
*            item type
*/



/**
* List items provided to {@link #onLoadFinished(Loader, List)}
*/


// Start out with a progress indicator.


// Prepare the loader. Either re-connect with an existing one,
// or start a new one.



/**
* If the user explicitly hits the reload key, they don't want to see cached data. Calling this method means the
* loader will be passed a 'force-reload' parameter to indicate cached data shouldn't be used and a fresh request
* should be made.
*/



/**
* @param args
*            the args bundle passed to the loader by the LoaderManager
* @return true if the bundle indicates the user requested a forced reload of data
*/



/**
* Refresh the fragment's list
*/



/**
* Set the list to be shown and stop the refresh animation
*/



/**
* Create adapter for list of items
*
* @param items
* @return list adapter
*/



/**
* Show exception in a {@link Toast}
*
* @param e
* @param defaultMessage
*/



/**
* Get exception from loader if it provides one by being a {@link ThrowableLoader}
*
* @param loader
* @return exception or null if none provided
*/



/**
* Base news fragment class with utilities for subclasses to built on
*/



/**
* Matcher for finding an {@link Issue} from an {@link Event}
*/



/**
* Matcher for finding a {@link Gist} from an {@link Event}
*/



/**
* Matcher for finding a {@link Repository} from an {@link Event}
*/



/**
* List fragment that adds more elements when the bottom of the list is scrolled to
*
* @param <E>
*/



/**
* Resource pager
*/



/**
* Create pager that provides resources
*
* @return pager
*/



/**
* Get resource id of {@link String} to display when loading
*
* @return string resource id
*/

public void onScrollStateChanged(AbsListView view, int scrollState) {
// Intentionally left blank



/**
* Show more events while retaining the current pager state
*/



/**
* List fragment that adds more elements when the bottom of the list is scrolled to
*
* @param <E>
*/



/**
* Resource pager
*/



/**
* Create pager that provides resources
*
* @return pager
*/



/**
* Get resource id of {@link String} to display when loading
*
* @return string resource id
*/

public void onScrollStateChanged(AbsListView view, int scrollState) {
// Intentionally left blank



/**
* Show more events while retaining the current pager state
*/



/**
* Task that runs with a progress dialog at the foreground
*
* @param <E>
*/



/**
* Progress dialog last displayed
*/



/**
* @param context
*/



/**
* @param context
* @param executor
*/



/**
* Dismiss and clear progress dialog field
*/



/**
* Sub-classes may override but should always call super to ensure the progress dialog is dismissed
*/



/**
* Sub-classes may override but should always call super to ensure the progress dialog is dismissed
*/



/**
* Get string from context resources
*
* @param resId
* @return string
*/



/**
* Helper for showing more items are being loaded at the bottom of a list via a custom footer view
*/



/**
* Create indicator using given inflater
*
* @param context
* @param loadingResId
*            string resource id to show when loading
*/



/**
* Set the list view that this indicator should be added as a footer to
*
* @param listView
* @return this indicator
*/



/**
* Set visibility of entire indicator view
*
* @param visible
* @return this indicator
*/



/**
* Show the indicator as loading state
*
* @return this indicator
*/



/**
* Helper to handle any custom activity launching done by selecting URLs
*/



/**
* Create intent to launch view of URI
*
* @param uri
* @return intent
*/



/**
* Convert global view intent one into one that can be possibly opening inside the current application.
*
* @param intent
* @return converted intent or null if non-application specific
*/



/**
* Adapter to display a list of {@link Gist} objects
*/



/**
* Find the maximum number of digits in the given Gist ids
*
* @param gists
* @return max digits
*/



/**
* Measure the width of the given id field
*
* @param maxDigits
* @param gistId
* @return id width
*/



/**
* @param avatarHelper
* @param inflater
* @param elements
*/



/**
* @param avatarHelper
* @param inflater
*/



/**
* View of a {@link Gist} in a list
*/



/**
* Gist id text view
*/



/**
* Gist title text view
*/



/**
* Gist author text view
*/



/**
* Created date text view
*/



/**
* Number of comments text view
*/



/**
* Number of files text view
*/



/**
* Avatar image view
*/



/**
* Create view of a {@link Gist} in a list
*
* @param view
*/



/**
* Fragment to display a list of Gists
*/



/**
* Pager over Gists
*/



/**
* Avatar helper
*/



/**
* Gist service
*/



/**
* Gist store
*/



/**
* Fragment to display a list of Gists
*/



/**
* Fragment to display a list of public Gists
*/



/**
* Fragment to display a list of Gists
*/



/**
* Task to comment on an issue in a repository
*/



/**
* Create task for creating a comment on the given issue in the given repository
*
* @param context
* @param repository
* @param issueNumber
*/



/**
* Create comment
*
* @param comment
* @return this task
*/



/**
* Fragment to display a pageable list of dashboard issues
*/



/**
* Filter data argument
*/



/**
* Adapter to display a list of dashboard issues
*/



/**
* Create adapter
*
* @param avatarHelper
* @param inflater
*/



/**
* Create adapter
*
* @param avatarHelper
* @param inflater
* @param elements
*/



/**
* View used to display a dashboard issue
*/



/**
* Text view of repository id
*/



/**
* Issue number text view
*/



/**
* Issue title text view
*/



/**
* Issue opener avatar image view
*/



/**
* Issue opener text view
*/



/**
* Creation time text view
*/



/**
* Number of comments text view
*/



/**
* Pull request icon text view
*/



/**
* Initial paint flags of {@link #number}
*/



/**
* @param view
*/



/**
* Task to edit the assignee
*/



/**
* Create task to edit a milestone
*
* @param activity
* @param repositoryId
* @param issueNumber
*/



/**
* Prompt for assignee selection
*
* @param assignee
*            current assignee
* @return this task
*/



/**
* Edit issue to have given assignee
*
* @param user
* @return this task
*/



/**
* Task to edit an issue's title and/or body
*/



/**
* Create task to edit a milestone
*
* @param activity
* @param repositoryId
* @param issueNumber
*/



/**
* Edit issue
*
* @param title
* @param body
* @return this task
*/



/**
* Task to edit labels
*/



/**
* Create task to edit labels
*
* @param activity
* @param repositoryId
* @param issueNumber
*/



/**
* Prompt for labels selection
*
* @param labels
*            current labels
* @return this task
*/



/**
* Edit issue to have given labels
*
* @param labels
* @return this task
*/



/**
* Task to edit a milestone
*/



/**
* Create task to edit a milestone
*
* @param activity
* @param repositoryId
* @param issueNumber
*/



/**
* Prompt for milestone selection
*
* @param milestone
*            current milestone
* @return this task
*/



/**
* Edit issue to have given milestone
*
* @param title
* @return this task
*/



/**
* Task to close or reopen an issue
*/



/**
* Create task to edit issue state
*
* @param activity
* @param repositoryId
* @param issueNumber
*/



/**
* Confirm action
*
* @param close
* @return this task
*/



/**
* Edit state of issue
*
* @param close
* @return this task
*/



/**
* Fragment to display an issue
*/

public boolean onOptionsItemSelected(MenuItem item) {
// Don't allow options before issue loads



/**
* Adapter to page through an {@link Issue} array
*/



/**
* @param fm
* @param repoIds
* @param issueNumbers
*/



/**
* Deliver dialog result to fragment at given position
*
* @param position
* @param requestCode
* @param resultCode
* @param arguments
* @return this adapter
*/



/**
* Activity display a collection of issues in a pager
*/



/**
* Create an intent to show a single issue
*
* @param issue
* @return intent
*/



/**
* Create an intent to show issues with an initial selected issue
*
* @param issues
* @param position
* @return intent
*/

public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
// Intentionally left blank

public void onPageScrollStateChanged(int state) {
// Intentionally left blank



/**
* Fragment to display a news feed for a specific repository
*/



/**
* Adapter to view a repository's various pages
*/



/**
* @param fm
*/



/**
* Activity to view a repository
*/



/**
* Create intent for this activity
*
* @param repository
* @return intent
*/



/**
* Pager over events
*/



/**
* Fragment to display a list of followers
*/



/**
* Fragment to display the members of an org.
*/

this.org = org;
// Only hard refresh if view already created and org is changing



/**
* View holder for a rendered news event
*/



/**
* Can the given event be rendered by this view holder?
*
* @param event
* @return true if renderable, false otherwise
*/



/**
* Create view holder
*
* @param view
* @param avatarHelper
*/



/**
* Fragment to display a news feed for a given user/org
*/

this.org = org;
// Only hard refresh if view already created and org is changing



/**
* Pager adapter for a user's different views
*/



/**
* @param fm
* @param defaultUser
*/



/**
* This methods clears any fragments that may not apply to the newly selected org.
*
* @return this adapter
*/



/**
* Holder for a user view that appears in a list
*/



/**
* Create user view holder
*
* @param view
* @param avatarHelper
*/



/**
* View holder to display a user/organization
*/



/**
* Create org view holder
*
* @param view
* @param avatarHelper
*/



/**
* Helper for obtaining the recently viewed repositories for under a given user or organization
*/



/**
* The maximum number of recent repos to store - this is the total across all different orgs.
*/



/**
* Create helper scoped to given user
*
* @param context
*/



/**
* Add repository to recent list
*
* @param repo
* @return this helper
*/



/**
* Add id to recent list
*
* @param repoId
* @return this helper
*/



/**
* Persist recent list
*
* @return this helper
*/



/**
* Is the given repository id contained in the recent list?
*
* @param repoId
* @return true if recent, false otherwise
*/



/**
* Find recently viewed repos amongst the list of supplied repos. The most recently viewed repos will head the
* resulting list, ordered by recency, followed by the other repos in the supplied list.
*
* @param fullRepoList the full set of repos that will be displayed
* @param numberOfTopRecentReposToShow the max num repos to show as 'recent' - prioritising the <em>most</em> recent
* @return value-object with the full sorted list of repos (headed by recents), plus the ids of the recent repos
*/



/**
* Value-object holding a sorted list of repos and the ids of the most recently-view repos.
*/



/**
* Fragment to display a list of {@link Repository} instances
*/

this.org.set(org);
// Only hard refresh if view already created and org is changing



/**
* Activity to search repositories
*/



/**
* Suggestions provider for recently searched for repository queries
*/



/**
* Save query to history
*
* @param context
* @param query
*/



/**
* Clear query history
*
* @param context
*/



/**
* Create suggestions provider for searched for repository queries
*/



/**
* View holder for a repository displayed in a list
*/



/**
* Create repository view holder
*
* @param view
* @param org
* @param recentRepos
*/



/**
* Fragment to display a list of {@link Repository} instances
*/



/**
* @param query
* @return this fragment
*/



/**
* View holder for a search repository displayed in a list
*/



/**
* Create search repository view holder
*
* @param view
*/



/**
* Sorts users and orgs in alphabetical order by username, but overriding this
* to put the currently authenticated user at the top of the list.
*/



/**
* Base URL matcher with utilities for sub-classes to use
*/



/**
* Is given input URL a match?
* <p>
* This method ignores null and empty URLs and does not reset the matcher with them
*
* @param url
* @param matcher
* @return true if matcher matches, false otherwise
*/



/**
* Gist model with comments and starred status
*/



/** serialVersionUID */



/**
* Create gist with comments
*
* @param gist
* @param starred
* @param comments
*/



/**
* Create empty gist
*/



/**
* @return starred
*/



/**
* @return gist
*/



/**
* Get files in gist
*
* @return list of files
*/



/**
* Helper to find a {@link Gist} to open for an event
*/



/**
* Get gist from event
*
* @param event
* @return gist or null if event doesn't apply
*/



/**
* Matcher for gist URLS that provides the Gist id matched
* <p>
* This class is not thread-safe
*/



/**
* Get Gist id from URL
*
* @param url
* @return gist id or null if the given URL is not to a Gist
*/



/**
* Issue model with comments
*/



/** serialVersionUID */



/**
* Create wrapper for issue and comments
*
* @param issue
* @param comments
*/



/**
* Create empty wrapper
*/



/**
* @return issue
*/



/**
* Helper to find an issue to open for an event
*/



/**
* Get issue from event
*
* @param event
* @return issue or null if event doesn't apply
*/



/**
* Matcher for issue URLS that provides the issue number matched
* <p>
* This class is not thread-safe
*/



/**
* Get issue number from URL
*
* @param url
* @return issue number of -1 if the given URL is not to an issue
*/



/**
* Helper to find a {@link RepositoryEventMatcher} to open for an event
*/



/**
* Get {@link Repository} from event
*
* @param event
* @return gist or null if event doesn't apply
*/

String login = id.substring(0, slash);
// Use actor if it matches login parsed from repository id



/**
* Async task to delete a Gist
*/



/**
* Create task
*
* @param context
* @param gistId
*/



/**
* Execute the task with a progress dialog displaying.
* <p>
* This method must be called from the main thread.
*/



/**
* Fragment to display the content of a file in a Gist
*/



/**
* Holder for a file associated with a Gist
*/



/**
* Create holder for view
*
* @param view
*/



/**
* Pager adapter for all the files in a given gist
*/



/**
* @param fm
* @param gist
*/



/**
* Activity to display an existing Gist
*/



/**
* Holder for a Gist header view
*/



/**
* Create view holder
*
* @param view
*/



/**
* Pager adapter for different Gist queries
*/



/**
* Create pager adapter
*
* @param resources
* @param fragmentManager
*/



/**
* Store of Gists
*/



/**
* Create gist store
*
* @param service
*/



/**
* Get gist
*
* @param id
* @return gist or null if not in store
*/



/**
* Add gist to store
*
* @param gist
* @return gist
*/



/**
* Refresh gist
*
* @param id
* @return refreshed gist
* @throws IOException
*/



/**
* Edit gist
*
* @param gist
* @return edited gist
* @throws IOException
*/



/**
* Activity to display view pagers of different Gist queries
*/



/**
* Adapter to page through an array of Gists
*/



/**
* @param fm
* @param gistIds
*/



/**
* Task to load and open a Gist with an id
*/



/**
* Create task
*
* @param context
* @param gistId
*/



/**
* Execute the task with a progress dialog displaying.
* <p>
* This method must be called from the main thread.
*/



/**
* Task to open a random Gist
*/



/**
* Create task
*
* @param context
*/



/**
* Execute the task with a progress dialog displaying.
* <p>
* This method must be called from the main thread.
*/


// Make at least two tries since page numbers are volatile



/**
* Activity to share a text selection as a public or private Gist
*/



/**
* Gist successfully created
*/



/**
* Activity to page through the content of all the files in a Gist
*/



/**
* Create intent to show files with an initial selected file
*
* @param gist
* @param position
* @return intent
*/



/**
* Activity to display a collection of Gists in a pager
*/



/**
* Create an intent to show a single gist
*
* @param gist
* @return intent
*/



/**
* Create an intent to show gists with an initial selected Gist
*
* @param gists
* @param position
* @return intent
*/


// Support opening this activity with a single Gist that may be present in the intent but not currently present
// in the store

public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
// Intentionally left blank

public void onPageScrollStateChanged(int state) {
// Intentionally left blank



/**
* {@link GitHubClient} extensions that integrates with the Android account manager to provide request credentials
*/



/**
* Create account-aware client
*
* @param accountProvider
*/



/**
* Create account-aware client
*
* @param hostname
* @param accountProvider
*/


// Credentials setting must come before super call



/**
* Helpers for accessing {@link AccountManager}
*/



/**
* Get login name of configured account
*
* @param context
* @return login name or null if none configure
*/



/**
* Get account used for authentication
*
* @param accountManager
* @param activityUsedToStartLoginProcess
* @return account
*/



/**
* Avatar utilities
*/



/**
* Create avatar helper
*
* @param context
*/



/**
* Create bitmap from raw image and set to view
*
* @param image
* @param view
* @param user
* @return this helper
*/



/**
* Get image for user
*
* @param user
* @return image
*/



/**
* Decode file to bitmap
*
* @param file
* @return bitmap
*/



/**
* Fetch avatar from URL
*
* @param url
* @param userId
* @return bitmap
*/

} catch (IOException e) {
// Ignored



/**
* Sets the logo on the {@link ActionBar} to the user's avatar.
*
* @param actionBar
* @param user
* @return this helper
*/



/**
* Bind view to image at URL
*
* @param view
* @param user
* @return this helper
*/



/**
* Helper for creating intents
*/



/**
* Prefix for all intents created
*/



/**
* Prefix for all extra data added to intents
*/



/**
* Repository handle
*/



/**
* Repository ids collection handle
*/



/**
* Repository name
*/



/**
* Repository owner
*/



/**
* Issue number
*/



/**
* Issue handle
*/



/**
* Issue number collection handle
*/



/**
* Gist id
*/



/**
* List of Gist ids
*/



/**
* Gist handle
*/



/**
* Gist file handle
*/



/**
* User handle
*/



/**
* Issue filter handle
*/



/**
* Comment body
*/



/**
* Comments handle
*/



/**
* Integer position
*/



/**
* Action bar title
*/



/**
* Action bar subtitle
*/



/**
* Resolve the {@link RepositoryId} referenced by the given intent
*
* @param intent
* @return repository id
*/



/**
* Builder for generating an intent configured with extra data such as an issue, repository, or gist
*/



/**
* Create builder with suffix
*
* @param actionSuffix
*/



/**
* Add repository id to intent being built up
*
* @param repositoryId
* @return this builder
*/



/**
* Add repository to intent being built up
*
* @param repository
* @return this builder
*/



/**
* Add issue to intent being built up
*
* @param issue
* @return this builder
*/



/**
* Add gist to intent being built up
*
* @param gist
* @return this builder
*/



/**
* Add gist id to intent being built up
*
* @param gist
* @return this builder
*/



/**
* Add gist file to intent being built up
*
* @param file
* @return this builder
*/



/**
* Add user to intent being built up
*
* @param user
* @return this builder;
*/



/**
* Add extra field data value to intent being built up
*
* @param fieldName
* @param value
* @return this builder
*/



/**
* Add extra field data value to intent being built up
*
* @param fieldName
* @param value
* @return this builder
*/



/**
* Add extra field data value to intent being built up
*
* @param fieldName
* @param value
* @return this builder
*/



/**
* Get built intent
*
* @return intent
*/



/**
* HTML Utilities
*/



/**
* Get last span of given kind
*
* @param text
* @param kind
* @return span
*/



/**
* Encode HTML
*
* @param html
* @return html
*/



/**
* Encode HTML
*
* @param html
* @param imageGetter
* @return html
*/



/**
* Formatter for HTML strings so that they are ready to be displayed in text views
*/



/**
* Remove email fragment 'div' tag and replace newlines with 'br' tags
*
* @param input
* @return input
*/



/**
* Remove leading and trailing whitespace
*
* @param input
*/



/**
* Format given HTML string so it is ready to be presented in a text view
*
* @param html
* @return formatted HTML
*/


// Remove e-mail toggle link


// Remove signature


// Replace div with e-mail content with block quote


// Remove hidden div


// Replace paragraphs with breaks



/**
* Getter for an image
*/



/**
* Create image getter for context
*
* @param context
*/



/**
* Bind text view to HTML string
*
* @param view
* @param html
* @param id
* @return this image getter
*/



/**
* Image utilities
*/



/**
* Get a bitmap from the image path
*
* @param imagePath
* @return bitmap or null if read fails
*/



/**
* Get a bitmap from the image path
*
* @param imagePath
* @param sampleSize
* @return bitmap or null if read fails
*/



/**
* Get size of image
*
* @param imagePath
* @return size
*/



/**
* Get bitmap with maximum height or width
*
* @param imagePath
* @param width
* @param height
* @return image
*/



/**
* Get bitmap with maximum height or width
*
* @param image
* @param width
* @param height
* @return image
*/



/**
* Get a bitmap from the image file
*
* @param image
* @return bitmap or null if read fails
*/



/**
* Load a {@link Bitmap} from the given path and set it on the given {@link ImageView}
*
* @param imagePath
* @param view
*/



/**
* Load a {@link Bitmap} from the given {@link File} and set it on the given {@link ImageView}
*
* @param image
* @param view
*/



/**
* Round the corners of a {@link Bitmap}
*
* @param source
* @param radius
* @return rounded corner bitmap
*/



/**
* Helpers to configure a {@link ListView}
* <p>
* Used for list views that aren't defined in local XML files and must be configured at runtime
*/



/**
* Configure list view
*
* @param context
* @param listView
* @param fastScroll
* @return specified list view
*/



/**
* Helpers for dealing with system services
*/



/**
* Get default display
*
* @param context
* @return display
*/



/**
* Get default display
*
* @param view
* @return display
*/



/**
* Get default display width
*
* @param context
* @return display
*/



/**
* Get default display width
*
* @param view
* @return display
*/



/**
* Utility class for working with {@link SharedPreferences}
*/



/**
* Save preferences in given editor
*
* @param editor
*/



/**
* Utilities for displaying source code in a {@link WebView}
*/



/**
* Does the source editor have a highlighter set to match the given file name extension?
*
* @param extension
* @return true if highlighting available, false otherwise
*/



/**
* Bind {@link Object#toString()} to given {@link WebView}
*
* @param view
* @param name
* @param provider
* @return view
*/



/**
* Utilities for dealing with dates and times
*/



/**
* Get relative time for date
*
* @param date
* @return relative time
*/



/**
* Utilities for displaying toast notifications
*/



/**
* Show the given message in a {@link Toast}
* <p>
* This method may be called from any thread
*
* @param activity
* @param message
*/



/**
* Show the message with the given resource id in a {@link Toast}
* <p>
* This method may be called from any thread
*
* @param activity
* @param resId
*/



/**
* Show {@link Toast} for exception
* <p>
* This given default message will be used if an message can not be derived from the given {@link Exception}
* <p>
* This method may be called from any thread
*
* @param activity
* @param e
* @param defaultMessage
*/



/**
* Helpers for dealing with custom typefaces and measuring text to display
*/



/**
* Fork icon
*/



/**
* Create icon
*/



/**
* Delete icon
*/



/**
* Push icon
*/



/**
* Wiki icon
*/



/**
* Upload icon
*/



/**
* Gist icon
*/



/**
* Add member icon
*/



/**
* Follow icon
*/



/**
* Watch icon
*/



/**
* Pull request icon
*/



/**
* Issue open icon
*/



/**
* Issue reopen icon
*/



/**
* Issue close icon
*/



/**
* Issue comment icon
*/



/**
* Comment icon
*/



/**
* Find the maximum number of digits in the given numbers
*
* @param numbers
* @return max digits
*/



/**
* Get width of number of digits
*
* @param view
* @param numberOfDigits
* @return number width
*/



/**
* Get octocons typeface
*
* @param context
* @return octocons typeface
*/



/**
* Set octocons typeface on given text view(s)
*
* @param textViews
*/



/**
* Get typeface with name
*
* @param context
* @param name
* @return typeface
*/



/**
* Custom Guice-scope that makes an authenticated GitHub account available,
* by enforcing that the user is logged in before proceeding.
*/



/**
* Enters scope once we've ensured the user has a valid account.
*/



/**
* Enters scope using a GitHubAccount derived from the supplied account
*/



/**
* Returns a provider that always throws an exception complaining that the
* object in question must be seeded before it can be injected.
*
* @return typed provider
*/



/**
* Comment view holder
*/



/**
* Create a comment holder
*
* @param view
* @param avatarHelper
*/



/**
* Activity to create a comment on a {@link Gist} or {@link Issue}
*/



/**
* Create intent to create a comment
*
* @return intent
*/



/**
* Create intent to create a comment
*
* @param title
* @param subtitle
* @return intent
*/



/**
* Create intent to create a comment
*
* @param title
* @param subtitle
* @param user
* @return intent
*/



/**
* Enforces that user is logged in before work on the background thread commences.
*/



/**
* Enforces that user is logged in before work on the background thread commences.
*/



/**
* A cancellable Sync operation - aims to synchronize data
* for a given account.
*/



/**
* Authenticator service that returns a subclass of AbstractAccountAuthenticator in onBind()
*/

public static final String GITHUB_ACCOUNT_NAME = "GitHub"; // Shouldn't vary with Locale: user might get multiple
// accounts


/*
* The user has requested to add a new account to the system. We return an intent that will launch our login screen
* if the user has not logged in yet, otherwise our activity will just pass the user's credentials on to the
* account
* manager.
*/

return bundle;
// Log.d(AccountAuthenticatorService.TAG, "addAccount " + accountType +
// " authTokenType=" + authTokenType);



/**
* If set we are just checking that the user knows their credentials; this doesn't cause the user's password to be
* changed on the device.
*/



/**
* for posting authentication attempts back to UI thread
*/



/**
* Was the original caller asking for an entirely new account?
*/


// usernameEdit.setText(mUsername);
// mMessage.setText(getMessage());

return editText.length() > 0;
// if (!populated) {
// editText.setError(getString(R.string.blank_field_warning));
// }
// return populated;


/*
* {@inheritDoc}
*/



/**
* Handles onClick event on the Submit button. Sends username/password to the server for authentication.
* <p/>
* Specified by android:onClick="handleLogin" in the layout xml
*/



/**
* Called when response is received from the server for confirm credentials request. See onAuthenticationResult().
* Sets the AccountAuthenticatorResult which is sent back to the caller.
*/



/**
* Called when response is received from the server for authentication request. See onAuthenticationResult(). Sets
* the AccountAuthenticatorResult which is sent back to the caller. Also sets the authToken in AccountManager for
* this account.
*/



/**
* Called when the authentication process completes (see attemptLogin()).
*/

if (mRequestNewAccount) {
// "Please enter a valid username/password.
// mMessage
// .setText(getText(R.string.login_activity_loginfail_text_both));

} else {
// "Please enter a valid password." (Used when the
// account is already in the database but the password
// doesn't work.)
// mMessage
// .setText(getText(R.string.login_activity_loginfail_text_pwonly));



/**
* Returns the message to be displayed at the top of the login dialog box.
*/

private CharSequence getMessage() {
// getString(R.string.label);
// if (isEmpty(mUsername)) {
// // If no username, then we ask the user to log in using an
// // appropriate service.
// final CharSequence msg =
// getText(R.string.login_activity_newaccount_text);
// return msg;
// }
// if (isEmpty(mPassword)) {
// // We have an account but no password
// return getText(R.string.login_activity_loginfail_text_pwmissing);
// }



/**
* Manager cache for an account
*/



/**
* @param context
*/



/**
* Format version to bump if serialization format changes and cache should be ignored
*/



/**
* @return context
*/



/**
* Read data from file
*
* @param file
* @return data
*/



/**
* Write data to file
*
* @param file
* @param data
* @return this manager
*/



/**
* Query tables for columns
*
* @param helper
* @param tables
* @param columns
* @return cursor
*/



/**
* Query tables for columns
*
* @param helper
* @param tables
* @param columns
* @param selection
* @param selectionArgs
* @return cursor
*/



/**
* Get organizations
* <p/>
* This method may perform file and/or network I/O and should never be called on the UI-thread
*
* @return list of user and Orgs
* @throws IOException
*/



/**
* Get repositories for given {@link User}
* <p/>
* This method may perform network I/O and should never be called on the UI-thread
*
* @param user
* @param forceReload if true, cached data will not be returned
* @return list of repositories
* @throws IOException
*/



/**
* Get bookmarked issue filters
* <p/>
* This method may perform network I/O and should never be called on the UI-thread
*
* @return non-null but possibly empty collection of issue filters
*/



/**
* Get bookmarked issue filters
*
* @param requestFuture
*/



/**
* Add issue filter to store
* <p/>
* This method may perform file I/O and should never be called on the UI-thread
*
* @param filter
*/



/**
* Add issue filter to store
*
* @param filter
* @param requestFuture
*/



/**
* Add issue filter from store
* <p/>
* This method may perform file I/O and should never be called on the UI-thread
*
* @param filter
*/



/**
* Remove issue filter from store
*
* @param filter
* @param requestFuture
*/



/**
* Given a PersistableResource, this class will take support loading/storing it's data or requesting
* fresh data, as appropriate.
*/



/**
* Describes how to store, load or request-an-update-for a particular set of data.
*/



/**
* @return a cursor capable of reading the required information out of the database.
*/



/**
* @return a single item, read from this row of the cursor
*/



/**
* Store supplied items in DB, removing or updating prior entries
*/



/**
* Request the data directly from the GitHub API, rather than
* attempting to load it from the DB cache.
*/



/**
* Dialog helper to display a list of assignees to select one from
*/



/**
* Create dialog helper to display assignees
*
* @param activity
* @param requestCode
* @param repository
* @param service
*/



/**
* Get collaborator with login
*
* @param login
* @return collaborator or null if none found with login
*/



/**
* Show dialog with given assignee selected
*
* @param selectedAssignee
*/



/**
* Activity to create a new issue
*/



/**
* Create intent to create an issue in the given {@link Repository}
*
* @param repo
* @return intent
*/



/**
* Holder for a issue minus the comments
*/



/**
* Create issue header view holder
*
* @param view
* @param avatarHelper
* @param resources
*/



/**
* Comparators that sort issue's by created at date
*/



/**
* Descending order
*/



/**
* Ascending order
*/



/**
* Create comparator in descending order
*/



/**
* Create comparator
*
* @param direction
*/



/**
* Dashboard issue view holder
*/



/**
* Create dashboard issue view holder
*
* @param v
* @param helper
* @param numberWidth
*/



/**
* Activity to edit the title and description for an issue
*/



/**
* Create intent to edit an issue
*
* @param issue
* @return intent
*/



/**
* Activity to browse a list of bookmarked {@link IssueFilter} items
*/



/**
* Create intent to browse issue filters
*
* @return intent
*/



/**
* Activity to create a persistent issues filter for a repository
*/



/**
* Create intent for creating an issue filter for the given repository
*
* @param repo
* @param filter
* @return intent
*/



/**
* List fragment displaying a list of {@link IssueFilter} items
*/



/**
* Activity for browsing a list of issues scoped to a single {@link IssueFilter}
*/



/**
* Create intent to browse a repository's issues
*
* @param repository
* @return intent
*/



/**
* Create intent to browse the filtered issues
*
* @param filter
* @return intent
*/



/**
* Dashboard activity for issues
*/



/**
* Pager adapter for the issues dashboard
*/



/**
* Create pager adapter
*
* @param resources
* @param fragmentManager
*/



/**
* Issue filter containing at least one valid query
*/



/** serialVersionUID */



/**
* Create filter
*
* @param repository
*/



/**
* Set only open issues to be returned
*
* @param open
*            true for open issues, false for closed issues
* @return this filter
*/



/**
* Add label to filter
*
* @param label
* @return this filter
*/



/**
* @param labels
* @return this filter
*/



/**
* @return labels
*/



/**
* @return repository
*/



/**
* @param milestone
* @return this filter
*/



/**
* @return milestone
*/



/**
* @param assignee
* @return this filter
*/



/**
* Are only open issues returned?
*
* @return true if open only, false if closed only
*/



/**
* @return assignee
*/



/**
* Create a map of all the request parameters represented by this filter
*
* @return non-null map of filter request parameters
*/



/**
* Get display {@link CharSequence} representing this filter
*
* @return display
*/

} catch (CloneNotSupportedException e) {
// This should never happen since this class implements Cloneable



/**
* View holder for an {@link IssueFilter}
*/



/**
* Create holder for view
*
* @param view
* @param avatarHelper
*/



/**
* Holder for a issue minus the comments
*/



/**
* Create issue header view holder
*
* @param view
* @param avatarHelper
*/



/**
* Helper class for showing more and more pages of issues
*/



/**
* Store to add loaded issues to
*/



/**
* Create issue pager
*
* @param store
*/



/**
* Store of loaded issues
*/



/**
* Create issue store
*
* @param service
*/



/**
* Get issue
*
* @param repository
* @param number
* @return issue or null if not in store
*/



/**
* Add issue to store
*
* @param issue
* @return issue
*/



/**
* Add issue to store
*
* @param repository
* @param issue
* @return issue
*/



/**
* Refresh issue
*
* @param repository
* @param number
* @return refreshed issue
* @throws IOException
*/



/**
* Edit issue
*
* @param repository
* @param issue
* @return edited issue
* @throws IOException
*/



/**
* Fragment to display a list of issues
*/



/**
* Dialog helper to display a list of possibly selected issue labels
*/



/**
* Create dialog helper to display labels
*
* @param activity
* @param requestCode
* @param repository
* @param service
*/



/**
* Get label with name
*
* @param name
* @return label or null if none with name
*/



/**
* Show dialog with given labels selected
*
* @param selectedLabels
*/



/**
* Custom drawable for labels applied to an issue
*/



/**
* Create drawable for labels
*
* @param paddingLeft
* @param textSize
* @param maxWidth
* @param labels
*/



/**
* Dialog helper to display a list of milestones to select one from
*/



/**
* Create dialog helper to display milestones
*
* @param activity
* @param requestCode
* @param repository
* @param service
*/



/**
* Get milestones
*
* @return list of milestones
*/



/**
* Show dialog with given milestone selected
*
* @param selectedMilestone
*/



/**
* Get milestone number for title
*
* @param title
* @return number of -1 if not found
*/



/**
* View holder for an issue in a repository
*/



/**
* Find the maximum number of digits in the given issue numbers
*
* @param issues
* @return max digits
*/



/**
* Measure size of widest issue number in issues
*
* @param number
* @param issues
* @return number width
*/



/**
* Create view holder
*
* @param v
* @param helper
* @param numberWidth
*/



/**
* Tests of the news text rendering
*/



/**
* Parent filter for adding child {@link CommitDiffFilter} filters
* <p>
* This is an optimization when using multiple {@link CommitDiffFilter}
* instances in a single {@link RevWalk} so the {@link TreeWalk} between the
* current commits and its parent(s) only has to be performed once per commit
* visited.
*/



/**
* Parent filter that invokes
* {@link #include(org.eclipse.jgit.revwalk.RevCommit, java.util.Collection)} on
* all child filters ignoring the return value
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Walker that visits all submodule entries found in a tree
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
* 
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
* 
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Unit tests of {@link SubmoduleWalk}
*/



/**
* Show annotation action handler
*/



/**
* Show annotation action class.
*/



/**
* Annotate operation
*/



/**
* Annotation information control
*/



/**
* Annotation information control creator
*/



/**
* Annotation revision
*/



/**
* Author colors
*/



/**
* Replace with HEAD revision action handler
*/



/**
* Replace with Commit action
*/



/**
* Replace with commit action handler
*/



/**
* Replace with ref action handler
*/



/**
* Replace with HEAD revision action
*/



/**
* Replace with reference action
*/



/**
* GitHub issue task editor attribute part that display labels and milestone
* attribute editors.
*/



/**
* GitHub connector specific UI extensions.
*/



/**
* Editor part for viewing an issue's labels.
*/



/**
* GitHub issue repository query page class.
*/



/**
* GitHub connector specific extensions.
*/



/**
* Issue summary task editor part modeled after {@link TaskEditorSummaryPart}
* but displaying reporter and assignee avatar images.
*/



/**
* Editor page for GitHub.
*/



/**
* Editor page factory for GitHub.
*/



/**
* NLS
*/



/**
* GitHub class
*/



/**
* GitHub exception that wraps and formats a {@link RequestException}
*/



/**
* NLS for Mylyn GitHub Core
*/



/**
* Utilities for working with {@link IRepositoryQuery} objects.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* GitHub issue task attributes
*/



/**
* GitHub task attribute mapper class.
*/



/**
* GitHub connector.
*/



/**
* Enumeration of task operations
*/



/**
* GitHub issue task data handler
*/



/**
* NLS for Mylyn GitHub Core
*/

39a41,58

/**
* Measure size of widest issue number in issues
*
* @param number
* @param issues
* @return number width
*/



/**
* Handler to blame a path on a selected commit
*/



/**
* Class that encapsulates a particular {@link Repository} instance and
* {@link RevCommit} instance.
*
* This class also provides access to the {@link FileDiff} objects introduced by
* the commit.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link RepositoryCommit}
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Activity that displays a {@link ViewPager} and has workarounds for
* ActionBar/ViewPager bugs
*/



/**
* Get provider of the currently selected fragment
*
* @return fragment provider
*/

int positionOffsetPixels) {
// Intentionally left blank

public void onPageScrollStateChanged(int state) {
// Intentionally left blank



/**
* Pager that stores current fragment
*/



/**
* @param activity
*/



/**
* Provides a fragment
*/



/**
* Get selected fragment
*
* @return fragment
*/



/**
* Schedule a call to {@link #setItem(int)} to occur on the UI-thread
*
* @param item
*/



/**
* Pager adapter that provides the current fragment
*/



/**
* @param activity
*/



/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/

88a94,122

/**
* Check if the search query is an exact repository name/owner match and
* open the repository activity and finish the current activity when it is
*
* @param query
* @return true if query opened as repository, false otherwise
*/



/**
* Dialog fragment to select an issue assignee from a list of collaborators
*/



/**
* Arguments key for the selected item
*/



/**
* Confirm message and deliver callback to given activity
*
* @param activity
* @param requestCode
* @param title
* @param message
* @param choices
* @param selectedChoice
*/



/**
* Create main application
*/

public GaugesApplication() {
// Disable http.keepAlive on Froyo and below



/**
* Create main application
*
* @param context
*/



/**
* Create main application
*
* @param instrumentation
*/



/**
* Unit tests of {@link ShortestAuthorEmailFilter}
*/



/**
* Filter to track the commit(s) with the shortest author email address
*/



/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/



/**
* Create resource form URL
*
* @param gson
* @param url
* @throws IOException
*/



/**
* Extension of {@link Issue} that includes the {@link Repository} that the
* issue is in.
* <p>
* This type of issue is returned from {@link IssueService} calls that don't
* require an {@link IRepositoryIdProvider} to be specified and therefore the
* repository information is needed to correlate which issues occur in which
* repositories.
*/



/**
* Unit tests of {@link RepositoryIssue}
*/

0a1,15
/*
* Copyright 2012 GitHub Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/



/**
* Utilities for displaying source code in a {@link WebViewClient}
*/



/**
* Bind {@link Object#toString()} to given {@link WebView}
*
* @param view
* @param provider
* @return view
*/



/**
* Viewer to display one or more file differences using standard editor colors
* and fonts preferences.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Custom drawable for labels applied to an issue
*/



/**
* Create drawable for labels
*
* @param textSize
* @param labels
*/



/**
* Unit tests of {@link BlameCommand}
*/



/**
* Unit tests of {@link BlameGenerator}
*/



/**
* Blame command for building a {@link Line} list for a file path.
*/



/**
* Generator of author information for lines based on when they were introduced
* into a file.
*/



/**
* Line class that spans one or more continuous revisions.
*/



/**
* Unit tests of using a {@link WorkingTreeIterator} for a repository with
* submodules.
*/

22a23,25

/**
* GitHub class
*/



/**
* GitHub Repository class.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link org.eclipse.jgit.api.SubmoduleAddCommand}
*/



/**
* Unit tests of {@link SubmoduleInitCommand}
*/



/**
* Unit tests of {@link SubmoduleStatusCommand}
*/



/**
* Unit tests of {@link SubmoduleSyncCommand}
*/



/**
* Unit tests of {@link SubmoduleUpdateCommand}
*/



/**
* Unit tests of {@link SubmoduleWalk}
*/



/**
* Status class containing the type, path, and commit id of the submodule.
*/



/**
* Enumeration of different statuses that a submodule can be in
*/



/**
* Walker that visits all submodule entries found in a tree
*/



/**
* A class used to execute a submodule add command.
*
* This will clone the configured submodule, register the submodule in the
* .gitmodules file and the repository config file, and also add the submodule
* and .gitmodules file to the index.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule status command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule sync command.
*
* This will set the remote URL in a submodule's repository to the current value
* in the .gitmodules file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule init command.
*
* This will copy the 'url' and 'update' fields from the working tree
* .gitmodules file to a repository's config file for each submodule not
* currently present in the repository's config file.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* A class used to execute a submodule update command.
*
* @see <a
*      href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"
*      >Git documentation about submodules</a>
*/



/**
* Unit tests of path-based uses of {@link CheckoutCommand}
*/



/**
* Utilities for writing multiple HTTP requests
*/

//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//



/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/



/**
* Unit tests of {@link TypeCountFilter}
*/



/**
* Unit tests of {@link OAuthService}
*/



/**
* Unit tests of {@link Authorization}
*/



/**
* Unit tests of {@link Application}
*/



/**
* Authorization model class
*/



/**
* Authorized application model class
*/



/**
* Service for interacting with a user's OAUth authorizations
*
* @see <a href="http://developer.github.com/v3/oauth/">GitHub OAuth API
*      documentation</a>
*/



/**
* Tests using client with custom hostname
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link StashCreateCommand}
*/



/**
* Command class to stash changes in the working directory and index in a
* commit.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/



/**
* Context
*/



/**
* Unit tests of {@link BlameCommand}
*/



/**
* Unit tests of {@link BlameGenerator}
*/



/**
* Blame command for building a {@link Line} list for a file path.
*/



/**
* Generator of author information for lines based on when they were introduced
* into a file.
*/



/**
* Line class that spans one or more continuous revisions.
*/



/**
* Page link class to be used to determine the links to other pages of request
* responses encoded in the current response. These will be present if the
* result set size exceeds the per page limit.
*/



/**
* Pages request class that contains a collector for accept resources page by
* page.
* 
* @param <V>
*/



/**
* GitHub API response class.
*/



/**
* Get the response body as a {@link String} and set it as the value of the
* given reference.
*
* @param output
* @return this request
* @throws HttpRequestException
*/



/**
* Get a 500
*
* @throws Exception
*/



/**
* Get a 400
*
* @throws Exception
*/



/**
* Get a 304
*
* @throws Exception
*/



/**
* Unit tests for {@link DiffStyleRangeFormatter}
*/



/**
* Diff style range formatter class that builds up a list of
* {@link DiffStyleRange} instances as each {@link FileDiff} is being written to
* an {@link IDocument}.
*/



/**
* Expand non-templated URI
*/

String login = id.substring(0, slash);
// Use actor if it matches login parsed from repository id



/**
* Tests of {@link RefUtils}
*/



/**
* Verify {@link RefUtils#isBranch(org.eclipse.egit.github.core.Reference)}
*/



/**
* Verify {@link RefUtils#isTag(org.eclipse.egit.github.core.Reference)}
*/



/**
* Verify {@link RefUtils#isValid(org.eclipse.egit.github.core.Reference)}
*/



/**
* Verify {@link RefUtils#getName(Reference)}
*/



/**
* Verify {@link RefUtils#getPath(Reference)}
*/



/**
* Connection provider interface
*/



/**
* Default connection provider
*/



/**
* Pool-based connection provider
*/



/**
* Redis-backed cache service
*/



/**
* Redis-backed chunk table
*/



/**
* Base client class
*/



/**
* Redis-backed database
*/



/**
* Redis-backed object index table
*/



/**
* Redis-backed ref table
*/



/**
* Redis-backed repository index table
*/



/**
* Redis-backed repository table
*/



/**
* Redis write buffer
*/



/**
* Get typeface with name
*
* @param name
* @param context
* @return typeface, either cached or loaded from the assets
*/



/**
* Tree model class
*/



/**
* Commit model class.
*/



/**
* Pull request commit model class.
*/



/**
* Commit file model class.
*/



/**
* 
*/



/**
* Gson utilities.
*/



/** serialVersionUID */



/**
* @return people
*/



/**
* @param people
* @return this summary
*/



/**
* @return views
*/



/**
* @param views
* @return this summary
*/



/**
* Base URL for all requests
*/



/**
* Authentication URL
*/



/**
* Gauges URL
*/



/**
* Embedded Gauges URL
*/



/**
* Clients URL
*/



/** serialVersionUID */



/**
* @return date
*/



/**
* @param date
* @return this summary
*/



/**
* Create view holder
*
* @param view
*/



/**
* Create async loader
*
* @param context
*/

if (isReset())
// An async query came in while the loader is stopped

protected void onStopLoading() {
// Attempt to cancel the current load task if possible.


// Ensure the loader is stopped



/**
* Create view holder
*
* @param view
*/



/**
* Create view holder
*
* @param view
* @param resources
*/



/**
* Create traffic view holder
*
* @param view
*/



/**
* Search unit test suite
*/



/**
* Commit unit test suite
*/



/**
* Commit search query class that runs a {@link RevWalk} for all
* {@link Repository} objects included in the {@link CommitSearchSettings} and
* matches all {@link RevCommit} objects against the search settings.
*/



/**
* Issue summary task editor part modeled after {@link TaskEditorSummaryPart}
* but displaying reporter and assignee avatar images.
* 
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Drawable of a bar graph of people and views over a 7-day period
*/



/**
104c120

public MultiTypeAdapter addItems(int type, Object[] items) {
117a134,153
* Add items to adapter registered as the given type
*
* @param type
* @param items
* @return this adapter
*/



/**
171c207,219

protected void update(int position, View view, Object item, int type) {
this.view = view;
update(position, item, type);
}


/**
* Update view for item
*
* @param position
* @param item
* @param type
*/



/**
135a141,203
}


/**
* Get text view with given id
*
* @param childViewId
* @return text view
*/



/**
* Get image view with given id
*
* @param childViewId
* @return image view
*/



/**
* Get view with given id
*
* @param childViewId
* @return view
*/



/**
* Set text on text view with given id
*
* @param childViewId
* @param text
* @return text view
*/



/**
* Get child view
*
* @param childViewId
* @param childViewClass
* @return child view
*/



/**
* Set child view as gone or visible
*
* @param childViewId
* @param gone
* @return child view
*/


/*
* Copyright 2012 GitHub Inc.
8,10c4,15

* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/



/**
* Commit search result class.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Request codes
*/



/**
* Request to view a Gist
*/



/**
* Task to load and open a Gist with an id
*/



/**
* Create task
*
* @param context
* @param gistId
*/



/**
* Execute the task with a progress dialog displaying.
* <p>
* This method must be called from the main thread.
*/



/**
* Task to open a random Gist
*/



/**
* Create task
*
* @param context
*/



/**
* Execute the task with a progress dialog displaying.
* <p>
* This method must be called from the main thread.
*/


// Make at least two tries since page numbers are volatile



/**
* Reference to a {@link Gauge}
*/

22a18,21

/**
* Gauge id
*/



/**
* Unit tests of {@link UserService}
*/



/**
* 
*/



/**
* Live unit tests of {@link LabelService}
*/



/**
* 
*/



/**
* {@link IImportWizard} for cloning GitHub repositories.
*/



/**
* Search for GitHub repositories wizard page.
*/



/**
* Team model class.
*/



/**
* User plan
*/



/******************************************************************************
10c10

*****************************************************************************/



/**
* GitHub Repository class.
*/



/**
* Repository id
*/



/**
* Interface to provide an ID for a repository. This refers to the unique
* identified of any GitHub repository. This is the owner and name of the
* repository joined by a '/'.
*/



/**
* 
*/



/**
* Organization service class
*/



/**
* Service class for working with organization teams
*/



/**
* User service class.
*/



/**
* Interceptor that sets authentication credentials
*/



/**
* Exception class to be thrown when iterating over pages fails
*/



/**
* Iterator for getting paged responses
* 
* @param <V>
*/

CharSequence currentEncoded = rawHtmlCache.put(id, encoded);
// Remove full html if raw html has changed

92a99,103

/**
* Refresh menu item
*/


// Disable http.keepAlive on Froyo and below



/**
* Checkout commit handler
*/



/**
* Operation that generates a {@link PollingResult} for a collection of
* {@link BuildRepository} instances.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Unit tests of {@link PollOperation}
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Get text view with id
*
* @param view
* @param id
* @return text view
*/



/**
* Get image view with id
*
* @param view
* @param id
* @return text view
*/



/**
* Item view for a commit
*/



/**
* Commit id
*/



/**
* Commit author
*/



/**
* Commit author avatar
*/



/**
* Commit message
*/



/**
* Create view
*
* @param view
*/



/**
* Fragment to display a list of repository commits
*/



/**
* Avatar loader
*/



/**
* Commit service
*/

protected RepositoryCommit register(RepositoryCommit resource) {
// Store first parent of last commit registered for next page
// lookup



/**
*
*/



/**
* @param viewId
* @param inflater
* @param elements
* @param avatars
*/



/**
* @param viewId
* @param inflater
* @param elements
* @param avatars
*/



/**
* Unit tests of {@link SearchIssue}
*/



/**
* GitHub v2 issue model class.
*/



/**
* Tests for displaying a specific {@link Gauge}
*/



/**
* Create test for {@link GaugeViewActivity}
*/



/**
* Configure intent used to display a {@link Gauge}
*/



/**
* Verify activity exists
*/



/**
* Unit tests of {@link BlameCommand}
*/



/**
* Generator of author information for lines based on when they were introduced
* into a file.
*/



/**
* Line class that spans one or more continuous revisions.
*/



/**
* Blame command for building a {@link Line} list for a file path.
*/



/**
* Unit tests of {@link StashCreateCommand}
*/



/**
* Command class to stash changes in the working directory and index.
*
* @see <a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"
*      >Git documentation about Stash</a>
*/

CharSequence encoded = HtmlUtils.encode(html, loading);
// Use default encoding if no img tags



/**
* Base sherlock activity
*/



/**
* Finder bound to this activity's view
*/



/**
* Get intent extra
*
* @param name
* @return serializable
*/



/**
* Get intent extra
*
* @param name
* @return int
*/



/**
* Get intent extra
*
* @param name
* @return string
*/

//
//  NOTE: The following source code is heavily derived from the
//  iHarder.net public domain Base64 library.  See the original at
//  http://iharder.sourceforge.net/current/java/base64/
//



/**
* Encodes and decodes to and from Base64 notation.
* <p>
* I am placing this code in the Public Domain. Do with it as you will. This
* software comes with no guarantees or warranties but with plenty of
* well-wishing instead! Please visit <a
* href="http://iharder.net/base64">http://iharder.net/base64</a> periodically
* to check for updates or to contribute improvements.
* </p>
*
* @author Robert Harder
* @author rob@iharder.net
* @version 2.1, stripped to minimum feature set used by JGit.
*/



/**
* Utilities for writing multiple HTTP requests
*/



/**
* Tests for displaying a specific {@link Gauge}
*/



/**
* Create test for {@link GaugeViewActivity}
*/



/**
* Configure intent used to display a {@link Gauge}
*/



/**
* Verify activity exists
*/



/**
* 
*/



/**
* Organization service class
*/



/**
* Unit tests of {@link CommitCountFilter}
*/



/**
* Issue service class for listing, searching, and fetching {@link Issue}
* objects using a {@link GitHubClient}.
*
* @author Kevin Sawicki (kevin@github.com)
*/



/**
* Get resource property as a boolean
*
* @throws Exception
*/



/**
* Unit tests of {@link RepositoryService} class
*/



/**
* Unit tests of {@link RenameBranchCommand}
*/



/**
* Unit tests of {@link GistFile}
*/



/**
* Unit tests of {@link GistChangeStatus}
*/



/**
* Gist repository query page class.
*/



/**
* NLS
*/



/**
* Author commit histogram filter
*/



/**
* Author commit histogram filter
*/



/**
* Comparator that sorts by most user activity first
*/



/**
* Node representing a stashed commit in a repository
*/



/**
* Represents the "Stash" node
*/



/**
* Replace with HEAD revision action
*/



/**
*
*/



/**
* Commit diff filter that computes the edits introduced by each commit visited
* and calls {@link #include(org.eclipse.jgit.revwalk.RevWalk, RevCommit)}.
*/



/**
* Search unit test suite
*/



/**
* Commit unit test suite
*/



/**
* Base class for commands that use a {@link Transport} during execution.
* <p>
* This class provides standard configuration of a transport for options such as
* a {@link CredentialsProvider}, a timeout, and a
* {@link TransportConfigCallback}.
*
* @param <C>
* @param <T>
*/



/**
* Interceptor that sets authentication credentials
*/



/**
* Unit tests of {@link PullRequestReviewCommentPayload}
*/



/**
* Payload for an event with type {@link Event#TYPE_PULL_REQUEST_REVIEW_COMMENT}
*/

88a89,93

/**
* Is the list currently shown?
*/



/**
* Filter that tracks commits where a file with the same content was modified.
*/



/**
* Unit tests of {@link DuplicateBlobFilter}
*/



/**
* Header text class to render selectable text instead of a label on the form
* heading.
*
* Portions of this code were lifted from the Mylyn TaskEditor class that
* applies a similar technique.
*/



/**
* Parses a {@link Gist} from a {@link Uri}
*/



/**
* Parse a {@link Gist} from a non-null {@link Uri}
*
* @param uri
* @return {@link Gist} or null if none found in given {@link Uri}
*/



/**
* Command to drop one or all stashed commits
*/



/**
* Operation to drop a stashed commit
*/



/**
* Editor class to view a commit in a form editor.
*/



/**
* Unit tests of {@link UserService}
*/



/**
* User plan
*/



/**
* User service class.
*/



/**
* Intent key representing the id of the Gist to display
*/



/**
* Create intent to view Gist
*
* @param context
* @param gist
* @return intent
*/



/**
* Create intent to view Gist
*
* @param context
* @param gistId
* @return intent
*/


/*
* Copyright 2012 Kevin Sawicki <kevinsawicki@gmail.com>
8,10c4,15

* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

intent = new Intent(INTENT_PREFIX + actionSuffix); // actionSuffix =
// e.g.
// "repos.VIEW"


// Load avatar if single issue and user is currently unset of missing
// avatar URL


// Support opening this activity with a single Gist that may be present
// in the intent but not currently present



/**
* Verity empty URI
*/



/**
* Verify no name
*/



/**
* Verity URI with name
*/



/**
* Verity URI with name
*/



/**
* @param activityClass
*/



/**
* Verify activity was created successfully
*/



/**
* Get edit text with id
* 
* @param id
* @return edit text
*/



/**
* Get view with id
* 
* @param id
* @return edit text
*/



/**
* Send focus to view
* 
* @param view
* @throws Throwable
*/



/**
* Send text
* 
* @param text
*/



/**
* Create test
*/



/**
* Verify empty comment can't be created
* 
* @throws Throwable
*/



/**
* Create test
*/



/**
* Verity empty uri
*/



/**
* Verify URI with no owner
*/



/**
* Verify URI with owner but no name
*/



/**
* Verify URI with owner but no name
*/



/**
* Verify URI with owner but no name
*/



/**
* Verify text of commit comment event
*/



/**
* Verify text of create event
*/



/**
* Verify text of create event
*/



/**
* Verify text of deleve event
*/



/**
* Verify text of follow event
*/



/**
* Verify text of Gist event
*/



/**
* Verify text of wiki event
*/



/**
* Verify text of issue comment event
*/



/**
* Verify text of issue event
*/



/**
* Verify text of member event
*/



/**
* Verify text of open sourced event
*/



/**
* Verify text of watch event
*/



/**
* Verify text of pull request event
*/



/**
* Verify text of push event
*/



/**
* Verify text of push event
*/



/**
* Verify bad input
*/



/**
* Verify eviction
*/



/**
* Verify input/output to disk of {@link RecentRepositories} state
*/



/**
* Verify repositories are scoped to organization
*/



/**
* Create test for {@link LoginActivity}
*/



/**
* Verify activity was created successfully
* 
* @throws Throwable
*/



/**
* Create test
*/



/**
* Verify empty comment can't be created
* 
* @throws Throwable
*/



/**
* Verity empty uri
*/



/**
* Verity non-numeric issue number in uri
*/



/**
* Verify http uri
*/



/**
* Verify https uri
*/



/**
* Verify uri with comment fragment
*/



/**
* Create test
*/



/**
* Create Gist with initial text
*/



/**
* Create Gist with no initial text
* 
* @throws Throwable
*/